/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AType extends PType
{
    private TKwnullable _kwnullable_;
    private TClassid _id_;
    private final LinkedList<PType> _types_ = new LinkedList<PType>();

    public AType()
    {
        // Constructor
    }

    public AType(
        @SuppressWarnings("hiding") TKwnullable _kwnullable_,
        @SuppressWarnings("hiding") TClassid _id_,
        @SuppressWarnings("hiding") List<PType> _types_)
    {
        // Constructor
        setKwnullable(_kwnullable_);

        setId(_id_);

        setTypes(_types_);

    }

    @Override
    public Object clone()
    {
        return new AType(
            cloneNode(this._kwnullable_),
            cloneNode(this._id_),
            cloneList(this._types_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAType(this);
    }

    public TKwnullable getKwnullable()
    {
        return this._kwnullable_;
    }

    public void setKwnullable(TKwnullable node)
    {
        if(this._kwnullable_ != null)
        {
            this._kwnullable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwnullable_ = node;
    }

    public TClassid getId()
    {
        return this._id_;
    }

    public void setId(TClassid node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PType> getTypes()
    {
        return this._types_;
    }

    public void setTypes(List<PType> list)
    {
        this._types_.clear();
        this._types_.addAll(list);
        for(PType e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwnullable_)
            + toString(this._id_)
            + toString(this._types_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwnullable_ == child)
        {
            this._kwnullable_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._types_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwnullable_ == oldChild)
        {
            setKwnullable((TKwnullable) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TClassid) newChild);
            return;
        }

        for(ListIterator<PType> i = this._types_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PType) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
