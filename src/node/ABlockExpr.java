/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ABlockExpr extends PExpr
{
    private final LinkedList<PExpr> _expr_ = new LinkedList<PExpr>();
    private TKwend _kwend_;

    public ABlockExpr()
    {
        // Constructor
    }

    public ABlockExpr(
        @SuppressWarnings("hiding") List<PExpr> _expr_,
        @SuppressWarnings("hiding") TKwend _kwend_)
    {
        // Constructor
        setExpr(_expr_);

        setKwend(_kwend_);

    }

    @Override
    public Object clone()
    {
        return new ABlockExpr(
            cloneList(this._expr_),
            cloneNode(this._kwend_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlockExpr(this);
    }

    public LinkedList<PExpr> getExpr()
    {
        return this._expr_;
    }

    public void setExpr(List<PExpr> list)
    {
        this._expr_.clear();
        this._expr_.addAll(list);
        for(PExpr e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TKwend getKwend()
    {
        return this._kwend_;
    }

    public void setKwend(TKwend node)
    {
        if(this._kwend_ != null)
        {
            this._kwend_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwend_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._kwend_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_.remove(child))
        {
            return;
        }

        if(this._kwend_ == child)
        {
            this._kwend_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PExpr> i = this._expr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._kwend_ == oldChild)
        {
            setKwend((TKwend) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
