/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AModule extends PModule
{
    private PModuledecl _moduledecl_;
    private final LinkedList<PImport> _imports_ = new LinkedList<PImport>();
    private final LinkedList<PClassdef> _classdefs_ = new LinkedList<PClassdef>();

    public AModule()
    {
        // Constructor
    }

    public AModule(
        @SuppressWarnings("hiding") PModuledecl _moduledecl_,
        @SuppressWarnings("hiding") List<PImport> _imports_,
        @SuppressWarnings("hiding") List<PClassdef> _classdefs_)
    {
        // Constructor
        setModuledecl(_moduledecl_);

        setImports(_imports_);

        setClassdefs(_classdefs_);

    }

    @Override
    public Object clone()
    {
        return new AModule(
            cloneNode(this._moduledecl_),
            cloneList(this._imports_),
            cloneList(this._classdefs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModule(this);
    }

    public PModuledecl getModuledecl()
    {
        return this._moduledecl_;
    }

    public void setModuledecl(PModuledecl node)
    {
        if(this._moduledecl_ != null)
        {
            this._moduledecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moduledecl_ = node;
    }

    public LinkedList<PImport> getImports()
    {
        return this._imports_;
    }

    public void setImports(List<PImport> list)
    {
        this._imports_.clear();
        this._imports_.addAll(list);
        for(PImport e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PClassdef> getClassdefs()
    {
        return this._classdefs_;
    }

    public void setClassdefs(List<PClassdef> list)
    {
        this._classdefs_.clear();
        this._classdefs_.addAll(list);
        for(PClassdef e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._moduledecl_)
            + toString(this._imports_)
            + toString(this._classdefs_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._moduledecl_ == child)
        {
            this._moduledecl_ = null;
            return;
        }

        if(this._imports_.remove(child))
        {
            return;
        }

        if(this._classdefs_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._moduledecl_ == oldChild)
        {
            setModuledecl((PModuledecl) newChild);
            return;
        }

        for(ListIterator<PImport> i = this._imports_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PImport) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PClassdef> i = this._classdefs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassdef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
