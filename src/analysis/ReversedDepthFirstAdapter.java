/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPModule().apply(this);
        outStart(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            List<PClassdef> copy = new ArrayList<PClassdef>(node.getClassdefs());
            Collections.reverse(copy);
            for(PClassdef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PImport> copy = new ArrayList<PImport>(node.getImports());
            Collections.reverse(copy);
            for(PImport e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getModuledecl() != null)
        {
            node.getModuledecl().apply(this);
        }
        outAModule(node);
    }

    public void inAModuledecl(AModuledecl node)
    {
        defaultIn(node);
    }

    public void outAModuledecl(AModuledecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuledecl(AModuledecl node)
    {
        inAModuledecl(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getKwmodule() != null)
        {
            node.getKwmodule().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAModuledecl(node);
    }

    public void inAStdImport(AStdImport node)
    {
        defaultIn(node);
    }

    public void outAStdImport(AStdImport node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStdImport(AStdImport node)
    {
        inAStdImport(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getKwimport() != null)
        {
            node.getKwimport().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        outAStdImport(node);
    }

    public void inANoImport(ANoImport node)
    {
        defaultIn(node);
    }

    public void outANoImport(ANoImport node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoImport(ANoImport node)
    {
        inANoImport(node);
        if(node.getKwend() != null)
        {
            node.getKwend().apply(this);
        }
        if(node.getKwimport() != null)
        {
            node.getKwimport().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        outANoImport(node);
    }

    public void inAPublicVisibility(APublicVisibility node)
    {
        defaultIn(node);
    }

    public void outAPublicVisibility(APublicVisibility node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicVisibility(APublicVisibility node)
    {
        inAPublicVisibility(node);
        outAPublicVisibility(node);
    }

    public void inAPrivateVisibility(APrivateVisibility node)
    {
        defaultIn(node);
    }

    public void outAPrivateVisibility(APrivateVisibility node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateVisibility(APrivateVisibility node)
    {
        inAPrivateVisibility(node);
        if(node.getKwprivate() != null)
        {
            node.getKwprivate().apply(this);
        }
        outAPrivateVisibility(node);
    }

    public void inAProtectedVisibility(AProtectedVisibility node)
    {
        defaultIn(node);
    }

    public void outAProtectedVisibility(AProtectedVisibility node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtectedVisibility(AProtectedVisibility node)
    {
        inAProtectedVisibility(node);
        if(node.getKwprotected() != null)
        {
            node.getKwprotected().apply(this);
        }
        outAProtectedVisibility(node);
    }

    public void inAIntrudeVisibility(AIntrudeVisibility node)
    {
        defaultIn(node);
    }

    public void outAIntrudeVisibility(AIntrudeVisibility node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntrudeVisibility(AIntrudeVisibility node)
    {
        inAIntrudeVisibility(node);
        if(node.getKwintrude() != null)
        {
            node.getKwintrude().apply(this);
        }
        outAIntrudeVisibility(node);
    }

    public void inAStdClassdef(AStdClassdef node)
    {
        defaultIn(node);
    }

    public void outAStdClassdef(AStdClassdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStdClassdef(AStdClassdef node)
    {
        inAStdClassdef(node);
        if(node.getKwend() != null)
        {
            node.getKwend().apply(this);
        }
        {
            List<PPropdef> copy = new ArrayList<PPropdef>(node.getPropdefs());
            Collections.reverse(copy);
            for(PPropdef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSuperclass> copy = new ArrayList<PSuperclass>(node.getSuperclasses());
            Collections.reverse(copy);
            for(PSuperclass e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PFormaldef> copy = new ArrayList<PFormaldef>(node.getFormaldefs());
            Collections.reverse(copy);
            for(PFormaldef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClasskind() != null)
        {
            node.getClasskind().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAStdClassdef(node);
    }

    public void inATopClassdef(ATopClassdef node)
    {
        defaultIn(node);
    }

    public void outATopClassdef(ATopClassdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATopClassdef(ATopClassdef node)
    {
        inATopClassdef(node);
        {
            List<PPropdef> copy = new ArrayList<PPropdef>(node.getPropdefs());
            Collections.reverse(copy);
            for(PPropdef e : copy)
            {
                e.apply(this);
            }
        }
        outATopClassdef(node);
    }

    public void inAMainClassdef(AMainClassdef node)
    {
        defaultIn(node);
    }

    public void outAMainClassdef(AMainClassdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClassdef(AMainClassdef node)
    {
        inAMainClassdef(node);
        {
            List<PPropdef> copy = new ArrayList<PPropdef>(node.getPropdefs());
            Collections.reverse(copy);
            for(PPropdef e : copy)
            {
                e.apply(this);
            }
        }
        outAMainClassdef(node);
    }

    public void inAConcreteClasskind(AConcreteClasskind node)
    {
        defaultIn(node);
    }

    public void outAConcreteClasskind(AConcreteClasskind node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcreteClasskind(AConcreteClasskind node)
    {
        inAConcreteClasskind(node);
        if(node.getKwclass() != null)
        {
            node.getKwclass().apply(this);
        }
        outAConcreteClasskind(node);
    }

    public void inAAbstractClasskind(AAbstractClasskind node)
    {
        defaultIn(node);
    }

    public void outAAbstractClasskind(AAbstractClasskind node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractClasskind(AAbstractClasskind node)
    {
        inAAbstractClasskind(node);
        if(node.getKwclass() != null)
        {
            node.getKwclass().apply(this);
        }
        if(node.getKwabstract() != null)
        {
            node.getKwabstract().apply(this);
        }
        outAAbstractClasskind(node);
    }

    public void inAInterfaceClasskind(AInterfaceClasskind node)
    {
        defaultIn(node);
    }

    public void outAInterfaceClasskind(AInterfaceClasskind node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceClasskind(AInterfaceClasskind node)
    {
        inAInterfaceClasskind(node);
        if(node.getKwinterface() != null)
        {
            node.getKwinterface().apply(this);
        }
        outAInterfaceClasskind(node);
    }

    public void inAEnumClasskind(AEnumClasskind node)
    {
        defaultIn(node);
    }

    public void outAEnumClasskind(AEnumClasskind node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumClasskind(AEnumClasskind node)
    {
        inAEnumClasskind(node);
        if(node.getKwenum() != null)
        {
            node.getKwenum().apply(this);
        }
        outAEnumClasskind(node);
    }

    public void inAExternClasskind(AExternClasskind node)
    {
        defaultIn(node);
    }

    public void outAExternClasskind(AExternClasskind node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternClasskind(AExternClasskind node)
    {
        inAExternClasskind(node);
        if(node.getKwextern() != null)
        {
            node.getKwextern().apply(this);
        }
        outAExternClasskind(node);
    }

    public void inAFormaldef(AFormaldef node)
    {
        defaultIn(node);
    }

    public void outAFormaldef(AFormaldef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormaldef(AFormaldef node)
    {
        inAFormaldef(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFormaldef(node);
    }

    public void inASuperclass(ASuperclass node)
    {
        defaultIn(node);
    }

    public void outASuperclass(ASuperclass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperclass(ASuperclass node)
    {
        inASuperclass(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwsuper() != null)
        {
            node.getKwsuper().apply(this);
        }
        if(node.getKwspecial() != null)
        {
            node.getKwspecial().apply(this);
        }
        outASuperclass(node);
    }

    public void inAAttrPropdef(AAttrPropdef node)
    {
        defaultIn(node);
    }

    public void outAAttrPropdef(AAttrPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrPropdef(AAttrPropdef node)
    {
        inAAttrPropdef(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwvar() != null)
        {
            node.getKwvar().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getWritable() != null)
        {
            node.getWritable().apply(this);
        }
        if(node.getReadable() != null)
        {
            node.getReadable().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAAttrPropdef(node);
    }

    public void inAMethPropdef(AMethPropdef node)
    {
        defaultIn(node);
    }

    public void outAMethPropdef(AMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethPropdef(AMethPropdef node)
    {
        inAMethPropdef(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAMethPropdef(node);
    }

    public void inADeferredMethPropdef(ADeferredMethPropdef node)
    {
        defaultIn(node);
    }

    public void outADeferredMethPropdef(ADeferredMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeferredMethPropdef(ADeferredMethPropdef node)
    {
        inADeferredMethPropdef(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwmeth() != null)
        {
            node.getKwmeth().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outADeferredMethPropdef(node);
    }

    public void inAInternMethPropdef(AInternMethPropdef node)
    {
        defaultIn(node);
    }

    public void outAInternMethPropdef(AInternMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternMethPropdef(AInternMethPropdef node)
    {
        inAInternMethPropdef(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwmeth() != null)
        {
            node.getKwmeth().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAInternMethPropdef(node);
    }

    public void inAExternMethPropdef(AExternMethPropdef node)
    {
        defaultIn(node);
    }

    public void outAExternMethPropdef(AExternMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternMethPropdef(AExternMethPropdef node)
    {
        inAExternMethPropdef(node);
        if(node.getExternCalls() != null)
        {
            node.getExternCalls().apply(this);
        }
        if(node.getExtern() != null)
        {
            node.getExtern().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwmeth() != null)
        {
            node.getKwmeth().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAExternMethPropdef(node);
    }

    public void inAConcreteMethPropdef(AConcreteMethPropdef node)
    {
        defaultIn(node);
    }

    public void outAConcreteMethPropdef(AConcreteMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcreteMethPropdef(AConcreteMethPropdef node)
    {
        inAConcreteMethPropdef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwmeth() != null)
        {
            node.getKwmeth().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAConcreteMethPropdef(node);
    }

    public void inAConcreteInitPropdef(AConcreteInitPropdef node)
    {
        defaultIn(node);
    }

    public void outAConcreteInitPropdef(AConcreteInitPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcreteInitPropdef(AConcreteInitPropdef node)
    {
        inAConcreteInitPropdef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwinit() != null)
        {
            node.getKwinit().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAConcreteInitPropdef(node);
    }

    public void inAExternInitPropdef(AExternInitPropdef node)
    {
        defaultIn(node);
    }

    public void outAExternInitPropdef(AExternInitPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternInitPropdef(AExternInitPropdef node)
    {
        inAExternInitPropdef(node);
        if(node.getExternCalls() != null)
        {
            node.getExternCalls().apply(this);
        }
        if(node.getExtern() != null)
        {
            node.getExtern().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getKwnew() != null)
        {
            node.getKwnew().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outAExternInitPropdef(node);
    }

    public void inAMainMethPropdef(AMainMethPropdef node)
    {
        defaultIn(node);
    }

    public void outAMainMethPropdef(AMainMethPropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainMethPropdef(AMainMethPropdef node)
    {
        inAMainMethPropdef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        outAMainMethPropdef(node);
    }

    public void inATypePropdef(ATypePropdef node)
    {
        defaultIn(node);
    }

    public void outATypePropdef(ATypePropdef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypePropdef(ATypePropdef node)
    {
        inATypePropdef(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwtype() != null)
        {
            node.getKwtype().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        if(node.getDoc() != null)
        {
            node.getDoc().apply(this);
        }
        outATypePropdef(node);
    }

    public void inAReadAble(AReadAble node)
    {
        defaultIn(node);
    }

    public void outAReadAble(AReadAble node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadAble(AReadAble node)
    {
        inAReadAble(node);
        if(node.getKwreadable() != null)
        {
            node.getKwreadable().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        outAReadAble(node);
    }

    public void inAWriteAble(AWriteAble node)
    {
        defaultIn(node);
    }

    public void outAWriteAble(AWriteAble node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteAble(AWriteAble node)
    {
        inAWriteAble(node);
        if(node.getKwwritable() != null)
        {
            node.getKwwritable().apply(this);
        }
        if(node.getVisibility() != null)
        {
            node.getVisibility().apply(this);
        }
        if(node.getKwredef() != null)
        {
            node.getKwredef().apply(this);
        }
        outAWriteAble(node);
    }

    public void inAIdMethid(AIdMethid node)
    {
        defaultIn(node);
    }

    public void outAIdMethid(AIdMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdMethid(AIdMethid node)
    {
        inAIdMethid(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdMethid(node);
    }

    public void inAPlusMethid(APlusMethid node)
    {
        defaultIn(node);
    }

    public void outAPlusMethid(APlusMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusMethid(APlusMethid node)
    {
        inAPlusMethid(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusMethid(node);
    }

    public void inAMinusMethid(AMinusMethid node)
    {
        defaultIn(node);
    }

    public void outAMinusMethid(AMinusMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusMethid(AMinusMethid node)
    {
        inAMinusMethid(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusMethid(node);
    }

    public void inAStarMethid(AStarMethid node)
    {
        defaultIn(node);
    }

    public void outAStarMethid(AStarMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMethid(AStarMethid node)
    {
        inAStarMethid(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarMethid(node);
    }

    public void inASlashMethid(ASlashMethid node)
    {
        defaultIn(node);
    }

    public void outASlashMethid(ASlashMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashMethid(ASlashMethid node)
    {
        inASlashMethid(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outASlashMethid(node);
    }

    public void inAPercentMethid(APercentMethid node)
    {
        defaultIn(node);
    }

    public void outAPercentMethid(APercentMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentMethid(APercentMethid node)
    {
        inAPercentMethid(node);
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        outAPercentMethid(node);
    }

    public void inAEqMethid(AEqMethid node)
    {
        defaultIn(node);
    }

    public void outAEqMethid(AEqMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqMethid(AEqMethid node)
    {
        inAEqMethid(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqMethid(node);
    }

    public void inANeMethid(ANeMethid node)
    {
        defaultIn(node);
    }

    public void outANeMethid(ANeMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeMethid(ANeMethid node)
    {
        inANeMethid(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeMethid(node);
    }

    public void inALeMethid(ALeMethid node)
    {
        defaultIn(node);
    }

    public void outALeMethid(ALeMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeMethid(ALeMethid node)
    {
        inALeMethid(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeMethid(node);
    }

    public void inAGeMethid(AGeMethid node)
    {
        defaultIn(node);
    }

    public void outAGeMethid(AGeMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeMethid(AGeMethid node)
    {
        inAGeMethid(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeMethid(node);
    }

    public void inALtMethid(ALtMethid node)
    {
        defaultIn(node);
    }

    public void outALtMethid(ALtMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtMethid(ALtMethid node)
    {
        inALtMethid(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtMethid(node);
    }

    public void inAGtMethid(AGtMethid node)
    {
        defaultIn(node);
    }

    public void outAGtMethid(AGtMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtMethid(AGtMethid node)
    {
        inAGtMethid(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtMethid(node);
    }

    public void inALlMethid(ALlMethid node)
    {
        defaultIn(node);
    }

    public void outALlMethid(ALlMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALlMethid(ALlMethid node)
    {
        inALlMethid(node);
        if(node.getLl() != null)
        {
            node.getLl().apply(this);
        }
        outALlMethid(node);
    }

    public void inAGgMethid(AGgMethid node)
    {
        defaultIn(node);
    }

    public void outAGgMethid(AGgMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGgMethid(AGgMethid node)
    {
        inAGgMethid(node);
        if(node.getGg() != null)
        {
            node.getGg().apply(this);
        }
        outAGgMethid(node);
    }

    public void inABraMethid(ABraMethid node)
    {
        defaultIn(node);
    }

    public void outABraMethid(ABraMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraMethid(ABraMethid node)
    {
        inABraMethid(node);
        if(node.getCbra() != null)
        {
            node.getCbra().apply(this);
        }
        if(node.getObra() != null)
        {
            node.getObra().apply(this);
        }
        outABraMethid(node);
    }

    public void inAStarshipMethid(AStarshipMethid node)
    {
        defaultIn(node);
    }

    public void outAStarshipMethid(AStarshipMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarshipMethid(AStarshipMethid node)
    {
        inAStarshipMethid(node);
        if(node.getStarship() != null)
        {
            node.getStarship().apply(this);
        }
        outAStarshipMethid(node);
    }

    public void inAAssignMethid(AAssignMethid node)
    {
        defaultIn(node);
    }

    public void outAAssignMethid(AAssignMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignMethid(AAssignMethid node)
    {
        inAAssignMethid(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignMethid(node);
    }

    public void inABraassignMethid(ABraassignMethid node)
    {
        defaultIn(node);
    }

    public void outABraassignMethid(ABraassignMethid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraassignMethid(ABraassignMethid node)
    {
        inABraassignMethid(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getCbra() != null)
        {
            node.getCbra().apply(this);
        }
        if(node.getObra() != null)
        {
            node.getObra().apply(this);
        }
        outABraassignMethid(node);
    }

    public void inASignature(ASignature node)
    {
        defaultIn(node);
    }

    public void outASignature(ASignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignature(ASignature node)
    {
        inASignature(node);
        {
            List<PClosureDecl> copy = new ArrayList<PClosureDecl>(node.getClosureDecls());
            Collections.reverse(copy);
            for(PClosureDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PParam> copy = new ArrayList<PParam>(node.getParams());
            Collections.reverse(copy);
            for(PParam e : copy)
            {
                e.apply(this);
            }
        }
        outASignature(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getDotdotdot() != null)
        {
            node.getDotdotdot().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParam(node);
    }

    public void inAClosureDecl(AClosureDecl node)
    {
        defaultIn(node);
    }

    public void outAClosureDecl(AClosureDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureDecl(AClosureDecl node)
    {
        inAClosureDecl(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getBang() != null)
        {
            node.getBang().apply(this);
        }
        if(node.getKwbreak() != null)
        {
            node.getKwbreak().apply(this);
        }
        outAClosureDecl(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        {
            List<PType> copy = new ArrayList<PType>(node.getTypes());
            Collections.reverse(copy);
            for(PType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwnullable() != null)
        {
            node.getKwnullable().apply(this);
        }
        outAType(node);
    }

    public void inALabel(ALabel node)
    {
        defaultIn(node);
    }

    public void outALabel(ALabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        inALabel(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwlabel() != null)
        {
            node.getKwlabel().apply(this);
        }
        outALabel(node);
    }

    public void inABlockExpr(ABlockExpr node)
    {
        defaultIn(node);
    }

    public void outABlockExpr(ABlockExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExpr(ABlockExpr node)
    {
        inABlockExpr(node);
        if(node.getKwend() != null)
        {
            node.getKwend().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outABlockExpr(node);
    }

    public void inAVardeclExpr(AVardeclExpr node)
    {
        defaultIn(node);
    }

    public void outAVardeclExpr(AVardeclExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardeclExpr(AVardeclExpr node)
    {
        inAVardeclExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwvar() != null)
        {
            node.getKwvar().apply(this);
        }
        outAVardeclExpr(node);
    }

    public void inAReturnExpr(AReturnExpr node)
    {
        defaultIn(node);
    }

    public void outAReturnExpr(AReturnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExpr(AReturnExpr node)
    {
        inAReturnExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwreturn() != null)
        {
            node.getKwreturn().apply(this);
        }
        outAReturnExpr(node);
    }

    public void inABreakExpr(ABreakExpr node)
    {
        defaultIn(node);
    }

    public void outABreakExpr(ABreakExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakExpr(ABreakExpr node)
    {
        inABreakExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getKwbreak() != null)
        {
            node.getKwbreak().apply(this);
        }
        outABreakExpr(node);
    }

    public void inAAbortExpr(AAbortExpr node)
    {
        defaultIn(node);
    }

    public void outAAbortExpr(AAbortExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbortExpr(AAbortExpr node)
    {
        inAAbortExpr(node);
        if(node.getKwabort() != null)
        {
            node.getKwabort().apply(this);
        }
        outAAbortExpr(node);
    }

    public void inAContinueExpr(AContinueExpr node)
    {
        defaultIn(node);
    }

    public void outAContinueExpr(AContinueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueExpr(AContinueExpr node)
    {
        inAContinueExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getKwcontinue() != null)
        {
            node.getKwcontinue().apply(this);
        }
        outAContinueExpr(node);
    }

    public void inADoExpr(ADoExpr node)
    {
        defaultIn(node);
    }

    public void outADoExpr(ADoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoExpr(ADoExpr node)
    {
        inADoExpr(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwdo() != null)
        {
            node.getKwdo().apply(this);
        }
        outADoExpr(node);
    }

    public void inAIfExpr(AIfExpr node)
    {
        defaultIn(node);
    }

    public void outAIfExpr(AIfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExpr(AIfExpr node)
    {
        inAIfExpr(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwif() != null)
        {
            node.getKwif().apply(this);
        }
        outAIfExpr(node);
    }

    public void inAIfexprExpr(AIfexprExpr node)
    {
        defaultIn(node);
    }

    public void outAIfexprExpr(AIfexprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfexprExpr(AIfexprExpr node)
    {
        inAIfexprExpr(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getKwelse() != null)
        {
            node.getKwelse().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getKwthen() != null)
        {
            node.getKwthen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwif() != null)
        {
            node.getKwif().apply(this);
        }
        outAIfexprExpr(node);
    }

    public void inAWhileExpr(AWhileExpr node)
    {
        defaultIn(node);
    }

    public void outAWhileExpr(AWhileExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileExpr(AWhileExpr node)
    {
        inAWhileExpr(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwdo() != null)
        {
            node.getKwdo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwwhile() != null)
        {
            node.getKwwhile().apply(this);
        }
        outAWhileExpr(node);
    }

    public void inALoopExpr(ALoopExpr node)
    {
        defaultIn(node);
    }

    public void outALoopExpr(ALoopExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopExpr(ALoopExpr node)
    {
        inALoopExpr(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwloop() != null)
        {
            node.getKwloop().apply(this);
        }
        outALoopExpr(node);
    }

    public void inAForExpr(AForExpr node)
    {
        defaultIn(node);
    }

    public void outAForExpr(AForExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForExpr(AForExpr node)
    {
        inAForExpr(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwdo() != null)
        {
            node.getKwdo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getIds());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getKwfor() != null)
        {
            node.getKwfor().apply(this);
        }
        outAForExpr(node);
    }

    public void inAAssertExpr(AAssertExpr node)
    {
        defaultIn(node);
    }

    public void outAAssertExpr(AAssertExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertExpr(AAssertExpr node)
    {
        inAAssertExpr(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwassert() != null)
        {
            node.getKwassert().apply(this);
        }
        outAAssertExpr(node);
    }

    public void inAOnceExpr(AOnceExpr node)
    {
        defaultIn(node);
    }

    public void outAOnceExpr(AOnceExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnceExpr(AOnceExpr node)
    {
        inAOnceExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwonce() != null)
        {
            node.getKwonce().apply(this);
        }
        outAOnceExpr(node);
    }

    public void inASendExpr(ASendExpr node)
    {
        defaultIn(node);
    }

    public void outASendExpr(ASendExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASendExpr(ASendExpr node)
    {
        inASendExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASendExpr(node);
    }

    public void inABinopExpr(ABinopExpr node)
    {
        defaultIn(node);
    }

    public void outABinopExpr(ABinopExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinopExpr(ABinopExpr node)
    {
        inABinopExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABinopExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAndExpr(node);
    }

    public void inAOrElseExpr(AOrElseExpr node)
    {
        defaultIn(node);
    }

    public void outAOrElseExpr(AOrElseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrElseExpr(AOrElseExpr node)
    {
        inAOrElseExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOrElseExpr(node);
    }

    public void inANotExpr(ANotExpr node)
    {
        defaultIn(node);
    }

    public void outANotExpr(ANotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        inANotExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwnot() != null)
        {
            node.getKwnot().apply(this);
        }
        outANotExpr(node);
    }

    public void inAEqExpr(AEqExpr node)
    {
        defaultIn(node);
    }

    public void outAEqExpr(AEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpr(AEqExpr node)
    {
        inAEqExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAEqExpr(node);
    }

    public void inAEeExpr(AEeExpr node)
    {
        defaultIn(node);
    }

    public void outAEeExpr(AEeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEeExpr(AEeExpr node)
    {
        inAEeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAEeExpr(node);
    }

    public void inANeExpr(ANeExpr node)
    {
        defaultIn(node);
    }

    public void outANeExpr(ANeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeExpr(ANeExpr node)
    {
        inANeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANeExpr(node);
    }

    public void inALtExpr(ALtExpr node)
    {
        defaultIn(node);
    }

    public void outALtExpr(ALtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpr(ALtExpr node)
    {
        inALtExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALtExpr(node);
    }

    public void inALeExpr(ALeExpr node)
    {
        defaultIn(node);
    }

    public void outALeExpr(ALeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeExpr(ALeExpr node)
    {
        inALeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALeExpr(node);
    }

    public void inALlExpr(ALlExpr node)
    {
        defaultIn(node);
    }

    public void outALlExpr(ALlExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALlExpr(ALlExpr node)
    {
        inALlExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALlExpr(node);
    }

    public void inAGtExpr(AGtExpr node)
    {
        defaultIn(node);
    }

    public void outAGtExpr(AGtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpr(AGtExpr node)
    {
        inAGtExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAGtExpr(node);
    }

    public void inAGeExpr(AGeExpr node)
    {
        defaultIn(node);
    }

    public void outAGeExpr(AGeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeExpr(AGeExpr node)
    {
        inAGeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAGeExpr(node);
    }

    public void inAGgExpr(AGgExpr node)
    {
        defaultIn(node);
    }

    public void outAGgExpr(AGgExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGgExpr(AGgExpr node)
    {
        inAGgExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAGgExpr(node);
    }

    public void inAIsaExpr(AIsaExpr node)
    {
        defaultIn(node);
    }

    public void outAIsaExpr(AIsaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsaExpr(AIsaExpr node)
    {
        inAIsaExpr(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIsaExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAStarshipExpr(AStarshipExpr node)
    {
        defaultIn(node);
    }

    public void outAStarshipExpr(AStarshipExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarshipExpr(AStarshipExpr node)
    {
        inAStarshipExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAStarshipExpr(node);
    }

    public void inAStarExpr(AStarExpr node)
    {
        defaultIn(node);
    }

    public void outAStarExpr(AStarExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarExpr(AStarExpr node)
    {
        inAStarExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAStarExpr(node);
    }

    public void inASlashExpr(ASlashExpr node)
    {
        defaultIn(node);
    }

    public void outASlashExpr(ASlashExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashExpr(ASlashExpr node)
    {
        inASlashExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASlashExpr(node);
    }

    public void inAPercentExpr(APercentExpr node)
    {
        defaultIn(node);
    }

    public void outAPercentExpr(APercentExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentExpr(APercentExpr node)
    {
        inAPercentExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPercentExpr(node);
    }

    public void inAUminusExpr(AUminusExpr node)
    {
        defaultIn(node);
    }

    public void outAUminusExpr(AUminusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUminusExpr(AUminusExpr node)
    {
        inAUminusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAUminusExpr(node);
    }

    public void inANewExpr(ANewExpr node)
    {
        defaultIn(node);
    }

    public void outANewExpr(ANewExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpr(ANewExpr node)
    {
        inANewExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwnew() != null)
        {
            node.getKwnew().apply(this);
        }
        outANewExpr(node);
    }

    public void inAAttrExpr(AAttrExpr node)
    {
        defaultIn(node);
    }

    public void outAAttrExpr(AAttrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrExpr(AAttrExpr node)
    {
        inAAttrExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAttrExpr(node);
    }

    public void inAAttrAssignExpr(AAttrAssignExpr node)
    {
        defaultIn(node);
    }

    public void outAAttrAssignExpr(AAttrAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrAssignExpr(AAttrAssignExpr node)
    {
        inAAttrAssignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAttrAssignExpr(node);
    }

    public void inAAttrReassignExpr(AAttrReassignExpr node)
    {
        defaultIn(node);
    }

    public void outAAttrReassignExpr(AAttrReassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrReassignExpr(AAttrReassignExpr node)
    {
        inAAttrReassignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAttrReassignExpr(node);
    }

    public void inACallExpr(ACallExpr node)
    {
        defaultIn(node);
    }

    public void outACallExpr(ACallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpr(ACallExpr node)
    {
        inACallExpr(node);
        {
            List<PClosureDef> copy = new ArrayList<PClosureDef>(node.getClosureDefs());
            Collections.reverse(copy);
            for(PClosureDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACallExpr(node);
    }

    public void inACallAssignExpr(ACallAssignExpr node)
    {
        defaultIn(node);
    }

    public void outACallAssignExpr(ACallAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallAssignExpr(ACallAssignExpr node)
    {
        inACallAssignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACallAssignExpr(node);
    }

    public void inACallReassignExpr(ACallReassignExpr node)
    {
        defaultIn(node);
    }

    public void outACallReassignExpr(ACallReassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallReassignExpr(ACallReassignExpr node)
    {
        inACallReassignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACallReassignExpr(node);
    }

    public void inASuperExpr(ASuperExpr node)
    {
        defaultIn(node);
    }

    public void outASuperExpr(ASuperExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperExpr(ASuperExpr node)
    {
        inASuperExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getKwsuper() != null)
        {
            node.getKwsuper().apply(this);
        }
        if(node.getQualified() != null)
        {
            node.getQualified().apply(this);
        }
        outASuperExpr(node);
    }

    public void inAInitExpr(AInitExpr node)
    {
        defaultIn(node);
    }

    public void outAInitExpr(AInitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitExpr(AInitExpr node)
    {
        inAInitExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getKwinit() != null)
        {
            node.getKwinit().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInitExpr(node);
    }

    public void inABraExpr(ABraExpr node)
    {
        defaultIn(node);
    }

    public void outABraExpr(ABraExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraExpr(ABraExpr node)
    {
        inABraExpr(node);
        {
            List<PClosureDef> copy = new ArrayList<PClosureDef>(node.getClosureDefs());
            Collections.reverse(copy);
            for(PClosureDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABraExpr(node);
    }

    public void inABraAssignExpr(ABraAssignExpr node)
    {
        defaultIn(node);
    }

    public void outABraAssignExpr(ABraAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraAssignExpr(ABraAssignExpr node)
    {
        inABraAssignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABraAssignExpr(node);
    }

    public void inABraReassignExpr(ABraReassignExpr node)
    {
        defaultIn(node);
    }

    public void outABraReassignExpr(ABraReassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraReassignExpr(ABraReassignExpr node)
    {
        inABraReassignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABraReassignExpr(node);
    }

    public void inAClosureCallExpr(AClosureCallExpr node)
    {
        defaultIn(node);
    }

    public void outAClosureCallExpr(AClosureCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureCallExpr(AClosureCallExpr node)
    {
        inAClosureCallExpr(node);
        {
            List<PClosureDef> copy = new ArrayList<PClosureDef>(node.getClosureDefs());
            Collections.reverse(copy);
            for(PClosureDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAClosureCallExpr(node);
    }

    public void inAVarExpr(AVarExpr node)
    {
        defaultIn(node);
    }

    public void outAVarExpr(AVarExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpr(AVarExpr node)
    {
        inAVarExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarExpr(node);
    }

    public void inAVarAssignExpr(AVarAssignExpr node)
    {
        defaultIn(node);
    }

    public void outAVarAssignExpr(AVarAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssignExpr(AVarAssignExpr node)
    {
        inAVarAssignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarAssignExpr(node);
    }

    public void inAVarReassignExpr(AVarReassignExpr node)
    {
        defaultIn(node);
    }

    public void outAVarReassignExpr(AVarReassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarReassignExpr(AVarReassignExpr node)
    {
        inAVarReassignExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarReassignExpr(node);
    }

    public void inARangeExpr(ARangeExpr node)
    {
        defaultIn(node);
    }

    public void outARangeExpr(ARangeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeExpr(ARangeExpr node)
    {
        inARangeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outARangeExpr(node);
    }

    public void inACrangeExpr(ACrangeExpr node)
    {
        defaultIn(node);
    }

    public void outACrangeExpr(ACrangeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACrangeExpr(ACrangeExpr node)
    {
        inACrangeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACrangeExpr(node);
    }

    public void inAOrangeExpr(AOrangeExpr node)
    {
        defaultIn(node);
    }

    public void outAOrangeExpr(AOrangeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrangeExpr(AOrangeExpr node)
    {
        inAOrangeExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOrangeExpr(node);
    }

    public void inAArrayExpr(AArrayExpr node)
    {
        defaultIn(node);
    }

    public void outAArrayExpr(AArrayExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpr(AArrayExpr node)
    {
        inAArrayExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExprs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayExpr(node);
    }

    public void inASelfExpr(ASelfExpr node)
    {
        defaultIn(node);
    }

    public void outASelfExpr(ASelfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfExpr(ASelfExpr node)
    {
        inASelfExpr(node);
        if(node.getKwself() != null)
        {
            node.getKwself().apply(this);
        }
        outASelfExpr(node);
    }

    public void inAImplicitSelfExpr(AImplicitSelfExpr node)
    {
        defaultIn(node);
    }

    public void outAImplicitSelfExpr(AImplicitSelfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImplicitSelfExpr(AImplicitSelfExpr node)
    {
        inAImplicitSelfExpr(node);
        outAImplicitSelfExpr(node);
    }

    public void inATrueExpr(ATrueExpr node)
    {
        defaultIn(node);
    }

    public void outATrueExpr(ATrueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        inATrueExpr(node);
        if(node.getKwtrue() != null)
        {
            node.getKwtrue().apply(this);
        }
        outATrueExpr(node);
    }

    public void inAFalseExpr(AFalseExpr node)
    {
        defaultIn(node);
    }

    public void outAFalseExpr(AFalseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        inAFalseExpr(node);
        if(node.getKwfalse() != null)
        {
            node.getKwfalse().apply(this);
        }
        outAFalseExpr(node);
    }

    public void inANullExpr(ANullExpr node)
    {
        defaultIn(node);
    }

    public void outANullExpr(ANullExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpr(ANullExpr node)
    {
        inANullExpr(node);
        if(node.getKwnull() != null)
        {
            node.getKwnull().apply(this);
        }
        outANullExpr(node);
    }

    public void inAIntExpr(AIntExpr node)
    {
        defaultIn(node);
    }

    public void outAIntExpr(AIntExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpr(AIntExpr node)
    {
        inAIntExpr(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAIntExpr(node);
    }

    public void inAFloatExpr(AFloatExpr node)
    {
        defaultIn(node);
    }

    public void outAFloatExpr(AFloatExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExpr(AFloatExpr node)
    {
        inAFloatExpr(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatExpr(node);
    }

    public void inACharExpr(ACharExpr node)
    {
        defaultIn(node);
    }

    public void outACharExpr(ACharExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharExpr(ACharExpr node)
    {
        inACharExpr(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharExpr(node);
    }

    public void inAStringExpr(AStringExpr node)
    {
        defaultIn(node);
    }

    public void outAStringExpr(AStringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpr(AStringExpr node)
    {
        inAStringExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringExpr(node);
    }

    public void inAStartStringExpr(AStartStringExpr node)
    {
        defaultIn(node);
    }

    public void outAStartStringExpr(AStartStringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStringExpr(AStartStringExpr node)
    {
        inAStartStringExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStartStringExpr(node);
    }

    public void inAMidStringExpr(AMidStringExpr node)
    {
        defaultIn(node);
    }

    public void outAMidStringExpr(AMidStringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidStringExpr(AMidStringExpr node)
    {
        inAMidStringExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAMidStringExpr(node);
    }

    public void inAEndStringExpr(AEndStringExpr node)
    {
        defaultIn(node);
    }

    public void outAEndStringExpr(AEndStringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndStringExpr(AEndStringExpr node)
    {
        inAEndStringExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAEndStringExpr(node);
    }

    public void inASuperstringExpr(ASuperstringExpr node)
    {
        defaultIn(node);
    }

    public void outASuperstringExpr(ASuperstringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperstringExpr(ASuperstringExpr node)
    {
        inASuperstringExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExprs());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outASuperstringExpr(node);
    }

    public void inAParExpr(AParExpr node)
    {
        defaultIn(node);
    }

    public void outAParExpr(AParExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpr(AParExpr node)
    {
        inAParExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAParExpr(node);
    }

    public void inAAsCastExpr(AAsCastExpr node)
    {
        defaultIn(node);
    }

    public void outAAsCastExpr(AAsCastExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsCastExpr(AAsCastExpr node)
    {
        inAAsCastExpr(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwas() != null)
        {
            node.getKwas().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAsCastExpr(node);
    }

    public void inAAsNotnullExpr(AAsNotnullExpr node)
    {
        defaultIn(node);
    }

    public void outAAsNotnullExpr(AAsNotnullExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsNotnullExpr(AAsNotnullExpr node)
    {
        inAAsNotnullExpr(node);
        if(node.getKwnull() != null)
        {
            node.getKwnull().apply(this);
        }
        if(node.getKwnot() != null)
        {
            node.getKwnot().apply(this);
        }
        if(node.getKwas() != null)
        {
            node.getKwas().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAsNotnullExpr(node);
    }

    public void inAIssetAttrExpr(AIssetAttrExpr node)
    {
        defaultIn(node);
    }

    public void outAIssetAttrExpr(AIssetAttrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIssetAttrExpr(AIssetAttrExpr node)
    {
        inAIssetAttrExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwisset() != null)
        {
            node.getKwisset().apply(this);
        }
        outAIssetAttrExpr(node);
    }

    public void inAPlusAssignOp(APlusAssignOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignOp(APlusAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignOp(APlusAssignOp node)
    {
        inAPlusAssignOp(node);
        if(node.getPluseq() != null)
        {
            node.getPluseq().apply(this);
        }
        outAPlusAssignOp(node);
    }

    public void inAMinusAssignOp(AMinusAssignOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignOp(AMinusAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignOp(AMinusAssignOp node)
    {
        inAMinusAssignOp(node);
        if(node.getMinuseq() != null)
        {
            node.getMinuseq().apply(this);
        }
        outAMinusAssignOp(node);
    }

    public void inAClosureDef(AClosureDef node)
    {
        defaultIn(node);
    }

    public void outAClosureDef(AClosureDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureDef(AClosureDef node)
    {
        inAClosureDef(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwdo() != null)
        {
            node.getKwdo().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getIds());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getBang() != null)
        {
            node.getBang().apply(this);
        }
        outAClosureDef(node);
    }

    public void inASimpleClosureId(ASimpleClosureId node)
    {
        defaultIn(node);
    }

    public void outASimpleClosureId(ASimpleClosureId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleClosureId(ASimpleClosureId node)
    {
        inASimpleClosureId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASimpleClosureId(node);
    }

    public void inABreakClosureId(ABreakClosureId node)
    {
        defaultIn(node);
    }

    public void outABreakClosureId(ABreakClosureId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakClosureId(ABreakClosureId node)
    {
        inABreakClosureId(node);
        if(node.getKwbreak() != null)
        {
            node.getKwbreak().apply(this);
        }
        outABreakClosureId(node);
    }

    public void inAModuleName(AModuleName node)
    {
        defaultIn(node);
    }

    public void outAModuleName(AModuleName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleName(AModuleName node)
    {
        inAModuleName(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getPath());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getQuad() != null)
        {
            node.getQuad().apply(this);
        }
        outAModuleName(node);
    }

    public void inAExternCalls(AExternCalls node)
    {
        defaultIn(node);
    }

    public void outAExternCalls(AExternCalls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternCalls(AExternCalls node)
    {
        inAExternCalls(node);
        {
            List<PExternCall> copy = new ArrayList<PExternCall>(node.getExternCalls());
            Collections.reverse(copy);
            for(PExternCall e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getKwimport() != null)
        {
            node.getKwimport().apply(this);
        }
        outAExternCalls(node);
    }

    public void inAExternCall(AExternCall node)
    {
        defaultIn(node);
    }

    public void outAExternCall(AExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternCall(AExternCall node)
    {
        inAExternCall(node);
        outAExternCall(node);
    }

    public void inASuperExternCall(ASuperExternCall node)
    {
        defaultIn(node);
    }

    public void outASuperExternCall(ASuperExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperExternCall(ASuperExternCall node)
    {
        inASuperExternCall(node);
        if(node.getKwsuper() != null)
        {
            node.getKwsuper().apply(this);
        }
        outASuperExternCall(node);
    }

    public void inALocalPropExternCall(ALocalPropExternCall node)
    {
        defaultIn(node);
    }

    public void outALocalPropExternCall(ALocalPropExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalPropExternCall(ALocalPropExternCall node)
    {
        inALocalPropExternCall(node);
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        outALocalPropExternCall(node);
    }

    public void inAFullPropExternCall(AFullPropExternCall node)
    {
        defaultIn(node);
    }

    public void outAFullPropExternCall(AFullPropExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullPropExternCall(AFullPropExternCall node)
    {
        inAFullPropExternCall(node);
        if(node.getMethid() != null)
        {
            node.getMethid().apply(this);
        }
        if(node.getQuad() != null)
        {
            node.getQuad().apply(this);
        }
        if(node.getClassid() != null)
        {
            node.getClassid().apply(this);
        }
        outAFullPropExternCall(node);
    }

    public void inAInitPropExternCall(AInitPropExternCall node)
    {
        defaultIn(node);
    }

    public void outAInitPropExternCall(AInitPropExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitPropExternCall(AInitPropExternCall node)
    {
        inAInitPropExternCall(node);
        if(node.getClassid() != null)
        {
            node.getClassid().apply(this);
        }
        outAInitPropExternCall(node);
    }

    public void inACastAsExternCall(ACastAsExternCall node)
    {
        defaultIn(node);
    }

    public void outACastAsExternCall(ACastAsExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastAsExternCall(ACastAsExternCall node)
    {
        inACastAsExternCall(node);
        if(node.getToType() != null)
        {
            node.getToType().apply(this);
        }
        if(node.getKwas() != null)
        {
            node.getKwas().apply(this);
        }
        if(node.getFromType() != null)
        {
            node.getFromType().apply(this);
        }
        outACastAsExternCall(node);
    }

    public void inAAsNullableExternCall(AAsNullableExternCall node)
    {
        defaultIn(node);
    }

    public void outAAsNullableExternCall(AAsNullableExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsNullableExternCall(AAsNullableExternCall node)
    {
        inAAsNullableExternCall(node);
        if(node.getKwnullable() != null)
        {
            node.getKwnullable().apply(this);
        }
        if(node.getKwas() != null)
        {
            node.getKwas().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAAsNullableExternCall(node);
    }

    public void inAAsNotNullableExternCall(AAsNotNullableExternCall node)
    {
        defaultIn(node);
    }

    public void outAAsNotNullableExternCall(AAsNotNullableExternCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsNotNullableExternCall(AAsNotNullableExternCall node)
    {
        inAAsNotNullableExternCall(node);
        if(node.getKwnullable() != null)
        {
            node.getKwnullable().apply(this);
        }
        if(node.getKwnot() != null)
        {
            node.getKwnot().apply(this);
        }
        if(node.getKwas() != null)
        {
            node.getKwas().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAAsNotNullableExternCall(node);
    }

    public void inAQualified(AQualified node)
    {
        defaultIn(node);
    }

    public void outAQualified(AQualified node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQualified(AQualified node)
    {
        inAQualified(node);
        if(node.getClassid() != null)
        {
            node.getClassid().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAQualified(node);
    }

    public void inADoc(ADoc node)
    {
        defaultIn(node);
    }

    public void outADoc(ADoc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoc(ADoc node)
    {
        inADoc(node);
        {
            List<TComment> copy = new ArrayList<TComment>(node.getComment());
            Collections.reverse(copy);
            for(TComment e : copy)
            {
                e.apply(this);
            }
        }
        outADoc(node);
    }
}
