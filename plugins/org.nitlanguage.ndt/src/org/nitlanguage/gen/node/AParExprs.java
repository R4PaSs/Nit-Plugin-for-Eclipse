/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AParExprs extends PExprs
{
    private TOpar _opar_;
    private final LinkedList<PExpr> _exprs_ = new LinkedList<PExpr>();
    private TCpar _cpar_;

    public AParExprs()
    {
        // Constructor
    }

    public AParExprs(
        @SuppressWarnings("hiding") TOpar _opar_,
        @SuppressWarnings("hiding") List<?> _exprs_,
        @SuppressWarnings("hiding") TCpar _cpar_)
    {
        // Constructor
        setOpar(_opar_);

        setExprs(_exprs_);

        setCpar(_cpar_);

    }

    @Override
    public Object clone()
    {
        return new AParExprs(
            cloneNode(this._opar_),
            cloneList(this._exprs_),
            cloneNode(this._cpar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParExprs(this);
    }

    public TOpar getOpar()
    {
        return this._opar_;
    }

    public void setOpar(TOpar node)
    {
        if(this._opar_ != null)
        {
            this._opar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opar_ = node;
    }

    public LinkedList<PExpr> getExprs()
    {
        return this._exprs_;
    }

    public void setExprs(List<?> list)
    {
        for(PExpr e : this._exprs_)
        {
            e.parent(null);
        }
        this._exprs_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._exprs_.add(e);
        }
    }

    public TCpar getCpar()
    {
        return this._cpar_;
    }

    public void setCpar(TCpar node)
    {
        if(this._cpar_ != null)
        {
            this._cpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cpar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opar_)
            + toString(this._exprs_)
            + toString(this._cpar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opar_ == child)
        {
            this._opar_ = null;
            return;
        }

        if(this._exprs_.remove(child))
        {
            return;
        }

        if(this._cpar_ == child)
        {
            this._cpar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opar_ == oldChild)
        {
            setOpar((TOpar) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._exprs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._cpar_ == oldChild)
        {
            setCpar((TCpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
