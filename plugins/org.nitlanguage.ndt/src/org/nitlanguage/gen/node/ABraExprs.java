/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class ABraExprs extends PExprs
{
    private TObra _obra_;
    private final LinkedList<PExpr> _exprs_ = new LinkedList<PExpr>();
    private TCbra _cbra_;

    public ABraExprs()
    {
        // Constructor
    }

    public ABraExprs(
        @SuppressWarnings("hiding") TObra _obra_,
        @SuppressWarnings("hiding") List<?> _exprs_,
        @SuppressWarnings("hiding") TCbra _cbra_)
    {
        // Constructor
        setObra(_obra_);

        setExprs(_exprs_);

        setCbra(_cbra_);

    }

    @Override
    public Object clone()
    {
        return new ABraExprs(
            cloneNode(this._obra_),
            cloneList(this._exprs_),
            cloneNode(this._cbra_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABraExprs(this);
    }

    public TObra getObra()
    {
        return this._obra_;
    }

    public void setObra(TObra node)
    {
        if(this._obra_ != null)
        {
            this._obra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._obra_ = node;
    }

    public LinkedList<PExpr> getExprs()
    {
        return this._exprs_;
    }

    public void setExprs(List<?> list)
    {
        for(PExpr e : this._exprs_)
        {
            e.parent(null);
        }
        this._exprs_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._exprs_.add(e);
        }
    }

    public TCbra getCbra()
    {
        return this._cbra_;
    }

    public void setCbra(TCbra node)
    {
        if(this._cbra_ != null)
        {
            this._cbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cbra_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._obra_)
            + toString(this._exprs_)
            + toString(this._cbra_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._obra_ == child)
        {
            this._obra_ = null;
            return;
        }

        if(this._exprs_.remove(child))
        {
            return;
        }

        if(this._cbra_ == child)
        {
            this._cbra_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._obra_ == oldChild)
        {
            setObra((TObra) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._exprs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._cbra_ == oldChild)
        {
            setCbra((TCbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
