/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.*;

import org.nitlanguage.gen.analysis.*;

@SuppressWarnings("nls")
public final class AInitExpr extends PExpr
{
    private PExpr _expr_;
    private TKwinit _kwinit_;
    private final LinkedList<PExpr> _args_ = new LinkedList<PExpr>();

    public AInitExpr()
    {
        // Constructor
    }

    public AInitExpr(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TKwinit _kwinit_,
        @SuppressWarnings("hiding") List<PExpr> _args_)
    {
        // Constructor
        setExpr(_expr_);

        setKwinit(_kwinit_);

        setArgs(_args_);

    }

    @Override
    public Object clone()
    {
        return new AInitExpr(
            cloneNode(this._expr_),
            cloneNode(this._kwinit_),
            cloneList(this._args_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInitExpr(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TKwinit getKwinit()
    {
        return this._kwinit_;
    }

    public void setKwinit(TKwinit node)
    {
        if(this._kwinit_ != null)
        {
            this._kwinit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwinit_ = node;
    }

    public LinkedList<PExpr> getArgs()
    {
        return this._args_;
    }

    public void setArgs(List<PExpr> list)
    {
        this._args_.clear();
        this._args_.addAll(list);
        for(PExpr e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._kwinit_)
            + toString(this._args_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._kwinit_ == child)
        {
            this._kwinit_ = null;
            return;
        }

        if(this._args_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._kwinit_ == oldChild)
        {
            setKwinit((TKwinit) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
