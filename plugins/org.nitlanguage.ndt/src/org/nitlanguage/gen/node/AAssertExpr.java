/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AAssertExpr extends PExpr
{
    private TKwassert _kwassert_;
    private TId _id_;
    private PExpr _expr_;
    private PExpr _else_;

    public AAssertExpr()
    {
        // Constructor
    }

    public AAssertExpr(
        @SuppressWarnings("hiding") TKwassert _kwassert_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PExpr _else_)
    {
        // Constructor
        setKwassert(_kwassert_);

        setId(_id_);

        setExpr(_expr_);

        setElse(_else_);

    }

    @Override
    public Object clone()
    {
        return new AAssertExpr(
            cloneNode(this._kwassert_),
            cloneNode(this._id_),
            cloneNode(this._expr_),
            cloneNode(this._else_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssertExpr(this);
    }

    public TKwassert getKwassert()
    {
        return this._kwassert_;
    }

    public void setKwassert(TKwassert node)
    {
        if(this._kwassert_ != null)
        {
            this._kwassert_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwassert_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PExpr getElse()
    {
        return this._else_;
    }

    public void setElse(PExpr node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwassert_)
            + toString(this._id_)
            + toString(this._expr_)
            + toString(this._else_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwassert_ == child)
        {
            this._kwassert_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwassert_ == oldChild)
        {
            setKwassert((TKwassert) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
