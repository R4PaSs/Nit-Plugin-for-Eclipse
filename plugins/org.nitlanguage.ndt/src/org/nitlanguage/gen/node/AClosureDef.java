/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AClosureDef extends PClosureDef
{
    private TBang _bang_;
    private PClosureId _id_;
    private final LinkedList<TId> _ids_ = new LinkedList<TId>();
    private TKwdo _kwdo_;
    private PExpr _expr_;
    private PLabel _label_;

    public AClosureDef()
    {
        // Constructor
    }

    public AClosureDef(
        @SuppressWarnings("hiding") TBang _bang_,
        @SuppressWarnings("hiding") PClosureId _id_,
        @SuppressWarnings("hiding") List<?> _ids_,
        @SuppressWarnings("hiding") TKwdo _kwdo_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PLabel _label_)
    {
        // Constructor
        setBang(_bang_);

        setId(_id_);

        setIds(_ids_);

        setKwdo(_kwdo_);

        setExpr(_expr_);

        setLabel(_label_);

    }

    @Override
    public Object clone()
    {
        return new AClosureDef(
            cloneNode(this._bang_),
            cloneNode(this._id_),
            cloneList(this._ids_),
            cloneNode(this._kwdo_),
            cloneNode(this._expr_),
            cloneNode(this._label_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClosureDef(this);
    }

    public TBang getBang()
    {
        return this._bang_;
    }

    public void setBang(TBang node)
    {
        if(this._bang_ != null)
        {
            this._bang_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bang_ = node;
    }

    public PClosureId getId()
    {
        return this._id_;
    }

    public void setId(PClosureId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<TId> getIds()
    {
        return this._ids_;
    }

    public void setIds(List<?> list)
    {
        for(TId e : this._ids_)
        {
            e.parent(null);
        }
        this._ids_.clear();

        for(Object obj_e : list)
        {
            TId e = (TId) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ids_.add(e);
        }
    }

    public TKwdo getKwdo()
    {
        return this._kwdo_;
    }

    public void setKwdo(TKwdo node)
    {
        if(this._kwdo_ != null)
        {
            this._kwdo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwdo_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PLabel getLabel()
    {
        return this._label_;
    }

    public void setLabel(PLabel node)
    {
        if(this._label_ != null)
        {
            this._label_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._label_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bang_)
            + toString(this._id_)
            + toString(this._ids_)
            + toString(this._kwdo_)
            + toString(this._expr_)
            + toString(this._label_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bang_ == child)
        {
            this._bang_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._ids_.remove(child))
        {
            return;
        }

        if(this._kwdo_ == child)
        {
            this._kwdo_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._label_ == child)
        {
            this._label_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bang_ == oldChild)
        {
            setBang((TBang) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((PClosureId) newChild);
            return;
        }

        for(ListIterator<TId> i = this._ids_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._kwdo_ == oldChild)
        {
            setKwdo((TKwdo) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._label_ == oldChild)
        {
            setLabel((PLabel) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
