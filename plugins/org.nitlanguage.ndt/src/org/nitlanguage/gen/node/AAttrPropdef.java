/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;


import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AAttrPropdef extends PPropdef
{
    private PDoc _doc_;
    private PAble _readable_;
    private PAble _writable_;
    private TKwredef _kwredef_;
    private PVisibility _visibility_;
    private TKwvar _kwvar_;
    private TAttrid _id_;
    private TId _id2_;
    private PType _type_;
    private PExpr _expr_;

    public AAttrPropdef()
    {
        // Constructor
    }

    public AAttrPropdef(
        @SuppressWarnings("hiding") PDoc _doc_,
        @SuppressWarnings("hiding") PAble _readable_,
        @SuppressWarnings("hiding") PAble _writable_,
        @SuppressWarnings("hiding") TKwredef _kwredef_,
        @SuppressWarnings("hiding") PVisibility _visibility_,
        @SuppressWarnings("hiding") TKwvar _kwvar_,
        @SuppressWarnings("hiding") TAttrid _id_,
        @SuppressWarnings("hiding") TId _id2_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setDoc(_doc_);

        setReadable(_readable_);

        setWritable(_writable_);

        setKwredef(_kwredef_);

        setVisibility(_visibility_);

        setKwvar(_kwvar_);

        setId(_id_);

        setId2(_id2_);

        setType(_type_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AAttrPropdef(
            cloneNode(this._doc_),
            cloneNode(this._readable_),
            cloneNode(this._writable_),
            cloneNode(this._kwredef_),
            cloneNode(this._visibility_),
            cloneNode(this._kwvar_),
            cloneNode(this._id_),
            cloneNode(this._id2_),
            cloneNode(this._type_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAttrPropdef(this);
    }

    public PDoc getDoc()
    {
        return this._doc_;
    }

    public void setDoc(PDoc node)
    {
        if(this._doc_ != null)
        {
            this._doc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doc_ = node;
    }

    public PAble getReadable()
    {
        return this._readable_;
    }

    public void setReadable(PAble node)
    {
        if(this._readable_ != null)
        {
            this._readable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._readable_ = node;
    }

    public PAble getWritable()
    {
        return this._writable_;
    }

    public void setWritable(PAble node)
    {
        if(this._writable_ != null)
        {
            this._writable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._writable_ = node;
    }

    public TKwredef getKwredef()
    {
        return this._kwredef_;
    }

    public void setKwredef(TKwredef node)
    {
        if(this._kwredef_ != null)
        {
            this._kwredef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwredef_ = node;
    }

    public PVisibility getVisibility()
    {
        return this._visibility_;
    }

    public void setVisibility(PVisibility node)
    {
        if(this._visibility_ != null)
        {
            this._visibility_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._visibility_ = node;
    }

    public TKwvar getKwvar()
    {
        return this._kwvar_;
    }

    public void setKwvar(TKwvar node)
    {
        if(this._kwvar_ != null)
        {
            this._kwvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwvar_ = node;
    }

    public TAttrid getId()
    {
        return this._id_;
    }

    public void setId(TAttrid node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TId getId2()
    {
        return this._id2_;
    }

    public void setId2(TId node)
    {
        if(this._id2_ != null)
        {
            this._id2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id2_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._doc_)
            + toString(this._readable_)
            + toString(this._writable_)
            + toString(this._kwredef_)
            + toString(this._visibility_)
            + toString(this._kwvar_)
            + toString(this._id_)
            + toString(this._id2_)
            + toString(this._type_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._doc_ == child)
        {
            this._doc_ = null;
            return;
        }

        if(this._readable_ == child)
        {
            this._readable_ = null;
            return;
        }

        if(this._writable_ == child)
        {
            this._writable_ = null;
            return;
        }

        if(this._kwredef_ == child)
        {
            this._kwredef_ = null;
            return;
        }

        if(this._visibility_ == child)
        {
            this._visibility_ = null;
            return;
        }

        if(this._kwvar_ == child)
        {
            this._kwvar_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._id2_ == child)
        {
            this._id2_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._doc_ == oldChild)
        {
            setDoc((PDoc) newChild);
            return;
        }

        if(this._readable_ == oldChild)
        {
            setReadable((PAble) newChild);
            return;
        }

        if(this._writable_ == oldChild)
        {
            setWritable((PAble) newChild);
            return;
        }

        if(this._kwredef_ == oldChild)
        {
            setKwredef((TKwredef) newChild);
            return;
        }

        if(this._visibility_ == oldChild)
        {
            setVisibility((PVisibility) newChild);
            return;
        }

        if(this._kwvar_ == oldChild)
        {
            setKwvar((TKwvar) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TAttrid) newChild);
            return;
        }

        if(this._id2_ == oldChild)
        {
            setId2((TId) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
