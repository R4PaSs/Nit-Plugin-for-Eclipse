/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.*;

import org.nitlanguage.gen.analysis.*;

@SuppressWarnings("nls")
public final class AExternCalls extends PExternCalls
{
    private TKwimport _kwimport_;
    private final LinkedList<PExternCall> _externCalls_ = new LinkedList<PExternCall>();

    public AExternCalls()
    {
        // Constructor
    }

    public AExternCalls(
        @SuppressWarnings("hiding") TKwimport _kwimport_,
        @SuppressWarnings("hiding") List<PExternCall> _externCalls_)
    {
        // Constructor
        setKwimport(_kwimport_);

        setExternCalls(_externCalls_);

    }

    @Override
    public Object clone()
    {
        return new AExternCalls(
            cloneNode(this._kwimport_),
            cloneList(this._externCalls_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExternCalls(this);
    }

    public TKwimport getKwimport()
    {
        return this._kwimport_;
    }

    public void setKwimport(TKwimport node)
    {
        if(this._kwimport_ != null)
        {
            this._kwimport_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwimport_ = node;
    }

    public LinkedList<PExternCall> getExternCalls()
    {
        return this._externCalls_;
    }

    public void setExternCalls(List<PExternCall> list)
    {
        this._externCalls_.clear();
        this._externCalls_.addAll(list);
        for(PExternCall e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwimport_)
            + toString(this._externCalls_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwimport_ == child)
        {
            this._kwimport_ = null;
            return;
        }

        if(this._externCalls_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwimport_ == oldChild)
        {
            setKwimport((TKwimport) newChild);
            return;
        }

        for(ListIterator<PExternCall> i = this._externCalls_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExternCall) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
