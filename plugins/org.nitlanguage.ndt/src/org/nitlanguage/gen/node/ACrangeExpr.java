/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class ACrangeExpr extends PExpr
{
    private TObra _obra_;
    private PExpr _expr_;
    private PExpr _expr2_;
    private TCbra _cbra_;

    public ACrangeExpr()
    {
        // Constructor
    }

    public ACrangeExpr(
        @SuppressWarnings("hiding") TObra _obra_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PExpr _expr2_,
        @SuppressWarnings("hiding") TCbra _cbra_)
    {
        // Constructor
        setObra(_obra_);

        setExpr(_expr_);

        setExpr2(_expr2_);

        setCbra(_cbra_);

    }

    @Override
    public Object clone()
    {
        return new ACrangeExpr(
            cloneNode(this._obra_),
            cloneNode(this._expr_),
            cloneNode(this._expr2_),
            cloneNode(this._cbra_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACrangeExpr(this);
    }

    public TObra getObra()
    {
        return this._obra_;
    }

    public void setObra(TObra node)
    {
        if(this._obra_ != null)
        {
            this._obra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._obra_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PExpr getExpr2()
    {
        return this._expr2_;
    }

    public void setExpr2(PExpr node)
    {
        if(this._expr2_ != null)
        {
            this._expr2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr2_ = node;
    }

    public TCbra getCbra()
    {
        return this._cbra_;
    }

    public void setCbra(TCbra node)
    {
        if(this._cbra_ != null)
        {
            this._cbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cbra_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._obra_)
            + toString(this._expr_)
            + toString(this._expr2_)
            + toString(this._cbra_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._obra_ == child)
        {
            this._obra_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._expr2_ == child)
        {
            this._expr2_ = null;
            return;
        }

        if(this._cbra_ == child)
        {
            this._cbra_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._obra_ == oldChild)
        {
            setObra((TObra) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._expr2_ == oldChild)
        {
            setExpr2((PExpr) newChild);
            return;
        }

        if(this._cbra_ == oldChild)
        {
            setCbra((TCbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
