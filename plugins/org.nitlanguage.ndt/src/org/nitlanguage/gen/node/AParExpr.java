/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AParExpr extends PExpr
{
    private TOpar _opar_;
    private PExpr _expr_;
    private TCpar _cpar_;

    public AParExpr()
    {
        // Constructor
    }

    public AParExpr(
        @SuppressWarnings("hiding") TOpar _opar_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TCpar _cpar_)
    {
        // Constructor
        setOpar(_opar_);

        setExpr(_expr_);

        setCpar(_cpar_);

    }

    @Override
    public Object clone()
    {
        return new AParExpr(
            cloneNode(this._opar_),
            cloneNode(this._expr_),
            cloneNode(this._cpar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParExpr(this);
    }

    public TOpar getOpar()
    {
        return this._opar_;
    }

    public void setOpar(TOpar node)
    {
        if(this._opar_ != null)
        {
            this._opar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opar_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TCpar getCpar()
    {
        return this._cpar_;
    }

    public void setCpar(TCpar node)
    {
        if(this._cpar_ != null)
        {
            this._cpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cpar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opar_)
            + toString(this._expr_)
            + toString(this._cpar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opar_ == child)
        {
            this._opar_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._cpar_ == child)
        {
            this._cpar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opar_ == oldChild)
        {
            setOpar((TOpar) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._cpar_ == oldChild)
        {
            setCpar((TCpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
