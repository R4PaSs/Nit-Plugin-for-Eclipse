/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.nitlanguage.gen.analysis.Analysis;

@SuppressWarnings("nls")
public final class AQualified extends PQualified
{
    private final LinkedList<TId> _id_ = new LinkedList<TId>();
    private TClassid _classid_;

    public AQualified()
    {
        // Constructor
    }

    public AQualified(
        @SuppressWarnings("hiding") List<?> _id_,
        @SuppressWarnings("hiding") TClassid _classid_)
    {
        // Constructor
        setId(_id_);

        setClassid(_classid_);

    }

    @Override
    public Object clone()
    {
        return new AQualified(
            cloneList(this._id_),
            cloneNode(this._classid_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQualified(this);
    }

    public LinkedList<TId> getId()
    {
        return this._id_;
    }

    public void setId(List<?> list)
    {
        for(TId e : this._id_)
        {
            e.parent(null);
        }
        this._id_.clear();

        for(Object obj_e : list)
        {
            TId e = (TId) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._id_.add(e);
        }
    }

    public TClassid getClassid()
    {
        return this._classid_;
    }

    public void setClassid(TClassid node)
    {
        if(this._classid_ != null)
        {
            this._classid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classid_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._classid_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_.remove(child))
        {
            return;
        }

        if(this._classid_ == child)
        {
            this._classid_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TId> i = this._id_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._classid_ == oldChild)
        {
            setClassid((TClassid) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
