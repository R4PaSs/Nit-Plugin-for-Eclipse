/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.parser;

import org.nitlanguage.gen.simplec.node.*;
import org.nitlanguage.gen.simplec.analysis.*;

class TokenIndex extends AnalysisAdapter
{
    int index;

    public void caseTDot(TDot node)
    {
        index = 0;
    }

    public void caseTComma(TComma node)
    {
        index = 1;
    }

    public void caseTColon(TColon node)
    {
        index = 2;
    }

    public void caseTSemicolon(TSemicolon node)
    {
        index = 3;
    }

    public void caseTLPar(TLPar node)
    {
        index = 4;
    }

    public void caseTRPar(TRPar node)
    {
        index = 5;
    }

    public void caseTLBracket(TLBracket node)
    {
        index = 6;
    }

    public void caseTRBracket(TRBracket node)
    {
        index = 7;
    }

    public void caseTLBrace(TLBrace node)
    {
        index = 8;
    }

    public void caseTRBrace(TRBrace node)
    {
        index = 9;
    }

    public void caseTStar(TStar node)
    {
        index = 10;
    }

    public void caseTDiv(TDiv node)
    {
        index = 11;
    }

    public void caseTMod(TMod node)
    {
        index = 12;
    }

    public void caseTAmpersand(TAmpersand node)
    {
        index = 13;
    }

    public void caseTPlus(TPlus node)
    {
        index = 14;
    }

    public void caseTMinus(TMinus node)
    {
        index = 15;
    }

    public void caseTCaret(TCaret node)
    {
        index = 16;
    }

    public void caseTTilde(TTilde node)
    {
        index = 17;
    }

    public void caseTExclMark(TExclMark node)
    {
        index = 18;
    }

    public void caseTQuestMark(TQuestMark node)
    {
        index = 19;
    }

    public void caseTBar(TBar node)
    {
        index = 20;
    }

    public void caseTEllipsis(TEllipsis node)
    {
        index = 21;
    }

    public void caseTEqual(TEqual node)
    {
        index = 22;
    }

    public void caseTEq(TEq node)
    {
        index = 23;
    }

    public void caseTNeq(TNeq node)
    {
        index = 24;
    }

    public void caseTLt(TLt node)
    {
        index = 25;
    }

    public void caseTLteq(TLteq node)
    {
        index = 26;
    }

    public void caseTGt(TGt node)
    {
        index = 27;
    }

    public void caseTGteq(TGteq node)
    {
        index = 28;
    }

    public void caseTArrow(TArrow node)
    {
        index = 29;
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        index = 30;
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        index = 31;
    }

    public void caseTShl(TShl node)
    {
        index = 32;
    }

    public void caseTShr(TShr node)
    {
        index = 33;
    }

    public void caseTAmpersandAmpersand(TAmpersandAmpersand node)
    {
        index = 34;
    }

    public void caseTBarBar(TBarBar node)
    {
        index = 35;
    }

    public void caseTStarEqual(TStarEqual node)
    {
        index = 36;
    }

    public void caseTDivEqual(TDivEqual node)
    {
        index = 37;
    }

    public void caseTModEqual(TModEqual node)
    {
        index = 38;
    }

    public void caseTPlusEqual(TPlusEqual node)
    {
        index = 39;
    }

    public void caseTMinusEqual(TMinusEqual node)
    {
        index = 40;
    }

    public void caseTShlEqual(TShlEqual node)
    {
        index = 41;
    }

    public void caseTShrEqual(TShrEqual node)
    {
        index = 42;
    }

    public void caseTAmpersandEqual(TAmpersandEqual node)
    {
        index = 43;
    }

    public void caseTCaretEqual(TCaretEqual node)
    {
        index = 44;
    }

    public void caseTBarEqual(TBarEqual node)
    {
        index = 45;
    }

    public void caseTCase(TCase node)
    {
        index = 46;
    }

    public void caseTDefault(TDefault node)
    {
        index = 47;
    }

    public void caseTIf(TIf node)
    {
        index = 48;
    }

    public void caseTElse(TElse node)
    {
        index = 49;
    }

    public void caseTSwitch(TSwitch node)
    {
        index = 50;
    }

    public void caseTWhile(TWhile node)
    {
        index = 51;
    }

    public void caseTDo(TDo node)
    {
        index = 52;
    }

    public void caseTFor(TFor node)
    {
        index = 53;
    }

    public void caseTGoto(TGoto node)
    {
        index = 54;
    }

    public void caseTContinue(TContinue node)
    {
        index = 55;
    }

    public void caseTBreak(TBreak node)
    {
        index = 56;
    }

    public void caseTReturn(TReturn node)
    {
        index = 57;
    }

    public void caseTTypedef(TTypedef node)
    {
        index = 58;
    }

    public void caseTVoid(TVoid node)
    {
        index = 59;
    }

    public void caseTChar(TChar node)
    {
        index = 60;
    }

    public void caseTInt(TInt node)
    {
        index = 61;
    }

    public void caseTShort(TShort node)
    {
        index = 62;
    }

    public void caseTLong(TLong node)
    {
        index = 63;
    }

    public void caseTFloat(TFloat node)
    {
        index = 64;
    }

    public void caseTDouble(TDouble node)
    {
        index = 65;
    }

    public void caseTSigned(TSigned node)
    {
        index = 66;
    }

    public void caseTUnsigned(TUnsigned node)
    {
        index = 67;
    }

    public void caseTStruct(TStruct node)
    {
        index = 68;
    }

    public void caseTUnion(TUnion node)
    {
        index = 69;
    }

    public void caseTEnum(TEnum node)
    {
        index = 70;
    }

    public void caseTSizeof(TSizeof node)
    {
        index = 71;
    }

    public void caseTIdentifier(TIdentifier node)
    {
        index = 72;
    }

    public void caseTFloatingConstant(TFloatingConstant node)
    {
        index = 73;
    }

    public void caseTStringLitteral(TStringLitteral node)
    {
        index = 74;
    }

    public void caseTIntegerConstant(TIntegerConstant node)
    {
        index = 75;
    }

    public void caseTCharacterConstant(TCharacterConstant node)
    {
        index = 76;
    }

    public void caseEOF(EOF node)
    {
        index = 77;
    }
}
