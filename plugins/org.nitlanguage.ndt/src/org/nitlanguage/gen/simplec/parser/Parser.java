/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.parser;

import org.nitlanguage.gen.simplec.lexer.*;
import org.nitlanguage.gen.simplec.node.*;
import org.nitlanguage.gen.simplec.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(76), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(76), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(1), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(1), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(1), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(1), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(1), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(1), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(1), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(2), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(2), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(77), node, false); } break;
                    case 14: { Node node = new14(); push(goTo(77), node, false); } break;
                    case 15: { Node node = new15(); push(goTo(3), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(4), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(4), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(4), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(4), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(4), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(4), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(4), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(4), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(4), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(4), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(4), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(4), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(4), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(4), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(4), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(4), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(5), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(6), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(7), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(8), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(8), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(8), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(8), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(9), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(9), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(9), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(10), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(10), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(10), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(10), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(11), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(12), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(12), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(13), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(13), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(14), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(14), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(15), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(16), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(17), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(18), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(19), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(20), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(21), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(21), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(22), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(22), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(23), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(23), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(23), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(24), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(24), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(24), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(24), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(24), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(24), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(25), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(25), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(26), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(26), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(78), node, false); } break;
                    case 77: { Node node = new77(); push(goTo(78), node, false); } break;
                    case 78: { Node node = new78(); push(goTo(27), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(27), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(27), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(27), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(27), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(27), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(28), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(28), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(29), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(29), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(29), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(30), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(30), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(31), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(31), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(31), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(31), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(31), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(31), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(32), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(32), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(33), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(34), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(34), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(35), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(35), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(79), node, false); } break;
                    case 105: { Node node = new105(); push(goTo(79), node, false); } break;
                    case 106: { Node node = new106(); push(goTo(36), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(37), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(37), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(38), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(38), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(39), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(39), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(40), node, true); } break;
                    case 114: { Node node = new114(); push(goTo(40), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(41), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(41), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(42), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(42), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(42), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(42), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(42), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(43), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(43), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(43), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(43), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(44), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(44), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(80), node, false); } break;
                    case 129: { Node node = new129(); push(goTo(80), node, false); } break;
                    case 130: { Node node = new130(); push(goTo(44), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(44), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(45), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(46), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(46), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(47), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(47), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(81), node, false); } break;
                    case 138: { Node node = new138(); push(goTo(81), node, false); } break;
                    case 139: { Node node = new139(); push(goTo(47), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(82), node, false); } break;
                    case 141: { Node node = new141(); push(goTo(82), node, false); } break;
                    case 142: { Node node = new142(); push(goTo(47), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(47), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(47), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(47), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(47), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(48), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(48), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(48), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(48), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(49), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(49), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(49), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(49), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(49), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(49), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(49), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(49), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(49), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(49), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(49), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(49), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(49), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(49), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(49), node, true); } break;
                    case 166: { Node node = new166(); push(goTo(49), node, true); } break;
                    case 167: { Node node = new167(); push(goTo(50), node, true); } break;
                    case 168: { Node node = new168(); push(goTo(50), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(50), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(50), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(50), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(50), node, true); } break;
                    case 173: { Node node = new173(); push(goTo(50), node, true); } break;
                    case 174: { Node node = new174(); push(goTo(50), node, true); } break;
                    case 175: { Node node = new175(); push(goTo(50), node, true); } break;
                    case 176: { Node node = new176(); push(goTo(51), node, true); } break;
                    case 177: { Node node = new177(); push(goTo(51), node, true); } break;
                    case 178: { Node node = new178(); push(goTo(52), node, true); } break;
                    case 179: { Node node = new179(); push(goTo(52), node, true); } break;
                    case 180: { Node node = new180(); push(goTo(53), node, true); } break;
                    case 181: { Node node = new181(); push(goTo(53), node, true); } break;
                    case 182: { Node node = new182(); push(goTo(54), node, true); } break;
                    case 183: { Node node = new183(); push(goTo(54), node, true); } break;
                    case 184: { Node node = new184(); push(goTo(54), node, true); } break;
                    case 185: { Node node = new185(); push(goTo(54), node, true); } break;
                    case 186: { Node node = new186(); push(goTo(54), node, true); } break;
                    case 187: { Node node = new187(); push(goTo(54), node, true); } break;
                    case 188: { Node node = new188(); push(goTo(54), node, true); } break;
                    case 189: { Node node = new189(); push(goTo(54), node, true); } break;
                    case 190: { Node node = new190(); push(goTo(55), node, true); } break;
                    case 191: { Node node = new191(); push(goTo(55), node, true); } break;
                    case 192: { Node node = new192(); push(goTo(55), node, true); } break;
                    case 193: { Node node = new193(); push(goTo(55), node, true); } break;
                    case 194: { Node node = new194(); push(goTo(55), node, true); } break;
                    case 195: { Node node = new195(); push(goTo(55), node, true); } break;
                    case 196: { Node node = new196(); push(goTo(55), node, true); } break;
                    case 197: { Node node = new197(); push(goTo(55), node, true); } break;
                    case 198: { Node node = new198(); push(goTo(55), node, true); } break;
                    case 199: { Node node = new199(); push(goTo(55), node, true); } break;
                    case 200: { Node node = new200(); push(goTo(55), node, true); } break;
                    case 201: { Node node = new201(); push(goTo(55), node, true); } break;
                    case 202: { Node node = new202(); push(goTo(55), node, true); } break;
                    case 203: { Node node = new203(); push(goTo(55), node, true); } break;
                    case 204: { Node node = new204(); push(goTo(56), node, true); } break;
                    case 205: { Node node = new205(); push(goTo(56), node, true); } break;
                    case 206: { Node node = new206(); push(goTo(56), node, true); } break;
                    case 207: { Node node = new207(); push(goTo(56), node, true); } break;
                    case 208: { Node node = new208(); push(goTo(56), node, true); } break;
                    case 209: { Node node = new209(); push(goTo(56), node, true); } break;
                    case 210: { Node node = new210(); push(goTo(57), node, true); } break;
                    case 211: { Node node = new211(); push(goTo(57), node, true); } break;
                    case 212: { Node node = new212(); push(goTo(57), node, true); } break;
                    case 213: { Node node = new213(); push(goTo(57), node, true); } break;
                    case 214: { Node node = new214(); push(goTo(57), node, true); } break;
                    case 215: { Node node = new215(); push(goTo(57), node, true); } break;
                    case 216: { Node node = new216(); push(goTo(57), node, true); } break;
                    case 217: { Node node = new217(); push(goTo(57), node, true); } break;
                    case 218: { Node node = new218(); push(goTo(58), node, true); } break;
                    case 219: { Node node = new219(); push(goTo(58), node, true); } break;
                    case 220: { Node node = new220(); push(goTo(59), node, true); } break;
                    case 221: { Node node = new221(); push(goTo(59), node, true); } break;
                    case 222: { Node node = new222(); push(goTo(59), node, true); } break;
                    case 223: { Node node = new223(); push(goTo(60), node, true); } break;
                    case 224: { Node node = new224(); push(goTo(83), node, false); } break;
                    case 225: { Node node = new225(); push(goTo(83), node, false); } break;
                    case 226: { Node node = new226(); push(goTo(61), node, true); } break;
                    case 227: { Node node = new227(); push(goTo(62), node, true); } break;
                    case 228: { Node node = new228(); push(goTo(84), node, false); } break;
                    case 229: { Node node = new229(); push(goTo(84), node, false); } break;
                    case 230: { Node node = new230(); push(goTo(62), node, true); } break;
                    case 231: { Node node = new231(); push(goTo(63), node, true); } break;
                    case 232: { Node node = new232(); push(goTo(64), node, true); } break;
                    case 233: { Node node = new233(); push(goTo(64), node, true); } break;
                    case 234: { Node node = new234(); push(goTo(65), node, true); } break;
                    case 235: { Node node = new235(); push(goTo(65), node, true); } break;
                    case 236: { Node node = new236(); push(goTo(85), node, false); } break;
                    case 237: { Node node = new237(); push(goTo(85), node, false); } break;
                    case 238: { Node node = new238(); push(goTo(66), node, true); } break;
                    case 239: { Node node = new239(); push(goTo(67), node, true); } break;
                    case 240: { Node node = new240(); push(goTo(67), node, true); } break;
                    case 241: { Node node = new241(); push(goTo(67), node, true); } break;
                    case 242: { Node node = new242(); push(goTo(67), node, true); } break;
                    case 243: { Node node = new243(); push(goTo(68), node, true); } break;
                    case 244: { Node node = new244(); push(goTo(68), node, true); } break;
                    case 245: { Node node = new245(); push(goTo(68), node, true); } break;
                    case 246: { Node node = new246(); push(goTo(68), node, true); } break;
                    case 247: { Node node = new247(); push(goTo(69), node, true); } break;
                    case 248: { Node node = new248(); push(goTo(69), node, true); } break;
                    case 249: { Node node = new249(); push(goTo(70), node, true); } break;
                    case 250: { Node node = new250(); push(goTo(70), node, true); } break;
                    case 251: { Node node = new251(); push(goTo(71), node, true); } break;
                    case 252: { Node node = new252(); push(goTo(86), node, false); } break;
                    case 253: { Node node = new253(); push(goTo(86), node, false); } break;
                    case 254: { Node node = new254(); push(goTo(72), node, true); } break;
                    case 255: { Node node = new255(); push(goTo(72), node, true); } break;
                    case 256: { Node node = new256(); push(goTo(72), node, true); } break;
                    case 257: { Node node = new257(); push(goTo(73), node, true); } break;
                    case 258: { Node node = new258(); push(goTo(73), node, true); } break;
                    case 259: { Node node = new259(); push(goTo(87), node, false); } break;
                    case 260: { Node node = new260(); push(goTo(87), node, false); } break;
                    case 261: { Node node = new261(); push(goTo(73), node, true); } break;
                    case 262: { Node node = new262(); push(goTo(73), node, true); } break;
                    case 263: { Node node = new263(); push(goTo(73), node, true); } break;
                    case 264: { Node node = new264(); push(goTo(73), node, true); } break;
                    case 265: { Node node = new265(); push(goTo(73), node, true); } break;
                    case 266: { Node node = new266(); push(goTo(73), node, true); } break;
                    case 267: { Node node = new267(); push(goTo(73), node, true); } break;
                    case 268: { Node node = new268(); push(goTo(73), node, true); } break;
                    case 269: { Node node = new269(); push(goTo(74), node, true); } break;
                    case 270: { Node node = new270(); push(goTo(74), node, true); } break;
                    case 271: { Node node = new271(); push(goTo(74), node, true); } break;
                    case 272: { Node node = new272(); push(goTo(74), node, true); } break;
                    case 273: { Node node = new273(); push(goTo(74), node, true); } break;
                    case 274: { Node node = new274(); push(goTo(74), node, true); } break;
                    case 275: { Node node = new275(); push(goTo(75), node, true); } break;
                    case 276: { Node node = new276(); push(goTo(75), node, true); } break;
                    case 277: { Node node = new277(); push(goTo(75), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PTranslationUnit node1 = (PTranslationUnit) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        XPDeclarationOrDefinition node1 = null;
        ATranslationUnit node = new ATranslationUnit(node1);
        return node;
    }

    Node new1()
    {
        XPDeclarationOrDefinition node1 = (XPDeclarationOrDefinition) pop();
        ATranslationUnit node = new ATranslationUnit(node1);
        return node;
    }

    Node new2()
    {
        PDeclarationOrDefinition node2 = (PDeclarationOrDefinition) pop();
        XPDeclarationOrDefinition node1 = (XPDeclarationOrDefinition) pop();
        X1PDeclarationOrDefinition node = new X1PDeclarationOrDefinition(node1, node2);
        return node;
    }

    Node new3()
    {
        PDeclarationOrDefinition node1 = (PDeclarationOrDefinition) pop();
        X2PDeclarationOrDefinition node = new X2PDeclarationOrDefinition(node1);
        return node;
    }

    Node new4()
    {
        PStructDeclaration node1 = (PStructDeclaration) pop();
        AStructDeclarationDeclarationOrDefinition node = new AStructDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new5()
    {
        PUnionDeclaration node1 = (PUnionDeclaration) pop();
        AUnionDeclarationDeclarationOrDefinition node = new AUnionDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new6()
    {
        PEnumDeclaration node1 = (PEnumDeclaration) pop();
        AEnumDeclarationDeclarationOrDefinition node = new AEnumDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new7()
    {
        PTypedefDeclaration node1 = (PTypedefDeclaration) pop();
        ATypedefDeclarationDeclarationOrDefinition node = new ATypedefDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new8()
    {
        PFunctionDeclaration node1 = (PFunctionDeclaration) pop();
        AFunctionDeclarationDeclarationOrDefinition node = new AFunctionDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new9()
    {
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AVariableDeclarationDeclarationOrDefinition node = new AVariableDeclarationDeclarationOrDefinition(node1);
        return node;
    }

    Node new10()
    {
        PFunctionDefinition node1 = (PFunctionDefinition) pop();
        AFunctionDefinitionDeclarationOrDefinition node = new AFunctionDefinitionDeclarationOrDefinition(node1);
        return node;
    }

    Node new11()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRBrace node5 = (TRBrace) pop();
        XPMemberDeclaration node4 = null;
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TStruct node1 = (TStruct) pop();
        AStructDeclaration node = new AStructDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new12()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRBrace node5 = (TRBrace) pop();
        XPMemberDeclaration node4 = (XPMemberDeclaration) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TStruct node1 = (TStruct) pop();
        AStructDeclaration node = new AStructDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new13()
    {
        PMemberDeclaration node2 = (PMemberDeclaration) pop();
        XPMemberDeclaration node1 = (XPMemberDeclaration) pop();
        X1PMemberDeclaration node = new X1PMemberDeclaration(node1, node2);
        return node;
    }

    Node new14()
    {
        PMemberDeclaration node1 = (PMemberDeclaration) pop();
        X2PMemberDeclaration node = new X2PMemberDeclaration(node1);
        return node;
    }

    Node new15()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PDeclarator node2 = (PDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AMemberDeclaration node = new AMemberDeclaration(node1, node2, node3);
        return node;
    }

    Node new16()
    {
        PVoidSpecifier node1 = (PVoidSpecifier) pop();
        AVoidTypeSpecifier node = new AVoidTypeSpecifier(node1);
        return node;
    }

    Node new17()
    {
        PCharSpecifier node1 = (PCharSpecifier) pop();
        ACharTypeSpecifier node = new ACharTypeSpecifier(node1);
        return node;
    }

    Node new18()
    {
        PSignedCharSpecifier node1 = (PSignedCharSpecifier) pop();
        ASignedCharTypeSpecifier node = new ASignedCharTypeSpecifier(node1);
        return node;
    }

    Node new19()
    {
        PSignedShortSpecifier node1 = (PSignedShortSpecifier) pop();
        ASignedShortTypeSpecifier node = new ASignedShortTypeSpecifier(node1);
        return node;
    }

    Node new20()
    {
        PSignedIntSpecifier node1 = (PSignedIntSpecifier) pop();
        ASignedIntTypeSpecifier node = new ASignedIntTypeSpecifier(node1);
        return node;
    }

    Node new21()
    {
        PSignedLongSpecifier node1 = (PSignedLongSpecifier) pop();
        ASignedLongTypeSpecifier node = new ASignedLongTypeSpecifier(node1);
        return node;
    }

    Node new22()
    {
        PUnsignedCharSpecifier node1 = (PUnsignedCharSpecifier) pop();
        AUnsignedCharTypeSpecifier node = new AUnsignedCharTypeSpecifier(node1);
        return node;
    }

    Node new23()
    {
        PUnsignedShortSpecifier node1 = (PUnsignedShortSpecifier) pop();
        AUnsignedShortTypeSpecifier node = new AUnsignedShortTypeSpecifier(node1);
        return node;
    }

    Node new24()
    {
        PUnsignedIntSpecifier node1 = (PUnsignedIntSpecifier) pop();
        AUnsignedIntTypeSpecifier node = new AUnsignedIntTypeSpecifier(node1);
        return node;
    }

    Node new25()
    {
        PUnsignedLongSpecifier node1 = (PUnsignedLongSpecifier) pop();
        AUnsignedLongTypeSpecifier node = new AUnsignedLongTypeSpecifier(node1);
        return node;
    }

    Node new26()
    {
        PFloatSpecifier node1 = (PFloatSpecifier) pop();
        AFloatTypeSpecifier node = new AFloatTypeSpecifier(node1);
        return node;
    }

    Node new27()
    {
        PDoubleSpecifier node1 = (PDoubleSpecifier) pop();
        ADoubleTypeSpecifier node = new ADoubleTypeSpecifier(node1);
        return node;
    }

    Node new28()
    {
        PLongDoubleSpecifier node1 = (PLongDoubleSpecifier) pop();
        ALongDoubleTypeSpecifier node = new ALongDoubleTypeSpecifier(node1);
        return node;
    }

    Node new29()
    {
        PStructSpecifier node1 = (PStructSpecifier) pop();
        AStructTypeSpecifier node = new AStructTypeSpecifier(node1);
        return node;
    }

    Node new30()
    {
        PUnionSpecifier node1 = (PUnionSpecifier) pop();
        AUnionTypeSpecifier node = new AUnionTypeSpecifier(node1);
        return node;
    }

    Node new31()
    {
        PEnumSpecifier node1 = (PEnumSpecifier) pop();
        AEnumTypeSpecifier node = new AEnumTypeSpecifier(node1);
        return node;
    }

    Node new32()
    {
        TVoid node1 = (TVoid) pop();
        AVoidSpecifier node = new AVoidSpecifier(node1);
        return node;
    }

    Node new33()
    {
        TChar node1 = (TChar) pop();
        ACharSpecifier node = new ACharSpecifier(node1);
        return node;
    }

    Node new34()
    {
        TChar node2 = (TChar) pop();
        TSigned node1 = (TSigned) pop();
        ASignedCharSpecifier node = new ASignedCharSpecifier(node1, node2);
        return node;
    }

    Node new35()
    {
        TShort node1 = (TShort) pop();
        AShortSignedShortSpecifier node = new AShortSignedShortSpecifier(node1);
        return node;
    }

    Node new36()
    {
        TShort node2 = (TShort) pop();
        TSigned node1 = (TSigned) pop();
        ASignedShortSignedShortSpecifier node = new ASignedShortSignedShortSpecifier(node1, node2);
        return node;
    }

    Node new37()
    {
        TInt node2 = (TInt) pop();
        TShort node1 = (TShort) pop();
        AShortIntSignedShortSpecifier node = new AShortIntSignedShortSpecifier(node1, node2);
        return node;
    }

    Node new38()
    {
        TInt node3 = (TInt) pop();
        TShort node2 = (TShort) pop();
        TSigned node1 = (TSigned) pop();
        ASignedShortIntSignedShortSpecifier node = new ASignedShortIntSignedShortSpecifier(node1, node2, node3);
        return node;
    }

    Node new39()
    {
        TInt node1 = (TInt) pop();
        AIntSignedIntSpecifier node = new AIntSignedIntSpecifier(node1);
        return node;
    }

    Node new40()
    {
        TSigned node1 = (TSigned) pop();
        ASignedSignedIntSpecifier node = new ASignedSignedIntSpecifier(node1);
        return node;
    }

    Node new41()
    {
        TInt node2 = (TInt) pop();
        TSigned node1 = (TSigned) pop();
        ASignedIntSignedIntSpecifier node = new ASignedIntSignedIntSpecifier(node1, node2);
        return node;
    }

    Node new42()
    {
        TLong node1 = (TLong) pop();
        ALongSignedLongSpecifier node = new ALongSignedLongSpecifier(node1);
        return node;
    }

    Node new43()
    {
        TLong node2 = (TLong) pop();
        TSigned node1 = (TSigned) pop();
        ASignedLongSignedLongSpecifier node = new ASignedLongSignedLongSpecifier(node1, node2);
        return node;
    }

    Node new44()
    {
        TInt node2 = (TInt) pop();
        TLong node1 = (TLong) pop();
        ALongIntSignedLongSpecifier node = new ALongIntSignedLongSpecifier(node1, node2);
        return node;
    }

    Node new45()
    {
        TInt node3 = (TInt) pop();
        TLong node2 = (TLong) pop();
        TSigned node1 = (TSigned) pop();
        ASignedLongIntSignedLongSpecifier node = new ASignedLongIntSignedLongSpecifier(node1, node2, node3);
        return node;
    }

    Node new46()
    {
        TChar node2 = (TChar) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedCharSpecifier node = new AUnsignedCharSpecifier(node1, node2);
        return node;
    }

    Node new47()
    {
        TShort node2 = (TShort) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedShortUnsignedShortSpecifier node = new AUnsignedShortUnsignedShortSpecifier(node1, node2);
        return node;
    }

    Node new48()
    {
        TInt node3 = (TInt) pop();
        TShort node2 = (TShort) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedShortIntUnsignedShortSpecifier node = new AUnsignedShortIntUnsignedShortSpecifier(node1, node2, node3);
        return node;
    }

    Node new49()
    {
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedUnsignedIntSpecifier node = new AUnsignedUnsignedIntSpecifier(node1);
        return node;
    }

    Node new50()
    {
        TInt node2 = (TInt) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedIntUnsignedIntSpecifier node = new AUnsignedIntUnsignedIntSpecifier(node1, node2);
        return node;
    }

    Node new51()
    {
        TLong node2 = (TLong) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedLongUnsignedLongSpecifier node = new AUnsignedLongUnsignedLongSpecifier(node1, node2);
        return node;
    }

    Node new52()
    {
        TInt node3 = (TInt) pop();
        TLong node2 = (TLong) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedLongIntUnsignedLongSpecifier node = new AUnsignedLongIntUnsignedLongSpecifier(node1, node2, node3);
        return node;
    }

    Node new53()
    {
        TFloat node1 = (TFloat) pop();
        AFloatSpecifier node = new AFloatSpecifier(node1);
        return node;
    }

    Node new54()
    {
        TDouble node1 = (TDouble) pop();
        ADoubleSpecifier node = new ADoubleSpecifier(node1);
        return node;
    }

    Node new55()
    {
        TDouble node2 = (TDouble) pop();
        TLong node1 = (TLong) pop();
        ALongDoubleSpecifier node = new ALongDoubleSpecifier(node1, node2);
        return node;
    }

    Node new56()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TStruct node1 = (TStruct) pop();
        AStructSpecifier node = new AStructSpecifier(node1, node2);
        return node;
    }

    Node new57()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TUnion node1 = (TUnion) pop();
        AUnionSpecifier node = new AUnionSpecifier(node1, node2);
        return node;
    }

    Node new58()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TEnum node1 = (TEnum) pop();
        AEnumSpecifier node = new AEnumSpecifier(node1, node2);
        return node;
    }

    Node new59()
    {
        PPointer node1 = (PPointer) pop();
        APointerDeclarator node = new APointerDeclarator(node1);
        return node;
    }

    Node new60()
    {
        PDirectDeclarator node1 = (PDirectDeclarator) pop();
        ADirectDeclarator node = new ADirectDeclarator(node1);
        return node;
    }

    Node new61()
    {
        PDirectDeclarator node2 = (PDirectDeclarator) pop();
        TStar node1 = (TStar) pop();
        ADirectPointer node = new ADirectPointer(node1, node2);
        return node;
    }

    Node new62()
    {
        PPointer node2 = (PPointer) pop();
        TStar node1 = (TStar) pop();
        APointerPointer node = new APointerPointer(node1, node2);
        return node;
    }

    Node new63()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierDirectDeclarator node = new AIdentifierDirectDeclarator(node1);
        return node;
    }

    Node new64()
    {
        PArrayDeclarator node1 = (PArrayDeclarator) pop();
        AArrayDirectDeclarator node = new AArrayDirectDeclarator(node1);
        return node;
    }

    Node new65()
    {
        PFunctionPointerDeclarator node1 = (PFunctionPointerDeclarator) pop();
        AFunctionDirectDeclarator node = new AFunctionDirectDeclarator(node1);
        return node;
    }

    Node new66()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = null;
        TLBracket node2 = (TLBracket) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierArrayDeclarator node = new AIdentifierArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new67()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = (TIntegerConstant) pop();
        TLBracket node2 = (TLBracket) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierArrayDeclarator node = new AIdentifierArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new68()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = null;
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PPointer node2 = (PPointer) pop();
        TLPar node1 = (TLPar) pop();
        APointerArrayDeclarator node = new APointerArrayDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new69()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = (TIntegerConstant) pop();
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PPointer node2 = (PPointer) pop();
        TLPar node1 = (TLPar) pop();
        APointerArrayDeclarator node = new APointerArrayDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new70()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = null;
        TLBracket node2 = (TLBracket) pop();
        PArrayDeclarator node1 = (PArrayDeclarator) pop();
        AArrayArrayDeclarator node = new AArrayArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new71()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = (TIntegerConstant) pop();
        TLBracket node2 = (TLBracket) pop();
        PArrayDeclarator node1 = (PArrayDeclarator) pop();
        AArrayArrayDeclarator node = new AArrayArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new72()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = null;
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PPointer node2 = (PPointer) pop();
        TLPar node1 = (TLPar) pop();
        AFunctionPointerDeclarator node = new AFunctionPointerDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new73()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = (PParameterList) pop();
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PPointer node2 = (PPointer) pop();
        TLPar node1 = (TLPar) pop();
        AFunctionPointerDeclarator node = new AFunctionPointerDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new74()
    {
        XPParameterListTail node2 = null;
        PParameterDeclaration node1 = (PParameterDeclaration) pop();
        AParameterList node = new AParameterList(node1, node2);
        return node;
    }

    Node new75()
    {
        XPParameterListTail node2 = (XPParameterListTail) pop();
        PParameterDeclaration node1 = (PParameterDeclaration) pop();
        AParameterList node = new AParameterList(node1, node2);
        return node;
    }

    Node new76()
    {
        PParameterListTail node2 = (PParameterListTail) pop();
        XPParameterListTail node1 = (XPParameterListTail) pop();
        X1PParameterListTail node = new X1PParameterListTail(node1, node2);
        return node;
    }

    Node new77()
    {
        PParameterListTail node1 = (PParameterListTail) pop();
        X2PParameterListTail node = new X2PParameterListTail(node1);
        return node;
    }

    Node new78()
    {
        PDeclarator node2 = (PDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AParameterDeclaration node = new AParameterDeclaration(node1, node2);
        return node;
    }

    Node new79()
    {
        PAbstractDeclarator node2 = null;
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AAbstractParameterDeclaration node = new AAbstractParameterDeclaration(node1, node2);
        return node;
    }

    Node new80()
    {
        PAbstractDeclarator node2 = (PAbstractDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AAbstractParameterDeclaration node = new AAbstractParameterDeclaration(node1, node2);
        return node;
    }

    Node new81()
    {
        PDeclarator node2 = (PDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierParameterDeclaration node = new AIdentifierParameterDeclaration(node1, node2);
        return node;
    }

    Node new82()
    {
        PAbstractDeclarator node2 = null;
        TIdentifier node1 = (TIdentifier) pop();
        AAbstractIdentifierParameterDeclaration node = new AAbstractIdentifierParameterDeclaration(node1, node2);
        return node;
    }

    Node new83()
    {
        PAbstractDeclarator node2 = (PAbstractDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AAbstractIdentifierParameterDeclaration node = new AAbstractIdentifierParameterDeclaration(node1, node2);
        return node;
    }

    Node new84()
    {
        PAbstractPointer node1 = (PAbstractPointer) pop();
        APointerAbstractDeclarator node = new APointerAbstractDeclarator(node1);
        return node;
    }

    Node new85()
    {
        PAbstractDirectDeclarator node1 = (PAbstractDirectDeclarator) pop();
        ADirectAbstractDeclarator node = new ADirectAbstractDeclarator(node1);
        return node;
    }

    Node new86()
    {
        PAbstractDirectDeclarator node2 = null;
        TStar node1 = (TStar) pop();
        ADirectAbstractPointer node = new ADirectAbstractPointer(node1, node2);
        return node;
    }

    Node new87()
    {
        PAbstractDirectDeclarator node2 = (PAbstractDirectDeclarator) pop();
        TStar node1 = (TStar) pop();
        ADirectAbstractPointer node = new ADirectAbstractPointer(node1, node2);
        return node;
    }

    Node new88()
    {
        PAbstractPointer node2 = (PAbstractPointer) pop();
        TStar node1 = (TStar) pop();
        APointerAbstractPointer node = new APointerAbstractPointer(node1, node2);
        return node;
    }

    Node new89()
    {
        PAbstractArrayDeclarator node1 = (PAbstractArrayDeclarator) pop();
        AArrayAbstractDirectDeclarator node = new AArrayAbstractDirectDeclarator(node1);
        return node;
    }

    Node new90()
    {
        PAbstractFunctionPointerDeclarator node1 = (PAbstractFunctionPointerDeclarator) pop();
        AFunctionAbstractDirectDeclarator node = new AFunctionAbstractDirectDeclarator(node1);
        return node;
    }

    Node new91()
    {
        TRBracket node3 = (TRBracket) pop();
        TIntegerConstant node2 = null;
        TLBracket node1 = (TLBracket) pop();
        AIntegerAbstractArrayDeclarator node = new AIntegerAbstractArrayDeclarator(node1, node2, node3);
        return node;
    }

    Node new92()
    {
        TRBracket node3 = (TRBracket) pop();
        TIntegerConstant node2 = (TIntegerConstant) pop();
        TLBracket node1 = (TLBracket) pop();
        AIntegerAbstractArrayDeclarator node = new AIntegerAbstractArrayDeclarator(node1, node2, node3);
        return node;
    }

    Node new93()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = null;
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PAbstractPointer node2 = (PAbstractPointer) pop();
        TLPar node1 = (TLPar) pop();
        APointerAbstractArrayDeclarator node = new APointerAbstractArrayDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new94()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = (TIntegerConstant) pop();
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PAbstractPointer node2 = (PAbstractPointer) pop();
        TLPar node1 = (TLPar) pop();
        APointerAbstractArrayDeclarator node = new APointerAbstractArrayDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new95()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = null;
        TLBracket node2 = (TLBracket) pop();
        PAbstractArrayDeclarator node1 = (PAbstractArrayDeclarator) pop();
        AArrayAbstractArrayDeclarator node = new AArrayAbstractArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new96()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = (TIntegerConstant) pop();
        TLBracket node2 = (TLBracket) pop();
        PAbstractArrayDeclarator node1 = (PAbstractArrayDeclarator) pop();
        AArrayAbstractArrayDeclarator node = new AArrayAbstractArrayDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new97()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = null;
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PAbstractPointer node2 = (PAbstractPointer) pop();
        TLPar node1 = (TLPar) pop();
        AAbstractFunctionPointerDeclarator node = new AAbstractFunctionPointerDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new98()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = (PParameterList) pop();
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PAbstractPointer node2 = (PAbstractPointer) pop();
        TLPar node1 = (TLPar) pop();
        AAbstractFunctionPointerDeclarator node = new AAbstractFunctionPointerDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new99()
    {
        PParameterDeclaration node2 = (PParameterDeclaration) pop();
        TComma node1 = (TComma) pop();
        AParameterListTail node = new AParameterListTail(node1, node2);
        return node;
    }

    Node new100()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRBrace node5 = (TRBrace) pop();
        XPMemberDeclaration node4 = null;
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TUnion node1 = (TUnion) pop();
        AUnionDeclaration node = new AUnionDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new101()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRBrace node5 = (TRBrace) pop();
        XPMemberDeclaration node4 = (XPMemberDeclaration) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TUnion node1 = (TUnion) pop();
        AUnionDeclaration node = new AUnionDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new102()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRBrace node6 = (TRBrace) pop();
        XPAdditionalEnumerator node5 = null;
        PEnumerator node4 = (PEnumerator) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TEnum node1 = (TEnum) pop();
        AEnumDeclaration node = new AEnumDeclaration(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new103()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRBrace node6 = (TRBrace) pop();
        XPAdditionalEnumerator node5 = (XPAdditionalEnumerator) pop();
        PEnumerator node4 = (PEnumerator) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TEnum node1 = (TEnum) pop();
        AEnumDeclaration node = new AEnumDeclaration(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new104()
    {
        PAdditionalEnumerator node2 = (PAdditionalEnumerator) pop();
        XPAdditionalEnumerator node1 = (XPAdditionalEnumerator) pop();
        X1PAdditionalEnumerator node = new X1PAdditionalEnumerator(node1, node2);
        return node;
    }

    Node new105()
    {
        PAdditionalEnumerator node1 = (PAdditionalEnumerator) pop();
        X2PAdditionalEnumerator node = new X2PAdditionalEnumerator(node1);
        return node;
    }

    Node new106()
    {
        PEnumerator node2 = (PEnumerator) pop();
        TComma node1 = (TComma) pop();
        AAdditionalEnumerator node = new AAdditionalEnumerator(node1, node2);
        return node;
    }

    Node new107()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AAutomaticEnumerator node = new AAutomaticEnumerator(node1);
        return node;
    }

    Node new108()
    {
        PConstant node3 = (PConstant) pop();
        TEqual node2 = (TEqual) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ASpecificEnumerator node = new ASpecificEnumerator(node1, node2, node3);
        return node;
    }

    Node new109()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PDeclarator node3 = (PDeclarator) pop();
        PTypeSpecifier node2 = (PTypeSpecifier) pop();
        TTypedef node1 = (TTypedef) pop();
        ATypedefDeclaration node = new ATypedefDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new110()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PDeclarator node3 = (PDeclarator) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TTypedef node1 = (TTypedef) pop();
        AIdentifierTypedefDeclaration node = new AIdentifierTypedefDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new111()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PFunctionDeclarator node2 = (PFunctionDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AFunctionDeclaration node = new AFunctionDeclaration(node1, node2, node3);
        return node;
    }

    Node new112()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PFunctionDeclarator node2 = (PFunctionDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierFunctionDeclaration node = new AIdentifierFunctionDeclaration(node1, node2, node3);
        return node;
    }

    Node new113()
    {
        PPointerFunction node1 = (PPointerFunction) pop();
        APointerFunctionDeclarator node = new APointerFunctionDeclarator(node1);
        return node;
    }

    Node new114()
    {
        PDirectFunctionDeclarator node1 = (PDirectFunctionDeclarator) pop();
        ADirectFunctionDeclarator node = new ADirectFunctionDeclarator(node1);
        return node;
    }

    Node new115()
    {
        PDirectFunctionDeclarator node2 = (PDirectFunctionDeclarator) pop();
        TStar node1 = (TStar) pop();
        ADirectPointerFunction node = new ADirectPointerFunction(node1, node2);
        return node;
    }

    Node new116()
    {
        PPointerFunction node2 = (PPointerFunction) pop();
        TStar node1 = (TStar) pop();
        APointerPointerFunction node = new APointerPointerFunction(node1, node2);
        return node;
    }

    Node new117()
    {
        PArrayFunctionDeclarator node1 = (PArrayFunctionDeclarator) pop();
        AArrayDirectFunctionDeclarator node = new AArrayDirectFunctionDeclarator(node1);
        return node;
    }

    Node new118()
    {
        TRPar node4 = (TRPar) pop();
        PParameterList node3 = null;
        TLPar node2 = (TLPar) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierDirectFunctionDeclarator node = new AIdentifierDirectFunctionDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new119()
    {
        TRPar node4 = (TRPar) pop();
        PParameterList node3 = (PParameterList) pop();
        TLPar node2 = (TLPar) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierDirectFunctionDeclarator node = new AIdentifierDirectFunctionDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new120()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = null;
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PPointerFunction node2 = (PPointerFunction) pop();
        TLPar node1 = (TLPar) pop();
        AFunctionDirectFunctionDeclarator node = new AFunctionDirectFunctionDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new121()
    {
        TRPar node6 = (TRPar) pop();
        PParameterList node5 = (PParameterList) pop();
        TLPar node4 = (TLPar) pop();
        TRPar node3 = (TRPar) pop();
        PPointerFunction node2 = (PPointerFunction) pop();
        TLPar node1 = (TLPar) pop();
        AFunctionDirectFunctionDeclarator node = new AFunctionDirectFunctionDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new122()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = null;
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PPointerFunction node2 = (PPointerFunction) pop();
        TLPar node1 = (TLPar) pop();
        APointerArrayFunctionDeclarator node = new APointerArrayFunctionDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new123()
    {
        TRBracket node6 = (TRBracket) pop();
        TIntegerConstant node5 = (TIntegerConstant) pop();
        TLBracket node4 = (TLBracket) pop();
        TRPar node3 = (TRPar) pop();
        PPointerFunction node2 = (PPointerFunction) pop();
        TLPar node1 = (TLPar) pop();
        APointerArrayFunctionDeclarator node = new APointerArrayFunctionDeclarator(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new124()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = null;
        TLBracket node2 = (TLBracket) pop();
        PArrayFunctionDeclarator node1 = (PArrayFunctionDeclarator) pop();
        AArrayArrayFunctionDeclarator node = new AArrayArrayFunctionDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new125()
    {
        TRBracket node4 = (TRBracket) pop();
        TIntegerConstant node3 = (TIntegerConstant) pop();
        TLBracket node2 = (TLBracket) pop();
        PArrayFunctionDeclarator node1 = (PArrayFunctionDeclarator) pop();
        AArrayArrayFunctionDeclarator node = new AArrayArrayFunctionDeclarator(node1, node2, node3, node4);
        return node;
    }

    Node new126()
    {
        TSemicolon node4 = (TSemicolon) pop();
        XPAdditionalDeclarator node3 = null;
        PDeclarator node2 = (PDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AVariableDeclaration node = new AVariableDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new127()
    {
        TSemicolon node4 = (TSemicolon) pop();
        XPAdditionalDeclarator node3 = (XPAdditionalDeclarator) pop();
        PDeclarator node2 = (PDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AVariableDeclaration node = new AVariableDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new128()
    {
        PAdditionalDeclarator node2 = (PAdditionalDeclarator) pop();
        XPAdditionalDeclarator node1 = (XPAdditionalDeclarator) pop();
        X1PAdditionalDeclarator node = new X1PAdditionalDeclarator(node1, node2);
        return node;
    }

    Node new129()
    {
        PAdditionalDeclarator node1 = (PAdditionalDeclarator) pop();
        X2PAdditionalDeclarator node = new X2PAdditionalDeclarator(node1);
        return node;
    }

    Node new130()
    {
        TSemicolon node4 = (TSemicolon) pop();
        XPAdditionalDeclarator node3 = null;
        PDeclarator node2 = (PDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierVariableDeclaration node = new AIdentifierVariableDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new131()
    {
        TSemicolon node4 = (TSemicolon) pop();
        XPAdditionalDeclarator node3 = (XPAdditionalDeclarator) pop();
        PDeclarator node2 = (PDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierVariableDeclaration node = new AIdentifierVariableDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new132()
    {
        PDeclarator node2 = (PDeclarator) pop();
        TComma node1 = (TComma) pop();
        AAdditionalDeclarator node = new AAdditionalDeclarator(node1, node2);
        return node;
    }

    Node new133()
    {
        PFunctionBody node3 = (PFunctionBody) pop();
        PFunctionDeclarator node2 = (PFunctionDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        AFunctionDefinition node = new AFunctionDefinition(node1, node2, node3);
        return node;
    }

    Node new134()
    {
        PFunctionBody node3 = (PFunctionBody) pop();
        PFunctionDeclarator node2 = (PFunctionDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierFunctionDefinition node = new AIdentifierFunctionDefinition(node1, node2, node3);
        return node;
    }

    Node new135()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = null;
        XPStatement node3 = null;
        XPVariableDeclaration node2 = null;
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new136()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = null;
        XPStatement node3 = null;
        XPVariableDeclaration node2 = (XPVariableDeclaration) pop();
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new137()
    {
        PVariableDeclaration node2 = (PVariableDeclaration) pop();
        XPVariableDeclaration node1 = (XPVariableDeclaration) pop();
        X1PVariableDeclaration node = new X1PVariableDeclaration(node1, node2);
        return node;
    }

    Node new138()
    {
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        X2PVariableDeclaration node = new X2PVariableDeclaration(node1);
        return node;
    }

    Node new139()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = null;
        XPStatement node3 = (XPStatement) pop();
        XPVariableDeclaration node2 = null;
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new140()
    {
        PStatement node2 = (PStatement) pop();
        XPStatement node1 = (XPStatement) pop();
        X1PStatement node = new X1PStatement(node1, node2);
        return node;
    }

    Node new141()
    {
        PStatement node1 = (PStatement) pop();
        X2PStatement node = new X2PStatement(node1);
        return node;
    }

    Node new142()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = null;
        XPStatement node3 = (XPStatement) pop();
        XPVariableDeclaration node2 = (XPVariableDeclaration) pop();
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new143()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = (PStopStatement) pop();
        XPStatement node3 = null;
        XPVariableDeclaration node2 = null;
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new144()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = (PStopStatement) pop();
        XPStatement node3 = null;
        XPVariableDeclaration node2 = (XPVariableDeclaration) pop();
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new145()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = (PStopStatement) pop();
        XPStatement node3 = (XPStatement) pop();
        XPVariableDeclaration node2 = null;
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new146()
    {
        TRBrace node5 = (TRBrace) pop();
        PStopStatement node4 = (PStopStatement) pop();
        XPStatement node3 = (XPStatement) pop();
        XPVariableDeclaration node2 = (XPVariableDeclaration) pop();
        TLBrace node1 = (TLBrace) pop();
        AFunctionBody node = new AFunctionBody(node1, node2, node3, node4, node5);
        return node;
    }

    Node new147()
    {
        TRBrace node4 = (TRBrace) pop();
        PStopStatement node3 = null;
        XPStatement node2 = null;
        TLBrace node1 = (TLBrace) pop();
        ACompoundStatement node = new ACompoundStatement(node1, node2, node3, node4);
        return node;
    }

    Node new148()
    {
        TRBrace node4 = (TRBrace) pop();
        PStopStatement node3 = null;
        XPStatement node2 = (XPStatement) pop();
        TLBrace node1 = (TLBrace) pop();
        ACompoundStatement node = new ACompoundStatement(node1, node2, node3, node4);
        return node;
    }

    Node new149()
    {
        TRBrace node4 = (TRBrace) pop();
        PStopStatement node3 = (PStopStatement) pop();
        XPStatement node2 = null;
        TLBrace node1 = (TLBrace) pop();
        ACompoundStatement node = new ACompoundStatement(node1, node2, node3, node4);
        return node;
    }

    Node new150()
    {
        TRBrace node4 = (TRBrace) pop();
        PStopStatement node3 = (PStopStatement) pop();
        XPStatement node2 = (XPStatement) pop();
        TLBrace node1 = (TLBrace) pop();
        ACompoundStatement node = new ACompoundStatement(node1, node2, node3, node4);
        return node;
    }

    Node new151()
    {
        PCompoundStatement node1 = (PCompoundStatement) pop();
        ACompStmtStatement node = new ACompStmtStatement(node1);
        return node;
    }

    Node new152()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PBasicStatement node1 = (PBasicStatement) pop();
        ABasicStmtStatement node = new ABasicStmtStatement(node1, node2);
        return node;
    }

    Node new153()
    {
        PCompoundStatement node5 = (PCompoundStatement) pop();
        TRPar node4 = (TRPar) pop();
        PConditionalExpression node3 = (PConditionalExpression) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        AIfStatement node = new AIfStatement(node1, node2, node3, node4, node5);
        return node;
    }

    Node new154()
    {
        PCompoundStatement node7 = (PCompoundStatement) pop();
        TElse node6 = (TElse) pop();
        PCompoundStatement node5 = (PCompoundStatement) pop();
        TRPar node4 = (TRPar) pop();
        PConditionalExpression node3 = (PConditionalExpression) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        AIfThenElseStatement node = new AIfThenElseStatement(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new155()
    {
        PCompoundStatement node7 = (PCompoundStatement) pop();
        TElse node6 = (TElse) pop();
        TSemicolon node5 = (TSemicolon) pop();
        TRPar node4 = (TRPar) pop();
        PConditionalExpression node3 = (PConditionalExpression) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        AIfElseStatement node = new AIfElseStatement(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new156()
    {
        PCompoundStatement node5 = (PCompoundStatement) pop();
        TRPar node4 = (TRPar) pop();
        PConditionalExpression node3 = (PConditionalExpression) pop();
        TLPar node2 = (TLPar) pop();
        TWhile node1 = (TWhile) pop();
        AWhileStatement node = new AWhileStatement(node1, node2, node3, node4, node5);
        return node;
    }

    Node new157()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRPar node6 = (TRPar) pop();
        PConditionalExpression node5 = (PConditionalExpression) pop();
        TLPar node4 = (TLPar) pop();
        TWhile node3 = (TWhile) pop();
        PCompoundStatement node2 = (PCompoundStatement) pop();
        TDo node1 = (TDo) pop();
        ADoStatement node = new ADoStatement(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new158()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = null;
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = null;
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = null;
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new159()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = null;
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = null;
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = (PBasicStatement) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new160()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = null;
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = (PConditionalExpression) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = null;
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new161()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = null;
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = (PConditionalExpression) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = (PBasicStatement) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new162()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = (PBasicStatement) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = null;
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = null;
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new163()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = (PBasicStatement) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = null;
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = (PBasicStatement) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new164()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = (PBasicStatement) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = (PConditionalExpression) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = null;
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new165()
    {
        PCompoundStatement node9 = (PCompoundStatement) pop();
        TRPar node8 = (TRPar) pop();
        PBasicStatement node7 = (PBasicStatement) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PConditionalExpression node5 = (PConditionalExpression) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PBasicStatement node3 = (PBasicStatement) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStatement node = new AForStatement(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new166()
    {
        PCaseStatements node5 = (PCaseStatements) pop();
        TRPar node4 = (TRPar) pop();
        PValue node3 = (PValue) pop();
        TLPar node2 = (TLPar) pop();
        TSwitch node1 = (TSwitch) pop();
        ASwitchStatement node = new ASwitchStatement(node1, node2, node3, node4, node5);
        return node;
    }

    Node new167()
    {
        PCallExpression node1 = (PCallExpression) pop();
        ACallExpressionBasicStatement node = new ACallExpressionBasicStatement(node1);
        return node;
    }

    Node new168()
    {
        PModifyExpression node1 = (PModifyExpression) pop();
        AModifyExpressionBasicStatement node = new AModifyExpressionBasicStatement(node1);
        return node;
    }

    Node new169()
    {
        PSimpleExpression node1 = (PSimpleExpression) pop();
        ADead1BasicStatement node = new ADead1BasicStatement(node1);
        return node;
    }

    Node new170()
    {
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TStar node2 = (TStar) pop();
        TLPar node1 = (TLPar) pop();
        ADead2BasicStatement node = new ADead2BasicStatement(node1, node2, node3, node4);
        return node;
    }

    Node new171()
    {
        TRPar node4 = (TRPar) pop();
        PVarname node3 = (PVarname) pop();
        TAmpersand node2 = (TAmpersand) pop();
        TLPar node1 = (TLPar) pop();
        ADead3BasicStatement node = new ADead3BasicStatement(node1, node2, node3, node4);
        return node;
    }

    Node new172()
    {
        TIdentifier node2 = (TIdentifier) pop();
        PUnop node1 = (PUnop) pop();
        ADead4BasicStatement node = new ADead4BasicStatement(node1, node2);
        return node;
    }

    Node new173()
    {
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PUnop node2 = (PUnop) pop();
        TLPar node1 = (TLPar) pop();
        ADead5BasicStatement node = new ADead5BasicStatement(node1, node2, node3, node4);
        return node;
    }

    Node new174()
    {
        PVarname node4 = (PVarname) pop();
        TRPar node3 = (TRPar) pop();
        PTypeName node2 = (PTypeName) pop();
        TLPar node1 = (TLPar) pop();
        ADead6BasicStatement node = new ADead6BasicStatement(node1, node2, node3, node4);
        return node;
    }

    Node new175()
    {
        PConstant node4 = (PConstant) pop();
        TRPar node3 = (TRPar) pop();
        PTypeName node2 = (PTypeName) pop();
        TLPar node1 = (TLPar) pop();
        ADead7BasicStatement node = new ADead7BasicStatement(node1, node2, node3, node4);
        return node;
    }

    Node new176()
    {
        PBinaryExpression node1 = (PBinaryExpression) pop();
        ABinaryRhs node = new ABinaryRhs(node1);
        return node;
    }

    Node new177()
    {
        PUnaryExpression node1 = (PUnaryExpression) pop();
        AUnaryRhs node = new AUnaryRhs(node1);
        return node;
    }

    Node new178()
    {
        TRPar node5 = (TRPar) pop();
        PValue node4 = (PValue) pop();
        PBinop node3 = (PBinop) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TLPar node1 = (TLPar) pop();
        AIdentifierBinaryExpression node = new AIdentifierBinaryExpression(node1, node2, node3, node4, node5);
        return node;
    }

    Node new179()
    {
        TRPar node5 = (TRPar) pop();
        PValue node4 = (PValue) pop();
        PBinop node3 = (PBinop) pop();
        PConstant node2 = (PConstant) pop();
        TLPar node1 = (TLPar) pop();
        AConstantBinaryExpression node = new AConstantBinaryExpression(node1, node2, node3, node4, node5);
        return node;
    }

    Node new180()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierValue node = new AIdentifierValue(node1);
        return node;
    }

    Node new181()
    {
        PConstant node1 = (PConstant) pop();
        AConstantValue node = new AConstantValue(node1);
        return node;
    }

    Node new182()
    {
        TFloatingConstant node2 = (TFloatingConstant) pop();
        PUnop node1 = null;
        AFloatingConstant node = new AFloatingConstant(node1, node2);
        return node;
    }

    Node new183()
    {
        TFloatingConstant node2 = (TFloatingConstant) pop();
        PUnop node1 = (PUnop) pop();
        AFloatingConstant node = new AFloatingConstant(node1, node2);
        return node;
    }

    Node new184()
    {
        TStringLitteral node2 = (TStringLitteral) pop();
        PUnop node1 = null;
        AStringConstant node = new AStringConstant(node1, node2);
        return node;
    }

    Node new185()
    {
        TStringLitteral node2 = (TStringLitteral) pop();
        PUnop node1 = (PUnop) pop();
        AStringConstant node = new AStringConstant(node1, node2);
        return node;
    }

    Node new186()
    {
        TIntegerConstant node2 = (TIntegerConstant) pop();
        PUnop node1 = null;
        AIntegerConstant node = new AIntegerConstant(node1, node2);
        return node;
    }

    Node new187()
    {
        TIntegerConstant node2 = (TIntegerConstant) pop();
        PUnop node1 = (PUnop) pop();
        AIntegerConstant node = new AIntegerConstant(node1, node2);
        return node;
    }

    Node new188()
    {
        TCharacterConstant node2 = (TCharacterConstant) pop();
        PUnop node1 = null;
        ACharacterConstant node = new ACharacterConstant(node1, node2);
        return node;
    }

    Node new189()
    {
        TCharacterConstant node2 = (TCharacterConstant) pop();
        PUnop node1 = (PUnop) pop();
        ACharacterConstant node = new ACharacterConstant(node1, node2);
        return node;
    }

    Node new190()
    {
        PRelop node1 = (PRelop) pop();
        ARelopBinop node = new ARelopBinop(node1);
        return node;
    }

    Node new191()
    {
        TStar node1 = (TStar) pop();
        AStarBinop node = new AStarBinop(node1);
        return node;
    }

    Node new192()
    {
        TDiv node1 = (TDiv) pop();
        ADivBinop node = new ADivBinop(node1);
        return node;
    }

    Node new193()
    {
        TMod node1 = (TMod) pop();
        AModBinop node = new AModBinop(node1);
        return node;
    }

    Node new194()
    {
        TAmpersand node1 = (TAmpersand) pop();
        AAmpersandBinop node = new AAmpersandBinop(node1);
        return node;
    }

    Node new195()
    {
        TPlus node1 = (TPlus) pop();
        APlusBinop node = new APlusBinop(node1);
        return node;
    }

    Node new196()
    {
        TMinus node1 = (TMinus) pop();
        AMinusBinop node = new AMinusBinop(node1);
        return node;
    }

    Node new197()
    {
        TCaret node1 = (TCaret) pop();
        ACaretBinop node = new ACaretBinop(node1);
        return node;
    }

    Node new198()
    {
        TExclMark node1 = (TExclMark) pop();
        AExclMarkBinop node = new AExclMarkBinop(node1);
        return node;
    }

    Node new199()
    {
        TBar node1 = (TBar) pop();
        ABarBinop node = new ABarBinop(node1);
        return node;
    }

    Node new200()
    {
        TShl node1 = (TShl) pop();
        AShlBinop node = new AShlBinop(node1);
        return node;
    }

    Node new201()
    {
        TShr node1 = (TShr) pop();
        AShrBinop node = new AShrBinop(node1);
        return node;
    }

    Node new202()
    {
        TAmpersandAmpersand node1 = (TAmpersandAmpersand) pop();
        AAmpersandAmpersandBinop node = new AAmpersandAmpersandBinop(node1);
        return node;
    }

    Node new203()
    {
        TBarBar node1 = (TBarBar) pop();
        ABarBarBinop node = new ABarBarBinop(node1);
        return node;
    }

    Node new204()
    {
        TEq node1 = (TEq) pop();
        AEqRelop node = new AEqRelop(node1);
        return node;
    }

    Node new205()
    {
        TNeq node1 = (TNeq) pop();
        ANeqRelop node = new ANeqRelop(node1);
        return node;
    }

    Node new206()
    {
        TLt node1 = (TLt) pop();
        ALtRelop node = new ALtRelop(node1);
        return node;
    }

    Node new207()
    {
        TLteq node1 = (TLteq) pop();
        ALteqRelop node = new ALteqRelop(node1);
        return node;
    }

    Node new208()
    {
        TGt node1 = (TGt) pop();
        AGtRelop node = new AGtRelop(node1);
        return node;
    }

    Node new209()
    {
        TGteq node1 = (TGteq) pop();
        AGteqRelop node = new AGteqRelop(node1);
        return node;
    }

    Node new210()
    {
        PSimpleExpression node1 = (PSimpleExpression) pop();
        ASimpleUnaryExpression node = new ASimpleUnaryExpression(node1);
        return node;
    }

    Node new211()
    {
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TStar node2 = (TStar) pop();
        TLPar node1 = (TLPar) pop();
        AReferenceUnaryExpression node = new AReferenceUnaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new212()
    {
        TRPar node4 = (TRPar) pop();
        PVarname node3 = (PVarname) pop();
        TAmpersand node2 = (TAmpersand) pop();
        TLPar node1 = (TLPar) pop();
        AAddressUnaryExpression node = new AAddressUnaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new213()
    {
        PCallExpression node1 = (PCallExpression) pop();
        ACallUnaryExpression node = new ACallUnaryExpression(node1);
        return node;
    }

    Node new214()
    {
        TIdentifier node2 = (TIdentifier) pop();
        PUnop node1 = (PUnop) pop();
        AUnopUnaryExpression node = new AUnopUnaryExpression(node1, node2);
        return node;
    }

    Node new215()
    {
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PUnop node2 = (PUnop) pop();
        TLPar node1 = (TLPar) pop();
        AParUnopUnaryExpression node = new AParUnopUnaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new216()
    {
        PVarname node4 = (PVarname) pop();
        TRPar node3 = (TRPar) pop();
        PTypeName node2 = (PTypeName) pop();
        TLPar node1 = (TLPar) pop();
        ACastUnaryExpression node = new ACastUnaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new217()
    {
        PConstant node4 = (PConstant) pop();
        TRPar node3 = (TRPar) pop();
        PTypeName node2 = (PTypeName) pop();
        TLPar node1 = (TLPar) pop();
        ACastConstUnaryExpression node = new ACastConstUnaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new218()
    {
        PVarname node1 = (PVarname) pop();
        AVarnameSimpleExpression node = new AVarnameSimpleExpression(node1);
        return node;
    }

    Node new219()
    {
        PConstant node1 = (PConstant) pop();
        AConstantSimpleExpression node = new AConstantSimpleExpression(node1);
        return node;
    }

    Node new220()
    {
        PArrayref node1 = (PArrayref) pop();
        AArrayrefVarname node = new AArrayrefVarname(node1);
        return node;
    }

    Node new221()
    {
        PCompref node1 = (PCompref) pop();
        AComprefVarname node = new AComprefVarname(node1);
        return node;
    }

    Node new222()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierVarname node = new AIdentifierVarname(node1);
        return node;
    }

    Node new223()
    {
        XPReflist node2 = (XPReflist) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AArrayref node = new AArrayref(node1, node2);
        return node;
    }

    Node new224()
    {
        PReflist node2 = (PReflist) pop();
        XPReflist node1 = (XPReflist) pop();
        X1PReflist node = new X1PReflist(node1, node2);
        return node;
    }

    Node new225()
    {
        PReflist node1 = (PReflist) pop();
        X2PReflist node = new X2PReflist(node1);
        return node;
    }

    Node new226()
    {
        TRBracket node3 = (TRBracket) pop();
        PValue node2 = (PValue) pop();
        TLBracket node1 = (TLBracket) pop();
        AReflist node = new AReflist(node1, node2, node3);
        return node;
    }

    Node new227()
    {
        XPIdlist node5 = (XPIdlist) pop();
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TStar node2 = (TStar) pop();
        TLPar node1 = (TLPar) pop();
        AIndirectCompref node = new AIndirectCompref(node1, node2, node3, node4, node5);
        return node;
    }

    Node new228()
    {
        PIdlist node2 = (PIdlist) pop();
        XPIdlist node1 = (XPIdlist) pop();
        X1PIdlist node = new X1PIdlist(node1, node2);
        return node;
    }

    Node new229()
    {
        PIdlist node1 = (PIdlist) pop();
        X2PIdlist node = new X2PIdlist(node1);
        return node;
    }

    Node new230()
    {
        XPIdlist node2 = (XPIdlist) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ADirectCompref node = new ADirectCompref(node1, node2);
        return node;
    }

    Node new231()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TDot node1 = (TDot) pop();
        AIdlist node = new AIdlist(node1, node2);
        return node;
    }

    Node new232()
    {
        TRPar node4 = (TRPar) pop();
        PArglist node3 = null;
        TLPar node2 = (TLPar) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ACallExpression node = new ACallExpression(node1, node2, node3, node4);
        return node;
    }

    Node new233()
    {
        TRPar node4 = (TRPar) pop();
        PArglist node3 = (PArglist) pop();
        TLPar node2 = (TLPar) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ACallExpression node = new ACallExpression(node1, node2, node3, node4);
        return node;
    }

    Node new234()
    {
        XPArglistTail node2 = null;
        PValue node1 = (PValue) pop();
        AArglist node = new AArglist(node1, node2);
        return node;
    }

    Node new235()
    {
        XPArglistTail node2 = (XPArglistTail) pop();
        PValue node1 = (PValue) pop();
        AArglist node = new AArglist(node1, node2);
        return node;
    }

    Node new236()
    {
        PArglistTail node2 = (PArglistTail) pop();
        XPArglistTail node1 = (XPArglistTail) pop();
        X1PArglistTail node = new X1PArglistTail(node1, node2);
        return node;
    }

    Node new237()
    {
        PArglistTail node1 = (PArglistTail) pop();
        X2PArglistTail node = new X2PArglistTail(node1);
        return node;
    }

    Node new238()
    {
        PValue node2 = (PValue) pop();
        TComma node1 = (TComma) pop();
        AArglistTail node = new AArglistTail(node1, node2);
        return node;
    }

    Node new239()
    {
        TPlus node1 = (TPlus) pop();
        APlusUnop node = new APlusUnop(node1);
        return node;
    }

    Node new240()
    {
        TMinus node1 = (TMinus) pop();
        AMinusUnop node = new AMinusUnop(node1);
        return node;
    }

    Node new241()
    {
        TTilde node1 = (TTilde) pop();
        ATildeUnop node = new ATildeUnop(node1);
        return node;
    }

    Node new242()
    {
        TExclMark node1 = (TExclMark) pop();
        AExclMarkUnop node = new AExclMarkUnop(node1);
        return node;
    }

    Node new243()
    {
        PAbstractDeclarator node2 = null;
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        ATypeName node = new ATypeName(node1, node2);
        return node;
    }

    Node new244()
    {
        PAbstractDeclarator node2 = (PAbstractDeclarator) pop();
        PTypeSpecifier node1 = (PTypeSpecifier) pop();
        ATypeName node = new ATypeName(node1, node2);
        return node;
    }

    Node new245()
    {
        PAbstractDeclarator node2 = null;
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierTypeName node = new AIdentifierTypeName(node1, node2);
        return node;
    }

    Node new246()
    {
        PAbstractDeclarator node2 = (PAbstractDeclarator) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierTypeName node = new AIdentifierTypeName(node1, node2);
        return node;
    }

    Node new247()
    {
        PRhs node3 = (PRhs) pop();
        TEqual node2 = (TEqual) pop();
        PVarname node1 = (PVarname) pop();
        ADirectModifyExpression node = new ADirectModifyExpression(node1, node2, node3);
        return node;
    }

    Node new248()
    {
        PRhs node6 = (PRhs) pop();
        TEqual node5 = (TEqual) pop();
        TRPar node4 = (TRPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TStar node2 = (TStar) pop();
        TLPar node1 = (TLPar) pop();
        AIndirectModifyExpression node = new AIndirectModifyExpression(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new249()
    {
        TRPar node5 = (TRPar) pop();
        PValue node4 = (PValue) pop();
        PRelop node3 = (PRelop) pop();
        PValue node2 = (PValue) pop();
        TLPar node1 = (TLPar) pop();
        ARelConditionalExpression node = new ARelConditionalExpression(node1, node2, node3, node4, node5);
        return node;
    }

    Node new250()
    {
        PValue node1 = (PValue) pop();
        AValueConditionalExpression node = new AValueConditionalExpression(node1);
        return node;
    }

    Node new251()
    {
        TRBrace node4 = (TRBrace) pop();
        PDefaultStatement node3 = (PDefaultStatement) pop();
        XPCaseStatement node2 = (XPCaseStatement) pop();
        TLBrace node1 = (TLBrace) pop();
        ACaseStatements node = new ACaseStatements(node1, node2, node3, node4);
        return node;
    }

    Node new252()
    {
        PCaseStatement node2 = (PCaseStatement) pop();
        XPCaseStatement node1 = (XPCaseStatement) pop();
        X1PCaseStatement node = new X1PCaseStatement(node1, node2);
        return node;
    }

    Node new253()
    {
        PCaseStatement node1 = (PCaseStatement) pop();
        X2PCaseStatement node = new X2PCaseStatement(node1);
        return node;
    }

    Node new254()
    {
        TRBrace node7 = (TRBrace) pop();
        PStopStatement node6 = (PStopStatement) pop();
        XPStatement node5 = null;
        TLBrace node4 = (TLBrace) pop();
        TColon node3 = (TColon) pop();
        PConstant node2 = (PConstant) pop();
        TCase node1 = (TCase) pop();
        ABodyCaseStatement node = new ABodyCaseStatement(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new255()
    {
        TRBrace node7 = (TRBrace) pop();
        PStopStatement node6 = (PStopStatement) pop();
        XPStatement node5 = (XPStatement) pop();
        TLBrace node4 = (TLBrace) pop();
        TColon node3 = (TColon) pop();
        PConstant node2 = (PConstant) pop();
        TCase node1 = (TCase) pop();
        ABodyCaseStatement node = new ABodyCaseStatement(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new256()
    {
        TColon node3 = (TColon) pop();
        PConstant node2 = (PConstant) pop();
        TCase node1 = (TCase) pop();
        AEmptyCaseStatement node = new AEmptyCaseStatement(node1, node2, node3);
        return node;
    }

    Node new257()
    {
        XPDeadCode node3 = null;
        TSemicolon node2 = (TSemicolon) pop();
        TBreak node1 = (TBreak) pop();
        ABreakStopStatement node = new ABreakStopStatement(node1, node2, node3);
        return node;
    }

    Node new258()
    {
        XPDeadCode node3 = (XPDeadCode) pop();
        TSemicolon node2 = (TSemicolon) pop();
        TBreak node1 = (TBreak) pop();
        ABreakStopStatement node = new ABreakStopStatement(node1, node2, node3);
        return node;
    }

    Node new259()
    {
        PDeadCode node2 = (PDeadCode) pop();
        XPDeadCode node1 = (XPDeadCode) pop();
        X1PDeadCode node = new X1PDeadCode(node1, node2);
        return node;
    }

    Node new260()
    {
        PDeadCode node1 = (PDeadCode) pop();
        X2PDeadCode node = new X2PDeadCode(node1);
        return node;
    }

    Node new261()
    {
        XPDeadCode node3 = null;
        TSemicolon node2 = (TSemicolon) pop();
        TContinue node1 = (TContinue) pop();
        AContinueStopStatement node = new AContinueStopStatement(node1, node2, node3);
        return node;
    }

    Node new262()
    {
        XPDeadCode node3 = (XPDeadCode) pop();
        TSemicolon node2 = (TSemicolon) pop();
        TContinue node1 = (TContinue) pop();
        AContinueStopStatement node = new AContinueStopStatement(node1, node2, node3);
        return node;
    }

    Node new263()
    {
        XPDeadCode node3 = null;
        TSemicolon node2 = (TSemicolon) pop();
        TReturn node1 = (TReturn) pop();
        AReturnStopStatement node = new AReturnStopStatement(node1, node2, node3);
        return node;
    }

    Node new264()
    {
        XPDeadCode node3 = (XPDeadCode) pop();
        TSemicolon node2 = (TSemicolon) pop();
        TReturn node1 = (TReturn) pop();
        AReturnStopStatement node = new AReturnStopStatement(node1, node2, node3);
        return node;
    }

    Node new265()
    {
        XPDeadCode node4 = null;
        TSemicolon node3 = (TSemicolon) pop();
        PValue node2 = (PValue) pop();
        TReturn node1 = (TReturn) pop();
        AReturnValueStopStatement node = new AReturnValueStopStatement(node1, node2, node3, node4);
        return node;
    }

    Node new266()
    {
        XPDeadCode node4 = (XPDeadCode) pop();
        TSemicolon node3 = (TSemicolon) pop();
        PValue node2 = (PValue) pop();
        TReturn node1 = (TReturn) pop();
        AReturnValueStopStatement node = new AReturnValueStopStatement(node1, node2, node3, node4);
        return node;
    }

    Node new267()
    {
        XPDeadCode node6 = null;
        TSemicolon node5 = (TSemicolon) pop();
        TRPar node4 = (TRPar) pop();
        PValue node3 = (PValue) pop();
        TLPar node2 = (TLPar) pop();
        TReturn node1 = (TReturn) pop();
        AReturnParStopStatement node = new AReturnParStopStatement(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new268()
    {
        XPDeadCode node6 = (XPDeadCode) pop();
        TSemicolon node5 = (TSemicolon) pop();
        TRPar node4 = (TRPar) pop();
        PValue node3 = (PValue) pop();
        TLPar node2 = (TLPar) pop();
        TReturn node1 = (TReturn) pop();
        AReturnParStopStatement node = new AReturnParStopStatement(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new269()
    {
        PStatement node1 = (PStatement) pop();
        ADead1DeadCode node = new ADead1DeadCode(node1);
        return node;
    }

    Node new270()
    {
        TSemicolon node2 = (TSemicolon) pop();
        TBreak node1 = (TBreak) pop();
        ADead2DeadCode node = new ADead2DeadCode(node1, node2);
        return node;
    }

    Node new271()
    {
        TSemicolon node2 = (TSemicolon) pop();
        TContinue node1 = (TContinue) pop();
        ADead3DeadCode node = new ADead3DeadCode(node1, node2);
        return node;
    }

    Node new272()
    {
        TSemicolon node2 = (TSemicolon) pop();
        TReturn node1 = (TReturn) pop();
        ADead4DeadCode node = new ADead4DeadCode(node1, node2);
        return node;
    }

    Node new273()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PValue node2 = (PValue) pop();
        TReturn node1 = (TReturn) pop();
        ADead5DeadCode node = new ADead5DeadCode(node1, node2, node3);
        return node;
    }

    Node new274()
    {
        TSemicolon node5 = (TSemicolon) pop();
        TRPar node4 = (TRPar) pop();
        PValue node3 = (PValue) pop();
        TLPar node2 = (TLPar) pop();
        TReturn node1 = (TReturn) pop();
        ADead6DeadCode node = new ADead6DeadCode(node1, node2, node3, node4, node5);
        return node;
    }

    Node new275()
    {
        TRBrace node6 = (TRBrace) pop();
        PStopStatement node5 = (PStopStatement) pop();
        XPStatement node4 = null;
        TLBrace node3 = (TLBrace) pop();
        TColon node2 = (TColon) pop();
        TDefault node1 = (TDefault) pop();
        ABodyDefaultStatement node = new ABodyDefaultStatement(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new276()
    {
        TRBrace node6 = (TRBrace) pop();
        PStopStatement node5 = (PStopStatement) pop();
        XPStatement node4 = (XPStatement) pop();
        TLBrace node3 = (TLBrace) pop();
        TColon node2 = (TColon) pop();
        TDefault node1 = (TDefault) pop();
        ABodyDefaultStatement node = new ABodyDefaultStatement(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new277()
    {
        TColon node2 = (TColon) pop();
        TDefault node1 = (TDefault) pop();
        AEmptyDefaultStatement node = new AEmptyDefaultStatement(node1, node2);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {58, SHIFT, 1}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 11}, {69, SHIFT, 12}, {70, SHIFT, 13}, {72, SHIFT, 14}, },
			{{-1, ERROR, 1}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 45}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 35}, {61, SHIFT, 47}, },
			{{-1, REDUCE, 42}, {61, SHIFT, 48}, {65, SHIFT, 49}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 40}, {60, SHIFT, 50}, {61, SHIFT, 51}, {62, SHIFT, 52}, {63, SHIFT, 53}, },
			{{-1, REDUCE, 49}, {60, SHIFT, 54}, {61, SHIFT, 55}, {62, SHIFT, 56}, {63, SHIFT, 57}, },
			{{-1, ERROR, 11}, {72, SHIFT, 58}, },
			{{-1, ERROR, 12}, {72, SHIFT, 59}, },
			{{-1, ERROR, 13}, {72, SHIFT, 60}, },
			{{-1, ERROR, 14}, {4, SHIFT, 61}, {10, SHIFT, 62}, {72, SHIFT, 63}, },
			{{-1, ERROR, 15}, {77, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 18}, {4, SHIFT, 61}, {10, SHIFT, 62}, {72, SHIFT, 63}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 1}, {58, SHIFT, 1}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 11}, {69, SHIFT, 12}, {70, SHIFT, 13}, {72, SHIFT, 14}, },
			{{-1, ERROR, 42}, {72, SHIFT, 76}, },
			{{-1, ERROR, 43}, {72, SHIFT, 77}, },
			{{-1, ERROR, 44}, {72, SHIFT, 78}, },
			{{-1, ERROR, 45}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, ERROR, 46}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 36}, {61, SHIFT, 84}, },
			{{-1, REDUCE, 43}, {61, SHIFT, 85}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 47}, {61, SHIFT, 86}, },
			{{-1, REDUCE, 51}, {61, SHIFT, 87}, },
			{{-1, REDUCE, 56}, {8, SHIFT, 88}, },
			{{-1, REDUCE, 57}, {8, SHIFT, 89}, },
			{{-1, REDUCE, 58}, {8, SHIFT, 90}, },
			{{-1, ERROR, 61}, {10, SHIFT, 62}, },
			{{-1, ERROR, 62}, {4, SHIFT, 61}, {10, SHIFT, 62}, {72, SHIFT, 63}, },
			{{-1, REDUCE, 63}, {4, SHIFT, 97}, {6, SHIFT, 98}, },
			{{-1, ERROR, 64}, {1, SHIFT, 99}, {3, SHIFT, 100}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 64}, {6, SHIFT, 103}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 69}, {3, SHIFT, 104}, {8, SHIFT, 105}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 117}, {6, SHIFT, 107}, },
			{{-1, ERROR, 73}, {1, SHIFT, 99}, {3, SHIFT, 108}, },
			{{-1, ERROR, 74}, {3, SHIFT, 110}, {8, SHIFT, 105}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 79}, {10, SHIFT, 80}, },
			{{-1, ERROR, 80}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 63}, {6, SHIFT, 98}, },
			{{-1, ERROR, 82}, {3, SHIFT, 112}, },
			{{-1, ERROR, 83}, {3, SHIFT, 113}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 88}, {9, SHIFT, 114}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, },
			{{-1, ERROR, 89}, {9, SHIFT, 118}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, },
			{{-1, ERROR, 90}, {72, SHIFT, 120}, },
			{{-1, ERROR, 91}, {5, SHIFT, 122}, },
			{{-1, ERROR, 92}, {5, SHIFT, 123}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 97}, {5, SHIFT, 124}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 125}, },
			{{-1, ERROR, 98}, {7, SHIFT, 129}, {75, SHIFT, 130}, },
			{{-1, ERROR, 99}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 102}, {1, SHIFT, 99}, {3, SHIFT, 132}, },
			{{-1, ERROR, 103}, {7, SHIFT, 134}, {75, SHIFT, 135}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 105}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 138}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 151}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 134}, },
			{{-1, ERROR, 107}, {7, SHIFT, 172}, {75, SHIFT, 173}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 109}, {1, SHIFT, 99}, {3, SHIFT, 174}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 114}, {3, SHIFT, 175}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 116}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, ERROR, 117}, {9, SHIFT, 177}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, },
			{{-1, ERROR, 118}, {3, SHIFT, 179}, },
			{{-1, ERROR, 119}, {9, SHIFT, 180}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, },
			{{-1, REDUCE, 107}, {22, SHIFT, 181}, },
			{{-1, ERROR, 121}, {1, SHIFT, 182}, {9, SHIFT, 183}, },
			{{-1, ERROR, 122}, {4, SHIFT, 186}, {6, SHIFT, 187}, },
			{{-1, ERROR, 123}, {4, SHIFT, 188}, {6, SHIFT, 189}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 82}, {4, SHIFT, 190}, {6, SHIFT, 191}, {10, SHIFT, 192}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 79}, {4, SHIFT, 190}, {6, SHIFT, 191}, {10, SHIFT, 192}, {72, SHIFT, 81}, },
			{{-1, ERROR, 127}, {5, SHIFT, 201}, },
			{{-1, REDUCE, 74}, {1, SHIFT, 202}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 130}, {7, SHIFT, 205}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 135}, {7, SHIFT, 206}, },
			{{-1, ERROR, 136}, {10, SHIFT, 207}, {13, SHIFT, 208}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 209}, },
			{{-1, ERROR, 137}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 213}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 239}, },
			{{-1, REDUCE, 240}, },
			{{-1, REDUCE, 241}, },
			{{-1, REDUCE, 242}, },
			{{-1, ERROR, 143}, {4, SHIFT, 217}, },
			{{-1, ERROR, 144}, {4, SHIFT, 218}, },
			{{-1, ERROR, 145}, {4, SHIFT, 219}, },
			{{-1, ERROR, 146}, {8, SHIFT, 137}, },
			{{-1, ERROR, 147}, {4, SHIFT, 221}, },
			{{-1, ERROR, 148}, {3, SHIFT, 222}, },
			{{-1, ERROR, 149}, {3, SHIFT, 223}, },
			{{-1, ERROR, 150}, {3, SHIFT, 224}, {4, SHIFT, 225}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 222}, {0, SHIFT, 230}, {4, SHIFT, 231}, {6, SHIFT, 232}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 188}, },
			{{-1, ERROR, 156}, {4, SHIFT, 79}, {10, SHIFT, 80}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 160}, {3, SHIFT, 237}, },
			{{-1, REDUCE, 219}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 218}, {22, SHIFT, 238}, },
			{{-1, REDUCE, 220}, },
			{{-1, REDUCE, 221}, },
			{{-1, REDUCE, 167}, },
			{{-1, ERROR, 167}, {72, SHIFT, 239}, {73, SHIFT, 240}, {74, SHIFT, 241}, {75, SHIFT, 242}, {76, SHIFT, 243}, },
			{{-1, REDUCE, 168}, },
			{{-1, ERROR, 169}, {9, SHIFT, 244}, },
			{{-1, ERROR, 170}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 245}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 151}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 171}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 249}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 173}, {7, SHIFT, 252}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 176}, {3, SHIFT, 253}, },
			{{-1, ERROR, 177}, {3, SHIFT, 254}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 180}, {3, SHIFT, 255}, },
			{{-1, ERROR, 181}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 182}, {72, SHIFT, 120}, },
			{{-1, ERROR, 183}, {3, SHIFT, 258}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 185}, {1, SHIFT, 182}, {9, SHIFT, 259}, },
			{{-1, ERROR, 186}, {5, SHIFT, 261}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 125}, },
			{{-1, ERROR, 187}, {7, SHIFT, 263}, {75, SHIFT, 264}, },
			{{-1, ERROR, 188}, {5, SHIFT, 265}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 125}, },
			{{-1, ERROR, 189}, {7, SHIFT, 267}, {75, SHIFT, 268}, },
			{{-1, ERROR, 190}, {10, SHIFT, 192}, },
			{{-1, ERROR, 191}, {7, SHIFT, 270}, {75, SHIFT, 271}, },
			{{-1, REDUCE, 86}, {4, SHIFT, 190}, {6, SHIFT, 191}, {10, SHIFT, 192}, {72, SHIFT, 81}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 89}, {6, SHIFT, 274}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 202}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 125}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 75}, {1, SHIFT, 202}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 207}, {72, SHIFT, 277}, },
			{{-1, ERROR, 208}, {4, SHIFT, 278}, {72, SHIFT, 279}, },
			{{-1, REDUCE, 245}, {4, SHIFT, 281}, {6, SHIFT, 191}, {10, SHIFT, 282}, },
			{{-1, REDUCE, 243}, {4, SHIFT, 281}, {6, SHIFT, 191}, {10, SHIFT, 282}, },
			{{-1, ERROR, 211}, {72, SHIFT, 285}, },
			{{-1, ERROR, 212}, {5, SHIFT, 286}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 222}, {0, SHIFT, 230}, {4, SHIFT, 287}, {6, SHIFT, 232}, },
			{{-1, ERROR, 215}, {9, SHIFT, 288}, },
			{{-1, ERROR, 216}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 289}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 217}, {4, SHIFT, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 218}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 219}, {4, SHIFT, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 220}, {51, SHIFT, 296}, },
			{{-1, ERROR, 221}, {3, SHIFT, 297}, {4, SHIFT, 136}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 261}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 257}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 263}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 225}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 180}, },
			{{-1, ERROR, 227}, {3, SHIFT, 308}, },
			{{-1, REDUCE, 181}, },
			{{-1, ERROR, 229}, {73, SHIFT, 240}, {74, SHIFT, 241}, {75, SHIFT, 242}, {76, SHIFT, 243}, },
			{{-1, ERROR, 230}, {72, SHIFT, 309}, },
			{{-1, ERROR, 231}, {5, SHIFT, 310}, {10, SHIFT, 80}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 232}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 225}, },
			{{-1, REDUCE, 229}, },
			{{-1, REDUCE, 223}, {6, SHIFT, 232}, },
			{{-1, REDUCE, 230}, {0, SHIFT, 230}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 238}, {4, SHIFT, 316}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 172}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 187}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 137}, },
			{{-1, ERROR, 247}, {9, SHIFT, 324}, },
			{{-1, ERROR, 248}, {4, SHIFT, 136}, {8, SHIFT, 137}, {9, SHIFT, 325}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 140}, },
			{{-1, ERROR, 251}, {9, SHIFT, 327}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 259}, {3, SHIFT, 328}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 262}, {5, SHIFT, 329}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 264}, {7, SHIFT, 330}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 266}, {5, SHIFT, 331}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 268}, {7, SHIFT, 332}, },
			{{-1, ERROR, 269}, {5, SHIFT, 333}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 271}, {7, SHIFT, 334}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 274}, {7, SHIFT, 335}, {75, SHIFT, 336}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 277}, {5, SHIFT, 337}, },
			{{-1, ERROR, 278}, {10, SHIFT, 338}, },
			{{-1, REDUCE, 222}, {0, SHIFT, 230}, {6, SHIFT, 232}, },
			{{-1, ERROR, 280}, {5, SHIFT, 339}, },
			{{-1, ERROR, 281}, {10, SHIFT, 282}, },
			{{-1, REDUCE, 86}, {4, SHIFT, 281}, {6, SHIFT, 191}, {10, SHIFT, 282}, },
			{{-1, REDUCE, 246}, },
			{{-1, REDUCE, 244}, },
			{{-1, ERROR, 285}, {5, SHIFT, 340}, },
			{{-1, ERROR, 286}, {4, SHIFT, 278}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 279}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 287}, {5, SHIFT, 310}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 148}, },
			{{-1, ERROR, 290}, {9, SHIFT, 343}, },
			{{-1, ERROR, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 250}, },
			{{-1, ERROR, 293}, {5, SHIFT, 345}, },
			{{-1, ERROR, 294}, {5, SHIFT, 346}, },
			{{-1, ERROR, 295}, {5, SHIFT, 347}, },
			{{-1, ERROR, 296}, {4, SHIFT, 348}, },
			{{-1, ERROR, 297}, {3, SHIFT, 349}, {4, SHIFT, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 298}, {3, SHIFT, 351}, },
			{{-1, ERROR, 299}, {3, SHIFT, 352}, },
			{{-1, ERROR, 300}, {3, SHIFT, 353}, },
			{{-1, ERROR, 301}, {3, SHIFT, 354}, {4, SHIFT, 355}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 269}, },
			{{-1, REDUCE, 260}, },
			{{-1, REDUCE, 262}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 258}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 264}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 307}, {5, SHIFT, 358}, },
			{{-1, REDUCE, 265}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 231}, },
			{{-1, REDUCE, 232}, },
			{{-1, REDUCE, 234}, {1, SHIFT, 360}, },
			{{-1, ERROR, 312}, {5, SHIFT, 363}, },
			{{-1, ERROR, 313}, {7, SHIFT, 364}, },
			{{-1, REDUCE, 224}, },
			{{-1, REDUCE, 228}, },
			{{-1, ERROR, 316}, {10, SHIFT, 365}, {13, SHIFT, 366}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 367}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 247}, },
			{{-1, REDUCE, 176}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 210}, },
			{{-1, REDUCE, 218}, },
			{{-1, REDUCE, 213}, },
			{{-1, ERROR, 323}, {72, SHIFT, 371}, {73, SHIFT, 240}, {74, SHIFT, 241}, {75, SHIFT, 242}, {76, SHIFT, 243}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 142}, },
			{{-1, ERROR, 326}, {9, SHIFT, 372}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 333}, {4, SHIFT, 373}, {6, SHIFT, 374}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 336}, {7, SHIFT, 375}, },
			{{-1, REDUCE, 170}, {0, SHIFT, 230}, {22, SHIFT, 376}, },
			{{-1, ERROR, 338}, {72, SHIFT, 378}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 150}, },
			{{-1, ERROR, 344}, {23, SHIFT, 379}, {24, SHIFT, 380}, {25, SHIFT, 381}, {26, SHIFT, 382}, {27, SHIFT, 383}, {28, SHIFT, 384}, },
			{{-1, ERROR, 345}, {3, SHIFT, 386}, {8, SHIFT, 137}, },
			{{-1, ERROR, 346}, {8, SHIFT, 388}, },
			{{-1, ERROR, 347}, {8, SHIFT, 137}, },
			{{-1, ERROR, 348}, {4, SHIFT, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 349}, {4, SHIFT, 136}, {5, SHIFT, 392}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 350}, {3, SHIFT, 394}, },
			{{-1, ERROR, 351}, {3, SHIFT, 395}, {4, SHIFT, 291}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 271}, },
			{{-1, REDUCE, 270}, },
			{{-1, REDUCE, 272}, },
			{{-1, ERROR, 355}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 356}, {3, SHIFT, 398}, },
			{{-1, REDUCE, 259}, },
			{{-1, ERROR, 358}, {3, SHIFT, 399}, },
			{{-1, REDUCE, 266}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 360}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 237}, },
			{{-1, REDUCE, 235}, {1, SHIFT, 360}, },
			{{-1, REDUCE, 233}, },
			{{-1, REDUCE, 226}, },
			{{-1, ERROR, 365}, {72, SHIFT, 402}, },
			{{-1, ERROR, 366}, {4, SHIFT, 278}, {72, SHIFT, 279}, },
			{{-1, REDUCE, 245}, {4, SHIFT, 281}, {6, SHIFT, 191}, {10, SHIFT, 404}, {11, SHIFT, 405}, {12, SHIFT, 406}, {13, SHIFT, 407}, {14, SHIFT, 408}, {15, SHIFT, 409}, {16, SHIFT, 410}, {18, SHIFT, 411}, {20, SHIFT, 412}, {23, SHIFT, 379}, {24, SHIFT, 380}, {25, SHIFT, 381}, {26, SHIFT, 382}, {27, SHIFT, 383}, {28, SHIFT, 384}, {32, SHIFT, 413}, {33, SHIFT, 414}, {34, SHIFT, 415}, {35, SHIFT, 416}, },
			{{-1, ERROR, 368}, {10, SHIFT, 419}, {11, SHIFT, 405}, {12, SHIFT, 406}, {13, SHIFT, 407}, {14, SHIFT, 408}, {15, SHIFT, 409}, {16, SHIFT, 410}, {18, SHIFT, 411}, {20, SHIFT, 412}, {23, SHIFT, 379}, {24, SHIFT, 380}, {25, SHIFT, 381}, {26, SHIFT, 382}, {27, SHIFT, 383}, {28, SHIFT, 384}, {32, SHIFT, 413}, {33, SHIFT, 414}, {34, SHIFT, 415}, {35, SHIFT, 416}, },
			{{-1, ERROR, 369}, {72, SHIFT, 421}, {73, SHIFT, 240}, {74, SHIFT, 241}, {75, SHIFT, 242}, {76, SHIFT, 243}, },
			{{-1, ERROR, 370}, {5, SHIFT, 422}, },
			{{-1, REDUCE, 214}, },
			{{-1, REDUCE, 146}, },
			{{-1, ERROR, 373}, {5, SHIFT, 423}, {59, SHIFT, 2}, {60, SHIFT, 3}, {61, SHIFT, 4}, {62, SHIFT, 5}, {63, SHIFT, 6}, {64, SHIFT, 7}, {65, SHIFT, 8}, {66, SHIFT, 9}, {67, SHIFT, 10}, {68, SHIFT, 42}, {69, SHIFT, 43}, {70, SHIFT, 44}, {72, SHIFT, 125}, },
			{{-1, ERROR, 374}, {7, SHIFT, 425}, {75, SHIFT, 426}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 376}, {4, SHIFT, 316}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 227}, {0, SHIFT, 230}, },
			{{-1, ERROR, 378}, {5, SHIFT, 428}, },
			{{-1, REDUCE, 204}, },
			{{-1, REDUCE, 205}, },
			{{-1, REDUCE, 206}, },
			{{-1, REDUCE, 207}, },
			{{-1, REDUCE, 208}, },
			{{-1, REDUCE, 209}, },
			{{-1, ERROR, 385}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 386}, {49, SHIFT, 430}, },
			{{-1, REDUCE, 153}, {49, SHIFT, 431}, },
			{{-1, ERROR, 388}, {46, SHIFT, 432}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 156}, },
			{{-1, ERROR, 391}, {5, SHIFT, 435}, },
			{{-1, ERROR, 392}, {8, SHIFT, 137}, },
			{{-1, ERROR, 393}, {5, SHIFT, 437}, },
			{{-1, ERROR, 394}, {4, SHIFT, 136}, {5, SHIFT, 438}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 395}, {4, SHIFT, 136}, {5, SHIFT, 440}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 396}, {3, SHIFT, 442}, },
			{{-1, ERROR, 397}, {5, SHIFT, 443}, },
			{{-1, REDUCE, 273}, },
			{{-1, REDUCE, 267}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 238}, },
			{{-1, REDUCE, 236}, },
			{{-1, ERROR, 402}, {5, SHIFT, 445}, },
			{{-1, ERROR, 403}, {5, SHIFT, 446}, },
			{{-1, REDUCE, 191}, {4, SHIFT, 281}, {5, REDUCE, 86}, {6, SHIFT, 191}, {10, SHIFT, 282}, },
			{{-1, REDUCE, 192}, },
			{{-1, REDUCE, 193}, },
			{{-1, REDUCE, 194}, },
			{{-1, REDUCE, 195}, },
			{{-1, REDUCE, 196}, },
			{{-1, REDUCE, 197}, },
			{{-1, REDUCE, 198}, },
			{{-1, REDUCE, 199}, },
			{{-1, REDUCE, 200}, },
			{{-1, REDUCE, 201}, },
			{{-1, REDUCE, 202}, },
			{{-1, REDUCE, 203}, },
			{{-1, ERROR, 417}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 190}, },
			{{-1, REDUCE, 191}, },
			{{-1, ERROR, 420}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 226}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 421}, {5, SHIFT, 449}, },
			{{-1, ERROR, 422}, {4, SHIFT, 278}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 279}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 424}, {5, SHIFT, 452}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 426}, {7, SHIFT, 453}, },
			{{-1, REDUCE, 248}, },
			{{-1, ERROR, 428}, {0, SHIFT, 230}, },
			{{-1, ERROR, 429}, {5, SHIFT, 454}, },
			{{-1, ERROR, 430}, {8, SHIFT, 137}, },
			{{-1, ERROR, 431}, {8, SHIFT, 137}, },
			{{-1, ERROR, 432}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 253}, },
			{{-1, ERROR, 434}, {46, SHIFT, 432}, {47, SHIFT, 458}, },
			{{-1, ERROR, 435}, {3, SHIFT, 461}, },
			{{-1, REDUCE, 158}, },
			{{-1, ERROR, 437}, {8, SHIFT, 137}, },
			{{-1, ERROR, 438}, {8, SHIFT, 137}, },
			{{-1, ERROR, 439}, {5, SHIFT, 464}, },
			{{-1, ERROR, 440}, {8, SHIFT, 137}, },
			{{-1, ERROR, 441}, {5, SHIFT, 466}, },
			{{-1, ERROR, 442}, {4, SHIFT, 136}, {5, SHIFT, 467}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 443}, {3, SHIFT, 469}, },
			{{-1, REDUCE, 268}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 299}, {56, SHIFT, 300}, {57, SHIFT, 301}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 211}, {0, SHIFT, 230}, },
			{{-1, REDUCE, 212}, },
			{{-1, ERROR, 447}, {5, SHIFT, 470}, },
			{{-1, ERROR, 448}, {5, SHIFT, 471}, },
			{{-1, REDUCE, 215}, },
			{{-1, REDUCE, 217}, },
			{{-1, REDUCE, 216}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 249}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 457}, {2, SHIFT, 472}, },
			{{-1, ERROR, 458}, {2, SHIFT, 473}, },
			{{-1, REDUCE, 252}, },
			{{-1, ERROR, 460}, {9, SHIFT, 474}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 160}, },
			{{-1, ERROR, 464}, {8, SHIFT, 137}, },
			{{-1, REDUCE, 159}, },
			{{-1, ERROR, 466}, {8, SHIFT, 137}, },
			{{-1, ERROR, 467}, {8, SHIFT, 137}, },
			{{-1, ERROR, 468}, {5, SHIFT, 478}, },
			{{-1, REDUCE, 274}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 179}, },
			{{-1, REDUCE, 256}, {8, SHIFT, 479}, },
			{{-1, REDUCE, 277}, {8, SHIFT, 480}, },
			{{-1, REDUCE, 251}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 161}, },
			{{-1, ERROR, 478}, {8, SHIFT, 137}, },
			{{-1, ERROR, 479}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 480}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 165}, },
			{{-1, ERROR, 482}, {9, SHIFT, 486}, },
			{{-1, ERROR, 483}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, ERROR, 484}, {9, SHIFT, 488}, },
			{{-1, ERROR, 485}, {4, SHIFT, 136}, {8, SHIFT, 137}, {14, SHIFT, 139}, {15, SHIFT, 140}, {17, SHIFT, 141}, {18, SHIFT, 142}, {48, SHIFT, 143}, {50, SHIFT, 144}, {51, SHIFT, 145}, {52, SHIFT, 146}, {53, SHIFT, 147}, {55, SHIFT, 148}, {56, SHIFT, 149}, {57, SHIFT, 150}, {72, SHIFT, 214}, {73, SHIFT, 152}, {74, SHIFT, 153}, {75, SHIFT, 154}, {76, SHIFT, 155}, },
			{{-1, REDUCE, 254}, },
			{{-1, ERROR, 487}, {9, SHIFT, 490}, },
			{{-1, REDUCE, 275}, },
			{{-1, ERROR, 489}, {9, SHIFT, 491}, },
			{{-1, REDUCE, 255}, },
			{{-1, REDUCE, 276}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 15}, },
			{{-1, 16}, {41, 75}, },
			{{-1, 17}, },
			{{-1, 115}, {117, 178}, {119, 178}, },
			{{-1, 126}, {0, 18}, {1, 46}, {41, 18}, {88, 116}, {89, 116}, {105, 156}, {117, 116}, {119, 116}, {136, 210}, {170, 156}, {316, 210}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 64}, {18, 73}, {45, 82}, {46, 83}, {99, 131}, {116, 176}, {125, 193}, {126, 199}, {156, 73}, },
			{{-1, 65}, {61, 91}, {62, 93}, {79, 91}, {80, 93}, {190, 91}, {192, 93}, {231, 91}, },
			{{-1, 66}, {62, 94}, {80, 94}, {192, 94}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 127}, {186, 262}, {188, 266}, {373, 424}, },
			{{-1, 128}, {202, 275}, },
			{{-1, 283}, {125, 194}, {126, 200}, {210, 284}, },
			{{-1, 195}, {190, 269}, {192, 272}, {281, 269}, {282, 272}, {404, 272}, },
			{{-1, 196}, {192, 273}, {282, 273}, {404, 273}, },
			{{-1, 197}, },
			{{-1, 198}, },
			{{-1, 203}, {204, 276}, },
			{{-1, 35}, },
			{{-1, 36}, },
			{{-1, 184}, {185, 260}, },
			{{-1, 121}, {182, 257}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 69}, {18, 74}, },
			{{-1, 70}, {61, 92}, {62, 95}, },
			{{-1, 71}, {62, 96}, },
			{{-1, 72}, },
			{{-1, 39}, {105, 157}, {170, 246}, },
			{{-1, 101}, {102, 133}, {109, 133}, },
			{{-1, 40}, },
			{{-1, 106}, {74, 111}, },
			{{-1, 158}, {146, 220}, {345, 387}, {347, 390}, {392, 436}, {430, 455}, {431, 456}, {437, 462}, {438, 463}, {440, 465}, {464, 475}, {466, 476}, {467, 477}, {478, 481}, },
			{{-1, 302}, {105, 159}, {137, 159}, {170, 159}, {171, 250}, {216, 250}, {248, 250}, {479, 159}, {480, 159}, {483, 250}, {485, 250}, },
			{{-1, 160}, {221, 298}, {349, 393}, {394, 439}, {395, 441}, {442, 468}, },
			{{-1, 317}, {376, 427}, },
			{{-1, 318}, },
			{{-1, 292}, {150, 227}, {218, 294}, {225, 307}, {231, 311}, {232, 313}, {287, 311}, {291, 344}, {301, 356}, {355, 397}, {360, 400}, {385, 429}, {417, 447}, {420, 448}, },
			{{-1, 161}, {150, 228}, {181, 256}, {217, 228}, {218, 228}, {219, 228}, {225, 228}, {231, 228}, {232, 228}, {286, 341}, {287, 228}, {291, 228}, {297, 228}, {301, 228}, {316, 368}, {348, 228}, {351, 228}, {355, 228}, {360, 228}, {385, 228}, {417, 228}, {420, 228}, {422, 450}, {432, 457}, },
			{{-1, 417}, {368, 420}, },
			{{-1, 418}, {344, 385}, },
			{{-1, 319}, },
			{{-1, 162}, {238, 320}, {376, 320}, },
			{{-1, 163}, {208, 280}, {238, 321}, {286, 342}, {366, 403}, {376, 321}, {422, 451}, },
			{{-1, 164}, },
			{{-1, 233}, {235, 314}, },
			{{-1, 165}, },
			{{-1, 234}, {236, 315}, {377, 315}, },
			{{-1, 166}, {238, 322}, {376, 322}, },
			{{-1, 312}, },
			{{-1, 361}, {362, 401}, },
			{{-1, 167}, {136, 211}, {150, 229}, {181, 229}, {217, 229}, {218, 229}, {219, 229}, {225, 229}, {231, 229}, {232, 229}, {238, 323}, {286, 229}, {287, 229}, {291, 229}, {297, 229}, {301, 229}, {316, 369}, {348, 229}, {351, 229}, {355, 229}, {360, 229}, {376, 323}, {385, 229}, {417, 229}, {420, 229}, {422, 229}, {432, 229}, },
			{{-1, 212}, {316, 370}, },
			{{-1, 168}, },
			{{-1, 293}, {219, 295}, {297, 350}, {348, 391}, {351, 396}, },
			{{-1, 389}, },
			{{-1, 433}, {434, 459}, },
			{{-1, 169}, {137, 215}, {170, 247}, {171, 251}, {216, 290}, {248, 326}, {479, 482}, {480, 484}, {483, 487}, {485, 489}, },
			{{-1, 303}, {304, 357}, {305, 357}, {306, 357}, {359, 357}, {444, 357}, },
			{{-1, 460}, },
			{{-1, 41}, },
			{{-1, 117}, {89, 119}, },
			{{-1, 204}, },
			{{-1, 185}, },
			{{-1, 102}, {73, 109}, },
			{{-1, 170}, },
			{{-1, 171}, {137, 216}, {170, 248}, {479, 483}, {480, 485}, },
			{{-1, 235}, },
			{{-1, 236}, {337, 377}, {428, 377}, {445, 377}, },
			{{-1, 362}, },
			{{-1, 434}, },
			{{-1, 304}, {223, 305}, {224, 306}, {308, 359}, {399, 444}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'typedef', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier, EOF",
			"expecting: 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier",
			"expecting: ',', '(', ')', '[', '*', identifier",
			"expecting: ',', '(', ')', '[', '*', 'int', identifier",
			"expecting: ',', '(', ')', '[', '*', 'int', 'double', identifier",
			"expecting: ',', '(', ')', '[', '*', 'char', 'int', 'short', 'long', identifier",
			"expecting: identifier",
			"expecting: '(', '*', identifier",
			"expecting: EOF",
			"expecting: '(', '{', '*', identifier",
			"expecting: '*'",
			"expecting: ',', ';', '(', ')', '['",
			"expecting: ',', ';'",
			"expecting: ',', ';', ')'",
			"expecting: ',', ';', ')', '['",
			"expecting: ';', '{'",
			"expecting: ';', ')', '[', '{'",
			"expecting: ';'",
			"expecting: '}', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum'",
			"expecting: ')'",
			"expecting: ';', ')', '{'",
			"expecting: ')', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier",
			"expecting: ']', integer constant",
			"expecting: '(', '{', '}', '+', '-', '~', '!', 'if', 'switch', 'while', 'do', 'for', 'continue', 'break', 'return', 'typedef', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier, floating constant, string litteral, integer constant, character constant, EOF",
			"expecting: '(', '{', '}', '+', '-', '~', '!', 'if', 'switch', 'while', 'do', 'for', 'continue', 'break', 'return', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: ',', '}', '='",
			"expecting: ',', '}'",
			"expecting: '(', '['",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: '*', '&', '+', '-', '~', '!', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier",
			"expecting: '(', '{', '}', '+', '-', '~', '!', 'if', 'switch', 'while', 'do', 'for', 'continue', 'break', 'return', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '('",
			"expecting: '{'",
			"expecting: ';', '(', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '.', ';', '(', '[', '*', '=', identifier",
			"expecting: ',', ':', ';', ')', ']', '}', '*', '/', '%', '&', '+', '-', '^', '!', '|', '==', '!=', '<', '<=', '>', '>=', '<<', '>>', '&&', '||'",
			"expecting: ';', ')'",
			"expecting: ';', ')', '='",
			"expecting: '}'",
			"expecting: '+', '-', '~', '!', floating constant, string litteral, integer constant, character constant",
			"expecting: ',', ')', '['",
			"expecting: '(', identifier",
			"expecting: '(', ')', '[', '*'",
			"expecting: '(', '{', '}', '+', '-', '~', '!', 'if', 'else', 'switch', 'while', 'do', 'for', 'continue', 'break', 'return', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '.', ';', '(', ')', '[', '='",
			"expecting: '(', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: 'while'",
			"expecting: ',', ';', ')', ']', '==', '!=', '<', '<=', '>', '>='",
			"expecting: floating constant, string litteral, integer constant, character constant",
			"expecting: ')', '*', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: ';', ')', '[', '='",
			"expecting: '.', ';', ')', '='",
			"expecting: '.', ';', ')', '['",
			"expecting: ')', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '*', '&', '+', '-', '~', '!', 'void', 'char', 'int', 'short', 'long', 'float', 'double', 'signed', 'unsigned', 'struct', 'union', 'enum', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '==', '!=', '<', '<=', '>', '>='",
			"expecting: '(', ')', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '(', ')', '[', '*', '/', '%', '&', '+', '-', '^', '!', '|', '==', '!=', '<', '<=', '>', '>=', '<<', '>>', '&&', '||'",
			"expecting: '*', '/', '%', '&', '+', '-', '^', '!', '|', '==', '!=', '<', '<=', '>', '>=', '<<', '>>', '&&', '||'",
			"expecting: 'else'",
			"expecting: 'case'",
			"expecting: '(', ')', '[', '*', '+', '-', '~', '!', identifier, floating constant, string litteral, integer constant, character constant",
			"expecting: '.'",
			"expecting: 'case', 'default'",
			"expecting: '.', ';', ')'",
			"expecting: ':'",
			"expecting: '{', 'case', 'default'",
			"expecting: '{', '}'",
			"expecting: '(', '{', '+', '-', '~', '!', 'if', 'switch', 'while', 'do', 'for', 'continue', 'break', 'return', identifier, floating constant, string litteral, integer constant, character constant",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 2, 3, 4, 2, 2, 5, 5, 6, 6, 6, 7, 8, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7, 2, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 9, 9, 9, 10, 7, 11, 12, 13, 13, 14, 13, 15, 15, 15, 16, 12, 15, 0, 2, 2, 2, 10, 7, 14, 17, 17, 2, 2, 2, 2, 18, 18, 6, 19, 19, 13, 13, 20, 20, 21, 22, 7, 23, 12, 12, 22, 0, 24, 0, 22, 23, 12, 0, 0, 0, 0, 17, 18, 7, 18, 17, 18, 25, 26, 27, 27, 20, 2, 2, 19, 28, 14, 29, 12, 23, 12, 14, 29, 30, 31, 0, 32, 32, 32, 32, 33, 33, 33, 34, 33, 17, 17, 35, 36, 37, 37, 37, 37, 7, 24, 31, 31, 17, 38, 38, 39, 39, 39, 38, 32, 38, 40, 24, 31, 16, 29, 23, 0, 17, 17, 18, 0, 17, 41, 6, 17, 26, 26, 21, 22, 21, 22, 10, 22, 2, 28, 28, 28, 28, 42, 28, 28, 28, 20, 1, 28, 28, 14, 14, 6, 43, 44, 44, 6, 19, 45, 46, 40, 31, 47, 48, 47, 49, 35, 31, 31, 31, 48, 50, 17, 50, 51, 6, 52, 48, 53, 54, 53, 54, 31, 47, 38, 37, 37, 37, 37, 0, 0, 24, 40, 31, 0, 31, 40, 16, 18, 0, 0, 26, 26, 0, 17, 26, 13, 19, 14, 29, 20, 19, 16, 29, 19, 42, 29, 28, 28, 22, 28, 28, 19, 10, 55, 19, 10, 44, 19, 19, 19, 47, 56, 45, 45, 40, 48, 38, 19, 19, 19, 33, 35, 17, 17, 17, 35, 31, 31, 31, 31, 31, 19, 31, 54, 38, 28, 19, 29, 53, 54, 57, 38, 38, 38, 38, 38, 38, 32, 0, 0, 40, 0, 0, 13, 14, 20, 16, 27, 42, 42, 29, 54, 6, 38, 38, 38, 38, 45, 58, 15, 34, 34, 47, 59, 17, 35, 31, 31, 31, 48, 17, 31, 17, 31, 48, 28, 28, 38, 53, 6, 43, 60, 61, 32, 19, 38, 0, 21, 22, 42, 47, 54, 19, 48, 48, 48, 48, 48, 48, 48, 62, 45, 63, 31, 31, 19, 34, 19, 59, 59, 17, 19, 31, 31, 28, 28, 19, 19, 64, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 19, 47, 28, 19, 42, 29, 38, 65, 19, 34, 34, 41, 66, 66, 17, 31, 34, 34, 19, 34, 19, 59, 17, 31, 67, 38, 19, 19, 38, 38, 38, 28, 42, 38, 31, 31, 68, 68, 66, 40, 31, 31, 31, 34, 31, 34, 34, 19, 31, 38, 38, 69, 70, 31, 31, 31, 31, 34, 71, 71, 31, 40, 71, 40, 71, 66, 40, 40, 40, 66, 40, 
        };*/
}
