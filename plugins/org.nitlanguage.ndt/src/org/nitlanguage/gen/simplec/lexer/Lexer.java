/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.lexer;

import java.io.*;
import java.util.*;
import org.nitlanguage.gen.simplec.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TDot(line, pos); }
    Token new1(int line, int pos) { return new TComma(line, pos); }
    Token new2(int line, int pos) { return new TColon(line, pos); }
    Token new3(int line, int pos) { return new TSemicolon(line, pos); }
    Token new4(int line, int pos) { return new TLPar(line, pos); }
    Token new5(int line, int pos) { return new TRPar(line, pos); }
    Token new6(int line, int pos) { return new TLBracket(line, pos); }
    Token new7(int line, int pos) { return new TRBracket(line, pos); }
    Token new8(int line, int pos) { return new TLBrace(line, pos); }
    Token new9(int line, int pos) { return new TRBrace(line, pos); }
    Token new10(int line, int pos) { return new TStar(line, pos); }
    Token new11(int line, int pos) { return new TDiv(line, pos); }
    Token new12(int line, int pos) { return new TMod(line, pos); }
    Token new13(int line, int pos) { return new TAmpersand(line, pos); }
    Token new14(int line, int pos) { return new TPlus(line, pos); }
    Token new15(int line, int pos) { return new TMinus(line, pos); }
    Token new16(int line, int pos) { return new TCaret(line, pos); }
    Token new17(int line, int pos) { return new TTilde(line, pos); }
    Token new18(int line, int pos) { return new TExclMark(line, pos); }
    Token new19(int line, int pos) { return new TQuestMark(line, pos); }
    Token new20(int line, int pos) { return new TBar(line, pos); }
    Token new21(int line, int pos) { return new TEllipsis(line, pos); }
    Token new22(int line, int pos) { return new TEqual(line, pos); }
    Token new23(int line, int pos) { return new TEq(line, pos); }
    Token new24(int line, int pos) { return new TNeq(line, pos); }
    Token new25(int line, int pos) { return new TLt(line, pos); }
    Token new26(int line, int pos) { return new TLteq(line, pos); }
    Token new27(int line, int pos) { return new TGt(line, pos); }
    Token new28(int line, int pos) { return new TGteq(line, pos); }
    Token new29(int line, int pos) { return new TArrow(line, pos); }
    Token new30(int line, int pos) { return new TPlusPlus(line, pos); }
    Token new31(int line, int pos) { return new TMinusMinus(line, pos); }
    Token new32(int line, int pos) { return new TShl(line, pos); }
    Token new33(int line, int pos) { return new TShr(line, pos); }
    Token new34(int line, int pos) { return new TAmpersandAmpersand(line, pos); }
    Token new35(int line, int pos) { return new TBarBar(line, pos); }
    Token new36(int line, int pos) { return new TStarEqual(line, pos); }
    Token new37(int line, int pos) { return new TDivEqual(line, pos); }
    Token new38(int line, int pos) { return new TModEqual(line, pos); }
    Token new39(int line, int pos) { return new TPlusEqual(line, pos); }
    Token new40(int line, int pos) { return new TMinusEqual(line, pos); }
    Token new41(int line, int pos) { return new TShlEqual(line, pos); }
    Token new42(int line, int pos) { return new TShrEqual(line, pos); }
    Token new43(int line, int pos) { return new TAmpersandEqual(line, pos); }
    Token new44(int line, int pos) { return new TCaretEqual(line, pos); }
    Token new45(int line, int pos) { return new TBarEqual(line, pos); }
    Token new46(int line, int pos) { return new TCase(line, pos); }
    Token new47(int line, int pos) { return new TDefault(line, pos); }
    Token new48(int line, int pos) { return new TIf(line, pos); }
    Token new49(int line, int pos) { return new TElse(line, pos); }
    Token new50(int line, int pos) { return new TSwitch(line, pos); }
    Token new51(int line, int pos) { return new TWhile(line, pos); }
    Token new52(int line, int pos) { return new TDo(line, pos); }
    Token new53(int line, int pos) { return new TFor(line, pos); }
    Token new54(int line, int pos) { return new TGoto(line, pos); }
    Token new55(int line, int pos) { return new TContinue(line, pos); }
    Token new56(int line, int pos) { return new TBreak(line, pos); }
    Token new57(int line, int pos) { return new TReturn(line, pos); }
    Token new58(int line, int pos) { return new TTypedef(line, pos); }
    Token new59(int line, int pos) { return new TExtern(line, pos); }
    Token new60(int line, int pos) { return new TStatic(line, pos); }
    Token new61(int line, int pos) { return new TAuto(line, pos); }
    Token new62(int line, int pos) { return new TRegister(line, pos); }
    Token new63(int line, int pos) { return new TVoid(line, pos); }
    Token new64(int line, int pos) { return new TChar(line, pos); }
    Token new65(int line, int pos) { return new TInt(line, pos); }
    Token new66(int line, int pos) { return new TShort(line, pos); }
    Token new67(int line, int pos) { return new TLong(line, pos); }
    Token new68(int line, int pos) { return new TFloat(line, pos); }
    Token new69(int line, int pos) { return new TDouble(line, pos); }
    Token new70(int line, int pos) { return new TSigned(line, pos); }
    Token new71(int line, int pos) { return new TUnsigned(line, pos); }
    Token new72(int line, int pos) { return new TStruct(line, pos); }
    Token new73(int line, int pos) { return new TUnion(line, pos); }
    Token new74(int line, int pos) { return new TEnum(line, pos); }
    Token new75(int line, int pos) { return new TConst(line, pos); }
    Token new76(int line, int pos) { return new TVolatile(line, pos); }
    Token new77(int line, int pos) { return new TSizeof(line, pos); }
    Token new78(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TFloatingConstant(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TStringLitteral(text, line, pos); }
    Token new81(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new82(String text, int line, int pos) { return new TCharacterConstant(text, line, pos); }
    Token new83(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new84(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TPreprocessor(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {37, 37, 8}, {38, 38, 9}, {39, 39, 10}, {40, 40, 11}, {41, 41, 12}, {42, 42, 13}, {43, 43, 14}, {44, 44, 15}, {45, 45, 16}, {46, 46, 17}, {47, 47, 18}, {48, 48, 19}, {49, 57, 20}, {58, 58, 21}, {59, 59, 22}, {60, 60, 23}, {61, 61, 24}, {62, 62, 25}, {63, 63, 26}, {65, 75, 27}, {76, 76, 28}, {77, 90, 27}, {91, 91, 29}, {93, 93, 30}, {94, 94, 31}, {95, 95, 27}, {97, 97, 32}, {98, 98, 33}, {99, 99, 34}, {100, 100, 35}, {101, 101, 36}, {102, 102, 37}, {103, 103, 38}, {104, 104, 27}, {105, 105, 39}, {106, 107, 27}, {108, 108, 40}, {109, 113, 27}, {114, 114, 41}, {115, 115, 42}, {116, 116, 43}, {117, 117, 44}, {118, 118, 45}, {119, 119, 46}, {120, 122, 27}, {123, 123, 47}, {124, 124, 48}, {125, 125, 49}, {126, 126, 50}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 51}, },
            {{0, 9, 52}, {11, 12, 52}, {14, 33, 52}, {34, 34, 53}, {35, 91, 52}, {92, 92, 54}, {93, 127, 52}, },
            {{0, 9, 55}, {10, 10, 56}, {11, 12, 55}, {13, 13, 57}, {14, 127, 55}, },
            {{61, 61, 58}, },
            {{38, 38, 59}, {61, 61, 60}, },
            {{0, 9, 61}, {11, 12, 61}, {14, 38, 61}, {40, 91, 61}, {92, 92, 62}, {93, 127, 61}, },
            {},
            {},
            {{61, 61, 63}, },
            {{43, 43, 64}, {61, 61, 65}, },
            {},
            {{45, 45, 66}, {61, 61, 67}, {62, 62, 68}, },
            {{46, 46, 69}, {48, 57, 70}, },
            {{42, 42, 71}, {61, 61, 72}, },
            {{46, 46, 73}, {48, 55, 74}, {56, 57, 75}, {69, 69, 76}, {76, 76, 77}, {85, 85, 78}, {88, 88, 79}, {101, 101, 80}, {108, 108, 81}, {117, 117, 82}, {120, 120, 83}, },
            {{46, 46, 73}, {48, 57, 84}, {69, 69, 76}, {76, 76, 85}, {85, 85, 86}, {101, 101, 80}, {108, 108, 87}, {117, 117, 88}, },
            {},
            {},
            {{60, 60, 89}, {61, 61, 90}, },
            {{61, 61, 91}, },
            {{61, 61, 92}, {62, 62, 93}, },
            {},
            {{48, 57, 94}, {65, 90, 95}, {95, 95, 95}, {97, 122, 95}, },
            {{34, 34, 6}, {39, 39, 10}, {48, 122, -29}, },
            {},
            {},
            {{61, 61, 96}, },
            {{48, 95, -29}, {97, 116, 95}, {117, 117, 97}, {118, 122, 95}, },
            {{48, 95, -29}, {97, 113, 95}, {114, 114, 98}, {115, 122, 95}, },
            {{48, 95, -29}, {97, 97, 99}, {98, 103, 95}, {104, 104, 100}, {105, 110, 95}, {111, 111, 101}, {112, 122, 95}, },
            {{48, 95, -29}, {97, 100, 95}, {101, 101, 102}, {102, 110, 95}, {111, 111, 103}, {112, 122, 95}, },
            {{48, 95, -29}, {97, 107, 95}, {108, 108, 104}, {109, 109, 95}, {110, 110, 105}, {111, 119, 95}, {120, 120, 106}, {121, 122, 95}, },
            {{48, 107, -38}, {108, 108, 107}, {109, 110, 95}, {111, 111, 108}, {112, 122, 95}, },
            {{48, 95, -29}, {97, 110, 95}, {111, 111, 109}, {112, 122, 95}, },
            {{48, 95, -29}, {97, 101, 95}, {102, 102, 110}, {103, 109, 95}, {110, 110, 111}, {111, 122, 95}, },
            {{48, 110, -40}, {111, 111, 112}, {112, 122, 95}, },
            {{48, 100, -37}, {101, 101, 113}, {102, 122, 95}, },
            {{48, 95, -29}, {97, 103, 95}, {104, 104, 114}, {105, 105, 115}, {106, 115, 95}, {116, 116, 116}, {117, 118, 95}, {119, 119, 117}, {120, 122, 95}, },
            {{48, 95, -29}, {97, 120, 95}, {121, 121, 118}, {122, 122, 95}, },
            {{48, 95, -29}, {97, 109, 95}, {110, 110, 119}, {111, 122, 95}, },
            {{48, 110, -40}, {111, 111, 120}, {112, 122, 95}, },
            {{48, 103, -44}, {104, 104, 121}, {105, 122, 95}, },
            {},
            {{61, 61, 122}, {124, 124, 123}, },
            {},
            {},
            {},
            {{0, 127, -8}, },
            {},
            {{34, 34, 124}, {39, 39, 125}, {48, 55, 126}, {63, 63, 127}, {92, 92, 128}, {97, 97, 129}, {98, 98, 130}, {102, 102, 131}, {110, 110, 132}, {114, 114, 133}, {116, 116, 134}, {118, 118, 135}, {120, 120, 136}, },
            {{0, 127, -9}, },
            {},
            {{10, 10, 137}, },
            {},
            {},
            {},
            {{0, 38, -12}, {39, 39, 138}, {40, 127, -12}, },
            {{34, 34, 139}, {39, 39, 140}, {48, 55, 141}, {63, 63, 142}, {92, 92, 143}, {97, 97, 144}, {98, 98, 145}, {102, 102, 146}, {110, 110, 147}, {114, 114, 148}, {116, 116, 149}, {118, 118, 150}, {120, 120, 151}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{46, 46, 152}, },
            {{48, 57, 70}, {69, 69, 153}, {70, 70, 154}, {76, 76, 155}, {101, 101, 156}, {102, 102, 157}, {108, 108, 158}, },
            {{0, 41, 159}, {42, 42, 160}, {43, 127, 159}, },
            {},
            {{48, 108, -72}, },
            {{46, 85, -21}, {101, 117, -21}, },
            {{46, 46, 73}, {48, 57, 75}, {69, 69, 76}, {101, 101, 80}, },
            {{43, 43, 161}, {45, 45, 162}, {48, 57, 163}, },
            {{85, 85, 164}, {117, 117, 165}, },
            {{76, 76, 166}, {108, 108, 167}, },
            {{48, 57, 168}, {65, 70, 168}, {97, 102, 168}, },
            {{43, 57, -78}, },
            {{85, 117, -79}, },
            {{76, 108, -80}, },
            {{48, 102, -81}, },
            {{46, 117, -22}, },
            {{85, 85, 169}, {117, 117, 170}, },
            {{76, 76, 171}, {108, 108, 172}, },
            {{85, 117, -87}, },
            {{76, 108, -88}, },
            {{61, 61, 173}, },
            {},
            {},
            {},
            {{61, 61, 174}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {},
            {{48, 95, -29}, {97, 115, 95}, {116, 116, 175}, {117, 122, 95}, },
            {{48, 100, -37}, {101, 101, 176}, {102, 122, 95}, },
            {{48, 95, -29}, {97, 114, 95}, {115, 115, 177}, {116, 122, 95}, },
            {{48, 95, -29}, {97, 97, 178}, {98, 122, 95}, },
            {{48, 109, -46}, {110, 110, 179}, {111, 122, 95}, },
            {{48, 101, -41}, {102, 102, 180}, {103, 122, 95}, },
            {{48, 116, -34}, {117, 117, 181}, {118, 122, 95}, },
            {{48, 114, -101}, {115, 115, 182}, {116, 122, 95}, },
            {{48, 116, -34}, {117, 117, 183}, {118, 122, 95}, },
            {{48, 115, -99}, {116, 116, 184}, {117, 122, 95}, },
            {{48, 110, -40}, {111, 111, 185}, {112, 122, 95}, },
            {{48, 113, -35}, {114, 114, 186}, {115, 122, 95}, },
            {{48, 115, -99}, {116, 116, 187}, {117, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 115, -99}, {116, 116, 188}, {117, 122, 95}, },
            {{48, 109, -46}, {110, 110, 189}, {111, 122, 95}, },
            {{48, 95, -29}, {97, 102, 95}, {103, 103, 190}, {104, 115, 95}, {116, 116, 191}, {117, 122, 95}, },
            {{48, 110, -40}, {111, 111, 192}, {112, 122, 95}, },
            {{48, 102, -115}, {103, 103, 193}, {104, 121, 95}, {122, 122, 194}, },
            {{48, 95, -29}, {97, 97, 195}, {98, 113, 95}, {114, 114, 196}, {115, 122, 95}, },
            {{48, 95, -29}, {97, 104, 95}, {105, 105, 197}, {106, 122, 95}, },
            {{48, 95, -29}, {97, 111, 95}, {112, 112, 198}, {113, 122, 95}, },
            {{48, 104, -119}, {105, 105, 199}, {106, 114, 95}, {115, 115, 200}, {116, 122, 95}, },
            {{48, 104, -119}, {105, 105, 201}, {106, 107, 95}, {108, 108, 202}, {109, 122, 95}, },
            {{48, 104, -119}, {105, 105, 203}, {106, 122, 95}, },
            {},
            {},
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 34, -8}, {35, 47, 52}, {48, 55, 204}, {56, 91, 52}, {92, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{48, 57, 205}, {65, 70, 205}, {97, 102, 205}, },
            {},
            {},
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 39, -63}, {40, 47, 61}, {48, 55, 206}, {56, 91, 61}, {92, 127, -12}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{48, 57, 207}, {65, 70, 207}, {97, 102, 207}, },
            {},
            {{43, 43, 208}, {45, 45, 209}, {48, 57, 210}, },
            {},
            {},
            {{43, 57, -155}, },
            {},
            {},
            {{0, 127, -73}, },
            {{0, 41, 211}, {42, 42, 160}, {43, 46, 211}, {47, 47, 212}, {48, 127, 211}, },
            {{48, 57, 163}, },
            {{48, 57, 163}, },
            {{48, 57, 163}, {70, 70, 213}, {76, 76, 214}, {102, 102, 215}, {108, 108, 216}, },
            {},
            {},
            {},
            {},
            {{48, 70, -81}, {76, 76, 217}, {85, 85, 218}, {97, 102, 168}, {108, 108, 219}, {117, 117, 220}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 110, -40}, {111, 111, 221}, {112, 122, 95}, },
            {{48, 95, -29}, {97, 97, 222}, {98, 122, 95}, },
            {{48, 100, -37}, {101, 101, 223}, {102, 122, 95}, },
            {{48, 113, -35}, {114, 114, 224}, {115, 122, 95}, },
            {{48, 114, -101}, {115, 115, 225}, {116, 116, 226}, {117, 122, 95}, },
            {{48, 95, -29}, {97, 97, 227}, {98, 122, 95}, },
            {{48, 95, -29}, {97, 97, 95}, {98, 98, 228}, {99, 122, 95}, },
            {{48, 100, -37}, {101, 101, 229}, {102, 122, 95}, },
            {{48, 95, -29}, {97, 108, 95}, {109, 109, 230}, {110, 122, 95}, },
            {{48, 100, -37}, {101, 101, 231}, {102, 122, 95}, },
            {{48, 95, -29}, {97, 97, 232}, {98, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 110, -40}, {111, 111, 233}, {112, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 102, -115}, {103, 103, 234}, {104, 122, 95}, },
            {{48, 104, -119}, {105, 105, 235}, {106, 122, 95}, },
            {{48, 116, -34}, {117, 117, 236}, {118, 122, 95}, },
            {{48, 113, -35}, {114, 114, 237}, {115, 122, 95}, },
            {{48, 109, -46}, {110, 110, 238}, {111, 122, 95}, },
            {{48, 100, -37}, {101, 101, 239}, {102, 122, 95}, },
            {{48, 115, -99}, {116, 116, 240}, {117, 122, 95}, },
            {{48, 116, -34}, {117, 117, 241}, {118, 122, 95}, },
            {{48, 115, -99}, {116, 116, 242}, {117, 122, 95}, },
            {{48, 100, -37}, {101, 101, 243}, {102, 122, 95}, },
            {{48, 110, -40}, {111, 111, 244}, {112, 122, 95}, },
            {{48, 104, -119}, {105, 105, 245}, {106, 122, 95}, },
            {{48, 95, -29}, {97, 99, 95}, {100, 100, 246}, {101, 122, 95}, },
            {{48, 95, -29}, {97, 97, 247}, {98, 122, 95}, },
            {{48, 107, -38}, {108, 108, 248}, {109, 122, 95}, },
            {{0, 47, -128}, {48, 55, 249}, {56, 127, -128}, },
            {{0, 47, -128}, {48, 57, 250}, {58, 64, 52}, {65, 70, 250}, {71, 91, 52}, {92, 92, 54}, {93, 96, 52}, {97, 102, 250}, {103, 127, 52}, },
            {{0, 47, -143}, {48, 55, 251}, {56, 127, -143}, },
            {{0, 47, -143}, {48, 57, 252}, {58, 64, 61}, {65, 70, 252}, {71, 91, 61}, {92, 92, 62}, {93, 96, 61}, {97, 102, 252}, {103, 127, 61}, },
            {{48, 57, 210}, },
            {{48, 57, 210}, },
            {{48, 57, 210}, {70, 76, -72}, {102, 108, -72}, },
            {{0, 41, 253}, {42, 42, 254}, {43, 127, 253}, },
            {},
            {},
            {},
            {},
            {},
            {{85, 85, 255}, {117, 117, 256}, },
            {{76, 76, 257}, {108, 108, 258}, },
            {{85, 117, -219}, },
            {{76, 108, -220}, },
            {{48, 122, -29}, },
            {{48, 95, -29}, {97, 106, 95}, {107, 107, 259}, {108, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 115, -99}, {116, 116, 260}, {117, 122, 95}, },
            {{48, 104, -119}, {105, 105, 261}, {106, 122, 95}, },
            {{48, 116, -34}, {117, 117, 262}, {118, 122, 95}, },
            {{48, 107, -38}, {108, 108, 263}, {109, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 113, -35}, {114, 114, 264}, {115, 122, 95}, },
            {{48, 115, -99}, {116, 116, 265}, {117, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 114, -101}, {115, 115, 266}, {116, 122, 95}, },
            {{48, 113, -35}, {114, 114, 267}, {115, 122, 95}, },
            {{48, 115, -99}, {116, 116, 268}, {117, 122, 95}, },
            {{48, 100, -37}, {101, 101, 269}, {102, 122, 95}, },
            {{48, 110, -40}, {111, 111, 270}, {112, 122, 95}, },
            {{48, 104, -119}, {105, 105, 271}, {106, 122, 95}, },
            {{48, 95, -29}, {97, 98, 95}, {99, 99, 272}, {100, 122, 95}, },
            {{48, 98, -243}, {99, 99, 273}, {100, 122, 95}, },
            {{48, 99, -203}, {100, 100, 274}, {101, 122, 95}, },
            {{48, 109, -46}, {110, 110, 275}, {111, 122, 95}, },
            {{48, 102, -115}, {103, 103, 276}, {104, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 115, -99}, {116, 116, 277}, {117, 122, 95}, },
            {{48, 100, -37}, {101, 101, 278}, {102, 122, 95}, },
            {{0, 127, -8}, },
            {{0, 127, -207}, },
            {{0, 127, -63}, },
            {{0, 127, -209}, },
            {{0, 127, -213}, },
            {{0, 41, 211}, {42, 42, 254}, {43, 127, -162}, },
            {},
            {},
            {},
            {},
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 109, -46}, {110, 110, 279}, {111, 122, 95}, },
            {{48, 107, -38}, {108, 108, 280}, {109, 122, 95}, },
            {{48, 100, -37}, {101, 101, 281}, {102, 122, 95}, },
            {{48, 109, -46}, {110, 110, 282}, {111, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 115, -99}, {116, 116, 283}, {117, 122, 95}, },
            {{48, 109, -46}, {110, 110, 284}, {111, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 99, -203}, {100, 100, 285}, {101, 122, 95}, },
            {{48, 101, -41}, {102, 102, 286}, {103, 122, 95}, },
            {{48, 98, -243}, {99, 99, 287}, {100, 122, 95}, },
            {{48, 115, -99}, {116, 116, 288}, {117, 122, 95}, },
            {{48, 103, -44}, {104, 104, 289}, {105, 122, 95}, },
            {{48, 100, -37}, {101, 101, 290}, {102, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 109, -46}, {110, 110, 291}, {111, 122, 95}, },
            {{48, 104, -119}, {105, 105, 292}, {106, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 116, -34}, {117, 117, 293}, {118, 122, 95}, },
            {{48, 115, -99}, {116, 116, 294}, {117, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 100, -37}, {101, 101, 295}, {102, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 101, -41}, {102, 102, 296}, {103, 122, 95}, },
            {{48, 100, -37}, {101, 101, 297}, {102, 122, 95}, },
            {{48, 107, -38}, {108, 108, 298}, {109, 122, 95}, },
            {{48, 100, -37}, {101, 101, 299}, {102, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 113, -35}, {114, 114, 300}, {115, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 99, -203}, {100, 100, 301}, {101, 122, 95}, },
            {{48, 100, -37}, {101, 101, 302}, {102, 122, 95}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
            {{48, 122, -29}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 83, 83, 83, 83, 18, -1, -1, 12, 13, -1, 4, 5, 10, 14, 1, 15, 0, 11, 81, 81, 2, 3, 25, 22, 27, 19, 78, 78, 6, 7, 16, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 8, 20, 9, 17, 24, -1, 80, -1, -1, 85, 85, 38, 34, 43, -1, -1, 36, 30, 39, 31, 40, 29, -1, 79, -1, 37, 79, 81, -1, -1, 81, 81, -1, -1, 81, 81, -1, 81, 81, 81, 81, 81, 32, 26, 23, 28, 33, 78, 78, 44, 78, 78, 78, 78, 78, 78, 52, 78, 78, 78, 78, 78, 78, 48, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 45, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 79, 79, -1, 79, 79, -1, -1, -1, -1, 79, 81, 81, 81, 81, 81, 81, 81, 81, 81, 41, 42, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 53, 78, 65, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, -1, -1, -1, -1, -1, -1, 79, -1, 84, 79, 79, 79, 79, 81, 81, 81, 81, 61, 78, 46, 64, 78, 78, 78, 78, 49, 74, 78, 78, 54, 67, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 63, 78, 78, -1, -1, -1, -1, -1, -1, 81, 81, 81, 81, 56, 75, 78, 78, 78, 78, 68, 78, 78, 66, 78, 78, 78, 78, 78, 78, 73, 78, 78, 51, 78, 78, 69, 59, 78, 57, 70, 77, 60, 72, 50, 78, 78, 78, 78, 47, 78, 58, 78, 78, 55, 62, 71, 76, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
