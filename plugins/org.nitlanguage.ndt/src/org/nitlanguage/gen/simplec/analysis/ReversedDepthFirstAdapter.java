/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.analysis;

import org.nitlanguage.gen.simplec.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPTranslationUnit().apply(this);
        outStart(node);
    }

    public void inATranslationUnit(ATranslationUnit node)
    {
        defaultIn(node);
    }

    public void outATranslationUnit(ATranslationUnit node)
    {
        defaultOut(node);
    }

    public void caseATranslationUnit(ATranslationUnit node)
    {
        inATranslationUnit(node);
        {
            Object temp[] = node.getDeclarationOrDefinition().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeclarationOrDefinition) temp[i]).apply(this);
            }
        }
        outATranslationUnit(node);
    }

    public void inAStructDeclarationDeclarationOrDefinition(AStructDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAStructDeclarationDeclarationOrDefinition(AStructDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAStructDeclarationDeclarationOrDefinition(AStructDeclarationDeclarationOrDefinition node)
    {
        inAStructDeclarationDeclarationOrDefinition(node);
        if(node.getStructDeclaration() != null)
        {
            node.getStructDeclaration().apply(this);
        }
        outAStructDeclarationDeclarationOrDefinition(node);
    }

    public void inAUnionDeclarationDeclarationOrDefinition(AUnionDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAUnionDeclarationDeclarationOrDefinition(AUnionDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAUnionDeclarationDeclarationOrDefinition(AUnionDeclarationDeclarationOrDefinition node)
    {
        inAUnionDeclarationDeclarationOrDefinition(node);
        if(node.getUnionDeclaration() != null)
        {
            node.getUnionDeclaration().apply(this);
        }
        outAUnionDeclarationDeclarationOrDefinition(node);
    }

    public void inAEnumDeclarationDeclarationOrDefinition(AEnumDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclarationDeclarationOrDefinition(AEnumDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAEnumDeclarationDeclarationOrDefinition(AEnumDeclarationDeclarationOrDefinition node)
    {
        inAEnumDeclarationDeclarationOrDefinition(node);
        if(node.getEnumDeclaration() != null)
        {
            node.getEnumDeclaration().apply(this);
        }
        outAEnumDeclarationDeclarationOrDefinition(node);
    }

    public void inATypedefDeclarationDeclarationOrDefinition(ATypedefDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outATypedefDeclarationDeclarationOrDefinition(ATypedefDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseATypedefDeclarationDeclarationOrDefinition(ATypedefDeclarationDeclarationOrDefinition node)
    {
        inATypedefDeclarationDeclarationOrDefinition(node);
        if(node.getTypedefDeclaration() != null)
        {
            node.getTypedefDeclaration().apply(this);
        }
        outATypedefDeclarationDeclarationOrDefinition(node);
    }

    public void inAFunctionDeclarationDeclarationOrDefinition(AFunctionDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarationDeclarationOrDefinition(AFunctionDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclarationDeclarationOrDefinition(AFunctionDeclarationDeclarationOrDefinition node)
    {
        inAFunctionDeclarationDeclarationOrDefinition(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFunctionDeclarationDeclarationOrDefinition(node);
    }

    public void inAVariableDeclarationDeclarationOrDefinition(AVariableDeclarationDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationDeclarationOrDefinition(AVariableDeclarationDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclarationDeclarationOrDefinition(AVariableDeclarationDeclarationOrDefinition node)
    {
        inAVariableDeclarationDeclarationOrDefinition(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationDeclarationOrDefinition(node);
    }

    public void inAFunctionDefinitionDeclarationOrDefinition(AFunctionDefinitionDeclarationOrDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinitionDeclarationOrDefinition(AFunctionDefinitionDeclarationOrDefinition node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDefinitionDeclarationOrDefinition(AFunctionDefinitionDeclarationOrDefinition node)
    {
        inAFunctionDefinitionDeclarationOrDefinition(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionDefinitionDeclarationOrDefinition(node);
    }

    public void inAStructDeclaration(AStructDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStructDeclaration(AStructDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAStructDeclaration(AStructDeclaration node)
    {
        inAStructDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getMemberDeclaration().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMemberDeclaration) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAStructDeclaration(node);
    }

    public void inAMemberDeclaration(AMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberDeclaration(AMemberDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAMemberDeclaration(AMemberDeclaration node)
    {
        inAMemberDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAMemberDeclaration(node);
    }

    public void inAVoidTypeSpecifier(AVoidTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeSpecifier(AVoidTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAVoidTypeSpecifier(AVoidTypeSpecifier node)
    {
        inAVoidTypeSpecifier(node);
        if(node.getVoidSpecifier() != null)
        {
            node.getVoidSpecifier().apply(this);
        }
        outAVoidTypeSpecifier(node);
    }

    public void inACharTypeSpecifier(ACharTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outACharTypeSpecifier(ACharTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseACharTypeSpecifier(ACharTypeSpecifier node)
    {
        inACharTypeSpecifier(node);
        if(node.getCharSpecifier() != null)
        {
            node.getCharSpecifier().apply(this);
        }
        outACharTypeSpecifier(node);
    }

    public void inASignedCharTypeSpecifier(ASignedCharTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedCharTypeSpecifier(ASignedCharTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedCharTypeSpecifier(ASignedCharTypeSpecifier node)
    {
        inASignedCharTypeSpecifier(node);
        if(node.getSignedCharSpecifier() != null)
        {
            node.getSignedCharSpecifier().apply(this);
        }
        outASignedCharTypeSpecifier(node);
    }

    public void inASignedShortTypeSpecifier(ASignedShortTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedShortTypeSpecifier(ASignedShortTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedShortTypeSpecifier(ASignedShortTypeSpecifier node)
    {
        inASignedShortTypeSpecifier(node);
        if(node.getSignedShortSpecifier() != null)
        {
            node.getSignedShortSpecifier().apply(this);
        }
        outASignedShortTypeSpecifier(node);
    }

    public void inASignedIntTypeSpecifier(ASignedIntTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedIntTypeSpecifier(ASignedIntTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedIntTypeSpecifier(ASignedIntTypeSpecifier node)
    {
        inASignedIntTypeSpecifier(node);
        if(node.getSignedIntSpecifier() != null)
        {
            node.getSignedIntSpecifier().apply(this);
        }
        outASignedIntTypeSpecifier(node);
    }

    public void inASignedLongTypeSpecifier(ASignedLongTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedLongTypeSpecifier(ASignedLongTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedLongTypeSpecifier(ASignedLongTypeSpecifier node)
    {
        inASignedLongTypeSpecifier(node);
        if(node.getSignedLongSpecifier() != null)
        {
            node.getSignedLongSpecifier().apply(this);
        }
        outASignedLongTypeSpecifier(node);
    }

    public void inAUnsignedCharTypeSpecifier(AUnsignedCharTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedCharTypeSpecifier(AUnsignedCharTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedCharTypeSpecifier(AUnsignedCharTypeSpecifier node)
    {
        inAUnsignedCharTypeSpecifier(node);
        if(node.getUnsignedCharSpecifier() != null)
        {
            node.getUnsignedCharSpecifier().apply(this);
        }
        outAUnsignedCharTypeSpecifier(node);
    }

    public void inAUnsignedShortTypeSpecifier(AUnsignedShortTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedShortTypeSpecifier(AUnsignedShortTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedShortTypeSpecifier(AUnsignedShortTypeSpecifier node)
    {
        inAUnsignedShortTypeSpecifier(node);
        if(node.getUnsignedShortSpecifier() != null)
        {
            node.getUnsignedShortSpecifier().apply(this);
        }
        outAUnsignedShortTypeSpecifier(node);
    }

    public void inAUnsignedIntTypeSpecifier(AUnsignedIntTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedIntTypeSpecifier(AUnsignedIntTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedIntTypeSpecifier(AUnsignedIntTypeSpecifier node)
    {
        inAUnsignedIntTypeSpecifier(node);
        if(node.getUnsignedIntSpecifier() != null)
        {
            node.getUnsignedIntSpecifier().apply(this);
        }
        outAUnsignedIntTypeSpecifier(node);
    }

    public void inAUnsignedLongTypeSpecifier(AUnsignedLongTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedLongTypeSpecifier(AUnsignedLongTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedLongTypeSpecifier(AUnsignedLongTypeSpecifier node)
    {
        inAUnsignedLongTypeSpecifier(node);
        if(node.getUnsignedLongSpecifier() != null)
        {
            node.getUnsignedLongSpecifier().apply(this);
        }
        outAUnsignedLongTypeSpecifier(node);
    }

    public void inAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        inAFloatTypeSpecifier(node);
        if(node.getFloatSpecifier() != null)
        {
            node.getFloatSpecifier().apply(this);
        }
        outAFloatTypeSpecifier(node);
    }

    public void inADoubleTypeSpecifier(ADoubleTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outADoubleTypeSpecifier(ADoubleTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseADoubleTypeSpecifier(ADoubleTypeSpecifier node)
    {
        inADoubleTypeSpecifier(node);
        if(node.getDoubleSpecifier() != null)
        {
            node.getDoubleSpecifier().apply(this);
        }
        outADoubleTypeSpecifier(node);
    }

    public void inALongDoubleTypeSpecifier(ALongDoubleTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outALongDoubleTypeSpecifier(ALongDoubleTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseALongDoubleTypeSpecifier(ALongDoubleTypeSpecifier node)
    {
        inALongDoubleTypeSpecifier(node);
        if(node.getLongDoubleSpecifier() != null)
        {
            node.getLongDoubleSpecifier().apply(this);
        }
        outALongDoubleTypeSpecifier(node);
    }

    public void inAStructTypeSpecifier(AStructTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAStructTypeSpecifier(AStructTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAStructTypeSpecifier(AStructTypeSpecifier node)
    {
        inAStructTypeSpecifier(node);
        if(node.getStructSpecifier() != null)
        {
            node.getStructSpecifier().apply(this);
        }
        outAStructTypeSpecifier(node);
    }

    public void inAUnionTypeSpecifier(AUnionTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnionTypeSpecifier(AUnionTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnionTypeSpecifier(AUnionTypeSpecifier node)
    {
        inAUnionTypeSpecifier(node);
        if(node.getUnionSpecifier() != null)
        {
            node.getUnionSpecifier().apply(this);
        }
        outAUnionTypeSpecifier(node);
    }

    public void inAEnumTypeSpecifier(AEnumTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAEnumTypeSpecifier(AEnumTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAEnumTypeSpecifier(AEnumTypeSpecifier node)
    {
        inAEnumTypeSpecifier(node);
        if(node.getEnumSpecifier() != null)
        {
            node.getEnumSpecifier().apply(this);
        }
        outAEnumTypeSpecifier(node);
    }

    public void inATypedefTypeSpecifier(ATypedefTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outATypedefTypeSpecifier(ATypedefTypeSpecifier node)
    {
        defaultOut(node);
    }

    public void caseATypedefTypeSpecifier(ATypedefTypeSpecifier node)
    {
        inATypedefTypeSpecifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypedefTypeSpecifier(node);
    }

    public void inAVoidSpecifier(AVoidSpecifier node)
    {
        defaultIn(node);
    }

    public void outAVoidSpecifier(AVoidSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAVoidSpecifier(AVoidSpecifier node)
    {
        inAVoidSpecifier(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidSpecifier(node);
    }

    public void inACharSpecifier(ACharSpecifier node)
    {
        defaultIn(node);
    }

    public void outACharSpecifier(ACharSpecifier node)
    {
        defaultOut(node);
    }

    public void caseACharSpecifier(ACharSpecifier node)
    {
        inACharSpecifier(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharSpecifier(node);
    }

    public void inASignedCharSpecifier(ASignedCharSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedCharSpecifier(ASignedCharSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedCharSpecifier(ASignedCharSpecifier node)
    {
        inASignedCharSpecifier(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedCharSpecifier(node);
    }

    public void inAShortSignedShortSpecifier(AShortSignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outAShortSignedShortSpecifier(AShortSignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAShortSignedShortSpecifier(AShortSignedShortSpecifier node)
    {
        inAShortSignedShortSpecifier(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortSignedShortSpecifier(node);
    }

    public void inASignedShortSignedShortSpecifier(ASignedShortSignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedShortSignedShortSpecifier(ASignedShortSignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedShortSignedShortSpecifier(ASignedShortSignedShortSpecifier node)
    {
        inASignedShortSignedShortSpecifier(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedShortSignedShortSpecifier(node);
    }

    public void inAShortIntSignedShortSpecifier(AShortIntSignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outAShortIntSignedShortSpecifier(AShortIntSignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAShortIntSignedShortSpecifier(AShortIntSignedShortSpecifier node)
    {
        inAShortIntSignedShortSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortIntSignedShortSpecifier(node);
    }

    public void inASignedShortIntSignedShortSpecifier(ASignedShortIntSignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedShortIntSignedShortSpecifier(ASignedShortIntSignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedShortIntSignedShortSpecifier(ASignedShortIntSignedShortSpecifier node)
    {
        inASignedShortIntSignedShortSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedShortIntSignedShortSpecifier(node);
    }

    public void inAIntSignedIntSpecifier(AIntSignedIntSpecifier node)
    {
        defaultIn(node);
    }

    public void outAIntSignedIntSpecifier(AIntSignedIntSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAIntSignedIntSpecifier(AIntSignedIntSpecifier node)
    {
        inAIntSignedIntSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntSignedIntSpecifier(node);
    }

    public void inASignedSignedIntSpecifier(ASignedSignedIntSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedSignedIntSpecifier(ASignedSignedIntSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedSignedIntSpecifier(ASignedSignedIntSpecifier node)
    {
        inASignedSignedIntSpecifier(node);
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedSignedIntSpecifier(node);
    }

    public void inASignedIntSignedIntSpecifier(ASignedIntSignedIntSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedIntSignedIntSpecifier(ASignedIntSignedIntSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedIntSignedIntSpecifier(ASignedIntSignedIntSpecifier node)
    {
        inASignedIntSignedIntSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedIntSignedIntSpecifier(node);
    }

    public void inALongSignedLongSpecifier(ALongSignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outALongSignedLongSpecifier(ALongSignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseALongSignedLongSpecifier(ALongSignedLongSpecifier node)
    {
        inALongSignedLongSpecifier(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongSignedLongSpecifier(node);
    }

    public void inASignedLongSignedLongSpecifier(ASignedLongSignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedLongSignedLongSpecifier(ASignedLongSignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedLongSignedLongSpecifier(ASignedLongSignedLongSpecifier node)
    {
        inASignedLongSignedLongSpecifier(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedLongSignedLongSpecifier(node);
    }

    public void inALongIntSignedLongSpecifier(ALongIntSignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outALongIntSignedLongSpecifier(ALongIntSignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseALongIntSignedLongSpecifier(ALongIntSignedLongSpecifier node)
    {
        inALongIntSignedLongSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongIntSignedLongSpecifier(node);
    }

    public void inASignedLongIntSignedLongSpecifier(ASignedLongIntSignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outASignedLongIntSignedLongSpecifier(ASignedLongIntSignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseASignedLongIntSignedLongSpecifier(ASignedLongIntSignedLongSpecifier node)
    {
        inASignedLongIntSignedLongSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getSigned() != null)
        {
            node.getSigned().apply(this);
        }
        outASignedLongIntSignedLongSpecifier(node);
    }

    public void inAUnsignedCharSpecifier(AUnsignedCharSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedCharSpecifier(AUnsignedCharSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedCharSpecifier(AUnsignedCharSpecifier node)
    {
        inAUnsignedCharSpecifier(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedCharSpecifier(node);
    }

    public void inAUnsignedShortUnsignedShortSpecifier(AUnsignedShortUnsignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedShortUnsignedShortSpecifier(AUnsignedShortUnsignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedShortUnsignedShortSpecifier(AUnsignedShortUnsignedShortSpecifier node)
    {
        inAUnsignedShortUnsignedShortSpecifier(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedShortUnsignedShortSpecifier(node);
    }

    public void inAUnsignedShortIntUnsignedShortSpecifier(AUnsignedShortIntUnsignedShortSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedShortIntUnsignedShortSpecifier(AUnsignedShortIntUnsignedShortSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedShortIntUnsignedShortSpecifier(AUnsignedShortIntUnsignedShortSpecifier node)
    {
        inAUnsignedShortIntUnsignedShortSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedShortIntUnsignedShortSpecifier(node);
    }

    public void inAUnsignedUnsignedIntSpecifier(AUnsignedUnsignedIntSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedUnsignedIntSpecifier(AUnsignedUnsignedIntSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedUnsignedIntSpecifier(AUnsignedUnsignedIntSpecifier node)
    {
        inAUnsignedUnsignedIntSpecifier(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedUnsignedIntSpecifier(node);
    }

    public void inAUnsignedIntUnsignedIntSpecifier(AUnsignedIntUnsignedIntSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedIntUnsignedIntSpecifier(AUnsignedIntUnsignedIntSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedIntUnsignedIntSpecifier(AUnsignedIntUnsignedIntSpecifier node)
    {
        inAUnsignedIntUnsignedIntSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedIntUnsignedIntSpecifier(node);
    }

    public void inAUnsignedLongUnsignedLongSpecifier(AUnsignedLongUnsignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedLongUnsignedLongSpecifier(AUnsignedLongUnsignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedLongUnsignedLongSpecifier(AUnsignedLongUnsignedLongSpecifier node)
    {
        inAUnsignedLongUnsignedLongSpecifier(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedLongUnsignedLongSpecifier(node);
    }

    public void inAUnsignedLongIntUnsignedLongSpecifier(AUnsignedLongIntUnsignedLongSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnsignedLongIntUnsignedLongSpecifier(AUnsignedLongIntUnsignedLongSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedLongIntUnsignedLongSpecifier(AUnsignedLongIntUnsignedLongSpecifier node)
    {
        inAUnsignedLongIntUnsignedLongSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        outAUnsignedLongIntUnsignedLongSpecifier(node);
    }

    public void inAFloatSpecifier(AFloatSpecifier node)
    {
        defaultIn(node);
    }

    public void outAFloatSpecifier(AFloatSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAFloatSpecifier(AFloatSpecifier node)
    {
        inAFloatSpecifier(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatSpecifier(node);
    }

    public void inADoubleSpecifier(ADoubleSpecifier node)
    {
        defaultIn(node);
    }

    public void outADoubleSpecifier(ADoubleSpecifier node)
    {
        defaultOut(node);
    }

    public void caseADoubleSpecifier(ADoubleSpecifier node)
    {
        inADoubleSpecifier(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleSpecifier(node);
    }

    public void inALongDoubleSpecifier(ALongDoubleSpecifier node)
    {
        defaultIn(node);
    }

    public void outALongDoubleSpecifier(ALongDoubleSpecifier node)
    {
        defaultOut(node);
    }

    public void caseALongDoubleSpecifier(ALongDoubleSpecifier node)
    {
        inALongDoubleSpecifier(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongDoubleSpecifier(node);
    }

    public void inAStructSpecifier(AStructSpecifier node)
    {
        defaultIn(node);
    }

    public void outAStructSpecifier(AStructSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAStructSpecifier(AStructSpecifier node)
    {
        inAStructSpecifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAStructSpecifier(node);
    }

    public void inAUnionSpecifier(AUnionSpecifier node)
    {
        defaultIn(node);
    }

    public void outAUnionSpecifier(AUnionSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAUnionSpecifier(AUnionSpecifier node)
    {
        inAUnionSpecifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        outAUnionSpecifier(node);
    }

    public void inAEnumSpecifier(AEnumSpecifier node)
    {
        defaultIn(node);
    }

    public void outAEnumSpecifier(AEnumSpecifier node)
    {
        defaultOut(node);
    }

    public void caseAEnumSpecifier(AEnumSpecifier node)
    {
        inAEnumSpecifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        outAEnumSpecifier(node);
    }

    public void inAPointerDeclarator(APointerDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerDeclarator(APointerDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerDeclarator(APointerDeclarator node)
    {
        inAPointerDeclarator(node);
        if(node.getPointer() != null)
        {
            node.getPointer().apply(this);
        }
        outAPointerDeclarator(node);
    }

    public void inADirectDeclarator(ADirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outADirectDeclarator(ADirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseADirectDeclarator(ADirectDeclarator node)
    {
        inADirectDeclarator(node);
        if(node.getDirectDeclarator() != null)
        {
            node.getDirectDeclarator().apply(this);
        }
        outADirectDeclarator(node);
    }

    public void inADirectPointer(ADirectPointer node)
    {
        defaultIn(node);
    }

    public void outADirectPointer(ADirectPointer node)
    {
        defaultOut(node);
    }

    public void caseADirectPointer(ADirectPointer node)
    {
        inADirectPointer(node);
        if(node.getDirectDeclarator() != null)
        {
            node.getDirectDeclarator().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outADirectPointer(node);
    }

    public void inAPointerPointer(APointerPointer node)
    {
        defaultIn(node);
    }

    public void outAPointerPointer(APointerPointer node)
    {
        defaultOut(node);
    }

    public void caseAPointerPointer(APointerPointer node)
    {
        inAPointerPointer(node);
        if(node.getPointer() != null)
        {
            node.getPointer().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAPointerPointer(node);
    }

    public void inAIdentifierDirectDeclarator(AIdentifierDirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDirectDeclarator(AIdentifierDirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierDirectDeclarator(AIdentifierDirectDeclarator node)
    {
        inAIdentifierDirectDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierDirectDeclarator(node);
    }

    public void inAArrayDirectDeclarator(AArrayDirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDirectDeclarator(AArrayDirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayDirectDeclarator(AArrayDirectDeclarator node)
    {
        inAArrayDirectDeclarator(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAArrayDirectDeclarator(node);
    }

    public void inAFunctionDirectDeclarator(AFunctionDirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outAFunctionDirectDeclarator(AFunctionDirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDirectDeclarator(AFunctionDirectDeclarator node)
    {
        inAFunctionDirectDeclarator(node);
        if(node.getFunctionPointerDeclarator() != null)
        {
            node.getFunctionPointerDeclarator().apply(this);
        }
        outAFunctionDirectDeclarator(node);
    }

    public void inAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        inAIdentifierArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierArrayDeclarator(node);
    }

    public void inAPointerArrayDeclarator(APointerArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerArrayDeclarator(APointerArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerArrayDeclarator(APointerArrayDeclarator node)
    {
        inAPointerArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getPointer() != null)
        {
            node.getPointer().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPointerArrayDeclarator(node);
    }

    public void inAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        inAArrayArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAArrayArrayDeclarator(node);
    }

    public void inAFunctionPointerDeclarator(AFunctionPointerDeclarator node)
    {
        defaultIn(node);
    }

    public void outAFunctionPointerDeclarator(AFunctionPointerDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAFunctionPointerDeclarator(AFunctionPointerDeclarator node)
    {
        inAFunctionPointerDeclarator(node);
        if(node.getPlrp() != null)
        {
            node.getPlrp().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getPllp() != null)
        {
            node.getPllp().apply(this);
        }
        if(node.getPrp() != null)
        {
            node.getPrp().apply(this);
        }
        if(node.getPointer() != null)
        {
            node.getPointer().apply(this);
        }
        if(node.getPlp() != null)
        {
            node.getPlp().apply(this);
        }
        outAFunctionPointerDeclarator(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        {
            Object temp[] = node.getParameterListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PParameterListTail) temp[i]).apply(this);
            }
        }
        if(node.getParameterDeclaration() != null)
        {
            node.getParameterDeclaration().apply(this);
        }
        outAParameterList(node);
    }

    public void inAParameterDeclaration(AParameterDeclaration node)
    {
        defaultIn(node);
    }

    public void outAParameterDeclaration(AParameterDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAParameterDeclaration(AParameterDeclaration node)
    {
        inAParameterDeclaration(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAParameterDeclaration(node);
    }

    public void inAAbstractParameterDeclaration(AAbstractParameterDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractParameterDeclaration(AAbstractParameterDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAAbstractParameterDeclaration(AAbstractParameterDeclaration node)
    {
        inAAbstractParameterDeclaration(node);
        if(node.getAbstractDeclarator() != null)
        {
            node.getAbstractDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAAbstractParameterDeclaration(node);
    }

    public void inAIdentifierParameterDeclaration(AIdentifierParameterDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdentifierParameterDeclaration(AIdentifierParameterDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierParameterDeclaration(AIdentifierParameterDeclaration node)
    {
        inAIdentifierParameterDeclaration(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierParameterDeclaration(node);
    }

    public void inAAbstractIdentifierParameterDeclaration(AAbstractIdentifierParameterDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAbstractIdentifierParameterDeclaration(AAbstractIdentifierParameterDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAAbstractIdentifierParameterDeclaration(AAbstractIdentifierParameterDeclaration node)
    {
        inAAbstractIdentifierParameterDeclaration(node);
        if(node.getAbstractDeclarator() != null)
        {
            node.getAbstractDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAbstractIdentifierParameterDeclaration(node);
    }

    public void inAPointerAbstractDeclarator(APointerAbstractDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerAbstractDeclarator(APointerAbstractDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerAbstractDeclarator(APointerAbstractDeclarator node)
    {
        inAPointerAbstractDeclarator(node);
        if(node.getAbstractPointer() != null)
        {
            node.getAbstractPointer().apply(this);
        }
        outAPointerAbstractDeclarator(node);
    }

    public void inADirectAbstractDeclarator(ADirectAbstractDeclarator node)
    {
        defaultIn(node);
    }

    public void outADirectAbstractDeclarator(ADirectAbstractDeclarator node)
    {
        defaultOut(node);
    }

    public void caseADirectAbstractDeclarator(ADirectAbstractDeclarator node)
    {
        inADirectAbstractDeclarator(node);
        if(node.getAbstractDirectDeclarator() != null)
        {
            node.getAbstractDirectDeclarator().apply(this);
        }
        outADirectAbstractDeclarator(node);
    }

    public void inADirectAbstractPointer(ADirectAbstractPointer node)
    {
        defaultIn(node);
    }

    public void outADirectAbstractPointer(ADirectAbstractPointer node)
    {
        defaultOut(node);
    }

    public void caseADirectAbstractPointer(ADirectAbstractPointer node)
    {
        inADirectAbstractPointer(node);
        if(node.getAbstractDirectDeclarator() != null)
        {
            node.getAbstractDirectDeclarator().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outADirectAbstractPointer(node);
    }

    public void inAPointerAbstractPointer(APointerAbstractPointer node)
    {
        defaultIn(node);
    }

    public void outAPointerAbstractPointer(APointerAbstractPointer node)
    {
        defaultOut(node);
    }

    public void caseAPointerAbstractPointer(APointerAbstractPointer node)
    {
        inAPointerAbstractPointer(node);
        if(node.getAbstractPointer() != null)
        {
            node.getAbstractPointer().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAPointerAbstractPointer(node);
    }

    public void inAArrayAbstractDirectDeclarator(AArrayAbstractDirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayAbstractDirectDeclarator(AArrayAbstractDirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayAbstractDirectDeclarator(AArrayAbstractDirectDeclarator node)
    {
        inAArrayAbstractDirectDeclarator(node);
        if(node.getAbstractArrayDeclarator() != null)
        {
            node.getAbstractArrayDeclarator().apply(this);
        }
        outAArrayAbstractDirectDeclarator(node);
    }

    public void inAFunctionAbstractDirectDeclarator(AFunctionAbstractDirectDeclarator node)
    {
        defaultIn(node);
    }

    public void outAFunctionAbstractDirectDeclarator(AFunctionAbstractDirectDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAFunctionAbstractDirectDeclarator(AFunctionAbstractDirectDeclarator node)
    {
        inAFunctionAbstractDirectDeclarator(node);
        if(node.getAbstractFunctionPointerDeclarator() != null)
        {
            node.getAbstractFunctionPointerDeclarator().apply(this);
        }
        outAFunctionAbstractDirectDeclarator(node);
    }

    public void inAIntegerAbstractArrayDeclarator(AIntegerAbstractArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIntegerAbstractArrayDeclarator(AIntegerAbstractArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIntegerAbstractArrayDeclarator(AIntegerAbstractArrayDeclarator node)
    {
        inAIntegerAbstractArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAIntegerAbstractArrayDeclarator(node);
    }

    public void inAPointerAbstractArrayDeclarator(APointerAbstractArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerAbstractArrayDeclarator(APointerAbstractArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerAbstractArrayDeclarator(APointerAbstractArrayDeclarator node)
    {
        inAPointerAbstractArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getAbstractPointer() != null)
        {
            node.getAbstractPointer().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPointerAbstractArrayDeclarator(node);
    }

    public void inAArrayAbstractArrayDeclarator(AArrayAbstractArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayAbstractArrayDeclarator(AArrayAbstractArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayAbstractArrayDeclarator(AArrayAbstractArrayDeclarator node)
    {
        inAArrayAbstractArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getAbstractArrayDeclarator() != null)
        {
            node.getAbstractArrayDeclarator().apply(this);
        }
        outAArrayAbstractArrayDeclarator(node);
    }

    public void inAAbstractFunctionPointerDeclarator(AAbstractFunctionPointerDeclarator node)
    {
        defaultIn(node);
    }

    public void outAAbstractFunctionPointerDeclarator(AAbstractFunctionPointerDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAAbstractFunctionPointerDeclarator(AAbstractFunctionPointerDeclarator node)
    {
        inAAbstractFunctionPointerDeclarator(node);
        if(node.getPlrp() != null)
        {
            node.getPlrp().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getPllp() != null)
        {
            node.getPllp().apply(this);
        }
        if(node.getPrp() != null)
        {
            node.getPrp().apply(this);
        }
        if(node.getAbstractPointer() != null)
        {
            node.getAbstractPointer().apply(this);
        }
        if(node.getPlp() != null)
        {
            node.getPlp().apply(this);
        }
        outAAbstractFunctionPointerDeclarator(node);
    }

    public void inAParameterListTail(AParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAParameterListTail(AParameterListTail node)
    {
        defaultOut(node);
    }

    public void caseAParameterListTail(AParameterListTail node)
    {
        inAParameterListTail(node);
        if(node.getParameterDeclaration() != null)
        {
            node.getParameterDeclaration().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParameterListTail(node);
    }

    public void inAUnionDeclaration(AUnionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAUnionDeclaration(AUnionDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAUnionDeclaration(AUnionDeclaration node)
    {
        inAUnionDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getMemberDeclaration().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMemberDeclaration) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        outAUnionDeclaration(node);
    }

    public void inAEnumDeclaration(AEnumDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclaration(AEnumDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        inAEnumDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getAdditionalEnumerator().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAdditionalEnumerator) temp[i]).apply(this);
            }
        }
        if(node.getEnumerator() != null)
        {
            node.getEnumerator().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        outAEnumDeclaration(node);
    }

    public void inAAdditionalEnumerator(AAdditionalEnumerator node)
    {
        defaultIn(node);
    }

    public void outAAdditionalEnumerator(AAdditionalEnumerator node)
    {
        defaultOut(node);
    }

    public void caseAAdditionalEnumerator(AAdditionalEnumerator node)
    {
        inAAdditionalEnumerator(node);
        if(node.getEnumerator() != null)
        {
            node.getEnumerator().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalEnumerator(node);
    }

    public void inAAutomaticEnumerator(AAutomaticEnumerator node)
    {
        defaultIn(node);
    }

    public void outAAutomaticEnumerator(AAutomaticEnumerator node)
    {
        defaultOut(node);
    }

    public void caseAAutomaticEnumerator(AAutomaticEnumerator node)
    {
        inAAutomaticEnumerator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAutomaticEnumerator(node);
    }

    public void inASpecificEnumerator(ASpecificEnumerator node)
    {
        defaultIn(node);
    }

    public void outASpecificEnumerator(ASpecificEnumerator node)
    {
        defaultOut(node);
    }

    public void caseASpecificEnumerator(ASpecificEnumerator node)
    {
        inASpecificEnumerator(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASpecificEnumerator(node);
    }

    public void inATypedefDeclaration(ATypedefDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypedefDeclaration(ATypedefDeclaration node)
    {
        defaultOut(node);
    }

    public void caseATypedefDeclaration(ATypedefDeclaration node)
    {
        inATypedefDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getTypedef() != null)
        {
            node.getTypedef().apply(this);
        }
        outATypedefDeclaration(node);
    }

    public void inAIdentifierTypedefDeclaration(AIdentifierTypedefDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTypedefDeclaration(AIdentifierTypedefDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierTypedefDeclaration(AIdentifierTypedefDeclaration node)
    {
        inAIdentifierTypedefDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypedef() != null)
        {
            node.getTypedef().apply(this);
        }
        outAIdentifierTypedefDeclaration(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        inAIdentifierFunctionDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFunctionDeclaration(node);
    }

    public void inAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        inAPointerFunctionDeclarator(node);
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        outAPointerFunctionDeclarator(node);
    }

    public void inADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        inADirectFunctionDeclarator(node);
        if(node.getDirectFunctionDeclarator() != null)
        {
            node.getDirectFunctionDeclarator().apply(this);
        }
        outADirectFunctionDeclarator(node);
    }

    public void inADirectPointerFunction(ADirectPointerFunction node)
    {
        defaultIn(node);
    }

    public void outADirectPointerFunction(ADirectPointerFunction node)
    {
        defaultOut(node);
    }

    public void caseADirectPointerFunction(ADirectPointerFunction node)
    {
        inADirectPointerFunction(node);
        if(node.getDirectFunctionDeclarator() != null)
        {
            node.getDirectFunctionDeclarator().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outADirectPointerFunction(node);
    }

    public void inAPointerPointerFunction(APointerPointerFunction node)
    {
        defaultIn(node);
    }

    public void outAPointerPointerFunction(APointerPointerFunction node)
    {
        defaultOut(node);
    }

    public void caseAPointerPointerFunction(APointerPointerFunction node)
    {
        inAPointerPointerFunction(node);
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAPointerPointerFunction(node);
    }

    public void inAArrayDirectFunctionDeclarator(AArrayDirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDirectFunctionDeclarator(AArrayDirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayDirectFunctionDeclarator(AArrayDirectFunctionDeclarator node)
    {
        inAArrayDirectFunctionDeclarator(node);
        if(node.getArrayFunctionDeclarator() != null)
        {
            node.getArrayFunctionDeclarator().apply(this);
        }
        outAArrayDirectFunctionDeclarator(node);
    }

    public void inAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        inAIdentifierDirectFunctionDeclarator(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierDirectFunctionDeclarator(node);
    }

    public void inAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        inAFunctionDirectFunctionDeclarator(node);
        if(node.getPlrp() != null)
        {
            node.getPlrp().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getPllp() != null)
        {
            node.getPllp().apply(this);
        }
        if(node.getPrp() != null)
        {
            node.getPrp().apply(this);
        }
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        if(node.getPlp() != null)
        {
            node.getPlp().apply(this);
        }
        outAFunctionDirectFunctionDeclarator(node);
    }

    public void inAPointerArrayFunctionDeclarator(APointerArrayFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerArrayFunctionDeclarator(APointerArrayFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAPointerArrayFunctionDeclarator(APointerArrayFunctionDeclarator node)
    {
        inAPointerArrayFunctionDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPointerArrayFunctionDeclarator(node);
    }

    public void inAArrayArrayFunctionDeclarator(AArrayArrayFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayArrayFunctionDeclarator(AArrayArrayFunctionDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayArrayFunctionDeclarator(AArrayArrayFunctionDeclarator node)
    {
        inAArrayArrayFunctionDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getArrayFunctionDeclarator() != null)
        {
            node.getArrayFunctionDeclarator().apply(this);
        }
        outAArrayArrayFunctionDeclarator(node);
    }

    public void inAVariableDeclaration(AVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaration(AVariableDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        inAVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            Object temp[] = node.getAdditionalDeclarator().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAdditionalDeclarator) temp[i]).apply(this);
            }
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAVariableDeclaration(node);
    }

    public void inAIdentifierVariableDeclaration(AIdentifierVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdentifierVariableDeclaration(AIdentifierVariableDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierVariableDeclaration(AIdentifierVariableDeclaration node)
    {
        inAIdentifierVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            Object temp[] = node.getAdditionalDeclarator().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAdditionalDeclarator) temp[i]).apply(this);
            }
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierVariableDeclaration(node);
    }

    public void inAAdditionalDeclarator(AAdditionalDeclarator node)
    {
        defaultIn(node);
    }

    public void outAAdditionalDeclarator(AAdditionalDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAAdditionalDeclarator(AAdditionalDeclarator node)
    {
        inAAdditionalDeclarator(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalDeclarator(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getFunctionBody() != null)
        {
            node.getFunctionBody().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAIdentifierFunctionDefinition(AIdentifierFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFunctionDefinition(AIdentifierFunctionDefinition node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFunctionDefinition(AIdentifierFunctionDefinition node)
    {
        inAIdentifierFunctionDefinition(node);
        if(node.getFunctionBody() != null)
        {
            node.getFunctionBody().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFunctionDefinition(node);
    }

    public void inAFunctionBody(AFunctionBody node)
    {
        defaultIn(node);
    }

    public void outAFunctionBody(AFunctionBody node)
    {
        defaultOut(node);
    }

    public void caseAFunctionBody(AFunctionBody node)
    {
        inAFunctionBody(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getVariableDeclaration().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PVariableDeclaration) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outAFunctionBody(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inACompStmtStatement(ACompStmtStatement node)
    {
        defaultIn(node);
    }

    public void outACompStmtStatement(ACompStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseACompStmtStatement(ACompStmtStatement node)
    {
        inACompStmtStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outACompStmtStatement(node);
    }

    public void inABasicStmtStatement(ABasicStmtStatement node)
    {
        defaultIn(node);
    }

    public void outABasicStmtStatement(ABasicStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseABasicStmtStatement(ABasicStmtStatement node)
    {
        inABasicStmtStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBasicStatement() != null)
        {
            node.getBasicStatement().apply(this);
        }
        outABasicStmtStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        inAIfThenElseStatement(node);
        if(node.getElseCompStmt() != null)
        {
            node.getElseCompStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenCompStmt() != null)
        {
            node.getThenCompStmt().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfThenElseStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inADoStatement(ADoStatement node)
    {
        defaultIn(node);
    }

    public void outADoStatement(ADoStatement node)
    {
        defaultOut(node);
    }

    public void caseADoStatement(ADoStatement node)
    {
        inADoStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outADoStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIter() != null)
        {
            node.getIter().apply(this);
        }
        if(node.getScTwo() != null)
        {
            node.getScTwo().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getScOne() != null)
        {
            node.getScOne().apply(this);
        }
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStatement(node);
    }

    public void inASwitchStatement(ASwitchStatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatement(ASwitchStatement node)
    {
        defaultOut(node);
    }

    public void caseASwitchStatement(ASwitchStatement node)
    {
        inASwitchStatement(node);
        if(node.getCaseStatements() != null)
        {
            node.getCaseStatements().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        outASwitchStatement(node);
    }

    public void inACallExpressionBasicStatement(ACallExpressionBasicStatement node)
    {
        defaultIn(node);
    }

    public void outACallExpressionBasicStatement(ACallExpressionBasicStatement node)
    {
        defaultOut(node);
    }

    public void caseACallExpressionBasicStatement(ACallExpressionBasicStatement node)
    {
        inACallExpressionBasicStatement(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outACallExpressionBasicStatement(node);
    }

    public void inAModifyExpressionBasicStatement(AModifyExpressionBasicStatement node)
    {
        defaultIn(node);
    }

    public void outAModifyExpressionBasicStatement(AModifyExpressionBasicStatement node)
    {
        defaultOut(node);
    }

    public void caseAModifyExpressionBasicStatement(AModifyExpressionBasicStatement node)
    {
        inAModifyExpressionBasicStatement(node);
        if(node.getModifyExpression() != null)
        {
            node.getModifyExpression().apply(this);
        }
        outAModifyExpressionBasicStatement(node);
    }

    public void inADead1BasicStatement(ADead1BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead1BasicStatement(ADead1BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead1BasicStatement(ADead1BasicStatement node)
    {
        inADead1BasicStatement(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outADead1BasicStatement(node);
    }

    public void inADead2BasicStatement(ADead2BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead2BasicStatement(ADead2BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead2BasicStatement(ADead2BasicStatement node)
    {
        inADead2BasicStatement(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADead2BasicStatement(node);
    }

    public void inADead3BasicStatement(ADead3BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead3BasicStatement(ADead3BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead3BasicStatement(ADead3BasicStatement node)
    {
        inADead3BasicStatement(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getAmpersand() != null)
        {
            node.getAmpersand().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADead3BasicStatement(node);
    }

    public void inADead4BasicStatement(ADead4BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead4BasicStatement(ADead4BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead4BasicStatement(ADead4BasicStatement node)
    {
        inADead4BasicStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outADead4BasicStatement(node);
    }

    public void inADead5BasicStatement(ADead5BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead5BasicStatement(ADead5BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead5BasicStatement(ADead5BasicStatement node)
    {
        inADead5BasicStatement(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADead5BasicStatement(node);
    }

    public void inADead6BasicStatement(ADead6BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead6BasicStatement(ADead6BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead6BasicStatement(ADead6BasicStatement node)
    {
        inADead6BasicStatement(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADead6BasicStatement(node);
    }

    public void inADead7BasicStatement(ADead7BasicStatement node)
    {
        defaultIn(node);
    }

    public void outADead7BasicStatement(ADead7BasicStatement node)
    {
        defaultOut(node);
    }

    public void caseADead7BasicStatement(ADead7BasicStatement node)
    {
        inADead7BasicStatement(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outADead7BasicStatement(node);
    }

    public void inABinaryRhs(ABinaryRhs node)
    {
        defaultIn(node);
    }

    public void outABinaryRhs(ABinaryRhs node)
    {
        defaultOut(node);
    }

    public void caseABinaryRhs(ABinaryRhs node)
    {
        inABinaryRhs(node);
        if(node.getBinaryExpression() != null)
        {
            node.getBinaryExpression().apply(this);
        }
        outABinaryRhs(node);
    }

    public void inAUnaryRhs(AUnaryRhs node)
    {
        defaultIn(node);
    }

    public void outAUnaryRhs(AUnaryRhs node)
    {
        defaultOut(node);
    }

    public void caseAUnaryRhs(AUnaryRhs node)
    {
        inAUnaryRhs(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAUnaryRhs(node);
    }

    public void inAIdentifierBinaryExpression(AIdentifierBinaryExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierBinaryExpression(AIdentifierBinaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierBinaryExpression(AIdentifierBinaryExpression node)
    {
        inAIdentifierBinaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getBinop() != null)
        {
            node.getBinop().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAIdentifierBinaryExpression(node);
    }

    public void inAConstantBinaryExpression(AConstantBinaryExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantBinaryExpression(AConstantBinaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAConstantBinaryExpression(AConstantBinaryExpression node)
    {
        inAConstantBinaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getBinop() != null)
        {
            node.getBinop().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAConstantBinaryExpression(node);
    }

    public void inABinaryExpression(ABinaryExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryExpression(ABinaryExpression node)
    {
        defaultOut(node);
    }

    public void caseABinaryExpression(ABinaryExpression node)
    {
        inABinaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getRValue() != null)
        {
            node.getRValue().apply(this);
        }
        if(node.getBinop() != null)
        {
            node.getBinop().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outABinaryExpression(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inAConstantValue(AConstantValue node)
    {
        defaultIn(node);
    }

    public void outAConstantValue(AConstantValue node)
    {
        defaultOut(node);
    }

    public void caseAConstantValue(AConstantValue node)
    {
        inAConstantValue(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAConstantValue(node);
    }

    public void inAFloatingConstant(AFloatingConstant node)
    {
        defaultIn(node);
    }

    public void outAFloatingConstant(AFloatingConstant node)
    {
        defaultOut(node);
    }

    public void caseAFloatingConstant(AFloatingConstant node)
    {
        inAFloatingConstant(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outAFloatingConstant(node);
    }

    public void inAStringConstant(AStringConstant node)
    {
        defaultIn(node);
    }

    public void outAStringConstant(AStringConstant node)
    {
        defaultOut(node);
    }

    public void caseAStringConstant(AStringConstant node)
    {
        inAStringConstant(node);
        if(node.getStringLitteral() != null)
        {
            node.getStringLitteral().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outAStringConstant(node);
    }

    public void inAIntegerConstant(AIntegerConstant node)
    {
        defaultIn(node);
    }

    public void outAIntegerConstant(AIntegerConstant node)
    {
        defaultOut(node);
    }

    public void caseAIntegerConstant(AIntegerConstant node)
    {
        inAIntegerConstant(node);
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outAIntegerConstant(node);
    }

    public void inACharacterConstant(ACharacterConstant node)
    {
        defaultIn(node);
    }

    public void outACharacterConstant(ACharacterConstant node)
    {
        defaultOut(node);
    }

    public void caseACharacterConstant(ACharacterConstant node)
    {
        inACharacterConstant(node);
        if(node.getCharacterConstant() != null)
        {
            node.getCharacterConstant().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outACharacterConstant(node);
    }

    public void inARelopBinop(ARelopBinop node)
    {
        defaultIn(node);
    }

    public void outARelopBinop(ARelopBinop node)
    {
        defaultOut(node);
    }

    public void caseARelopBinop(ARelopBinop node)
    {
        inARelopBinop(node);
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        outARelopBinop(node);
    }

    public void inAStarBinop(AStarBinop node)
    {
        defaultIn(node);
    }

    public void outAStarBinop(AStarBinop node)
    {
        defaultOut(node);
    }

    public void caseAStarBinop(AStarBinop node)
    {
        inAStarBinop(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarBinop(node);
    }

    public void inADivBinop(ADivBinop node)
    {
        defaultIn(node);
    }

    public void outADivBinop(ADivBinop node)
    {
        defaultOut(node);
    }

    public void caseADivBinop(ADivBinop node)
    {
        inADivBinop(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivBinop(node);
    }

    public void inAModBinop(AModBinop node)
    {
        defaultIn(node);
    }

    public void outAModBinop(AModBinop node)
    {
        defaultOut(node);
    }

    public void caseAModBinop(AModBinop node)
    {
        inAModBinop(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModBinop(node);
    }

    public void inAAmpersandBinop(AAmpersandBinop node)
    {
        defaultIn(node);
    }

    public void outAAmpersandBinop(AAmpersandBinop node)
    {
        defaultOut(node);
    }

    public void caseAAmpersandBinop(AAmpersandBinop node)
    {
        inAAmpersandBinop(node);
        if(node.getAmpersand() != null)
        {
            node.getAmpersand().apply(this);
        }
        outAAmpersandBinop(node);
    }

    public void inAPlusBinop(APlusBinop node)
    {
        defaultIn(node);
    }

    public void outAPlusBinop(APlusBinop node)
    {
        defaultOut(node);
    }

    public void caseAPlusBinop(APlusBinop node)
    {
        inAPlusBinop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusBinop(node);
    }

    public void inAMinusBinop(AMinusBinop node)
    {
        defaultIn(node);
    }

    public void outAMinusBinop(AMinusBinop node)
    {
        defaultOut(node);
    }

    public void caseAMinusBinop(AMinusBinop node)
    {
        inAMinusBinop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusBinop(node);
    }

    public void inACaretBinop(ACaretBinop node)
    {
        defaultIn(node);
    }

    public void outACaretBinop(ACaretBinop node)
    {
        defaultOut(node);
    }

    public void caseACaretBinop(ACaretBinop node)
    {
        inACaretBinop(node);
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        outACaretBinop(node);
    }

    public void inAExclMarkBinop(AExclMarkBinop node)
    {
        defaultIn(node);
    }

    public void outAExclMarkBinop(AExclMarkBinop node)
    {
        defaultOut(node);
    }

    public void caseAExclMarkBinop(AExclMarkBinop node)
    {
        inAExclMarkBinop(node);
        if(node.getExclMark() != null)
        {
            node.getExclMark().apply(this);
        }
        outAExclMarkBinop(node);
    }

    public void inABarBinop(ABarBinop node)
    {
        defaultIn(node);
    }

    public void outABarBinop(ABarBinop node)
    {
        defaultOut(node);
    }

    public void caseABarBinop(ABarBinop node)
    {
        inABarBinop(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outABarBinop(node);
    }

    public void inAShlBinop(AShlBinop node)
    {
        defaultIn(node);
    }

    public void outAShlBinop(AShlBinop node)
    {
        defaultOut(node);
    }

    public void caseAShlBinop(AShlBinop node)
    {
        inAShlBinop(node);
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        outAShlBinop(node);
    }

    public void inAShrBinop(AShrBinop node)
    {
        defaultIn(node);
    }

    public void outAShrBinop(AShrBinop node)
    {
        defaultOut(node);
    }

    public void caseAShrBinop(AShrBinop node)
    {
        inAShrBinop(node);
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        outAShrBinop(node);
    }

    public void inAAmpersandAmpersandBinop(AAmpersandAmpersandBinop node)
    {
        defaultIn(node);
    }

    public void outAAmpersandAmpersandBinop(AAmpersandAmpersandBinop node)
    {
        defaultOut(node);
    }

    public void caseAAmpersandAmpersandBinop(AAmpersandAmpersandBinop node)
    {
        inAAmpersandAmpersandBinop(node);
        if(node.getAmpersandAmpersand() != null)
        {
            node.getAmpersandAmpersand().apply(this);
        }
        outAAmpersandAmpersandBinop(node);
    }

    public void inABarBarBinop(ABarBarBinop node)
    {
        defaultIn(node);
    }

    public void outABarBarBinop(ABarBarBinop node)
    {
        defaultOut(node);
    }

    public void caseABarBarBinop(ABarBarBinop node)
    {
        inABarBarBinop(node);
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        outABarBarBinop(node);
    }

    public void inAEqRelop(AEqRelop node)
    {
        defaultIn(node);
    }

    public void outAEqRelop(AEqRelop node)
    {
        defaultOut(node);
    }

    public void caseAEqRelop(AEqRelop node)
    {
        inAEqRelop(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqRelop(node);
    }

    public void inANeqRelop(ANeqRelop node)
    {
        defaultIn(node);
    }

    public void outANeqRelop(ANeqRelop node)
    {
        defaultOut(node);
    }

    public void caseANeqRelop(ANeqRelop node)
    {
        inANeqRelop(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqRelop(node);
    }

    public void inALtRelop(ALtRelop node)
    {
        defaultIn(node);
    }

    public void outALtRelop(ALtRelop node)
    {
        defaultOut(node);
    }

    public void caseALtRelop(ALtRelop node)
    {
        inALtRelop(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtRelop(node);
    }

    public void inALteqRelop(ALteqRelop node)
    {
        defaultIn(node);
    }

    public void outALteqRelop(ALteqRelop node)
    {
        defaultOut(node);
    }

    public void caseALteqRelop(ALteqRelop node)
    {
        inALteqRelop(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqRelop(node);
    }

    public void inAGtRelop(AGtRelop node)
    {
        defaultIn(node);
    }

    public void outAGtRelop(AGtRelop node)
    {
        defaultOut(node);
    }

    public void caseAGtRelop(AGtRelop node)
    {
        inAGtRelop(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtRelop(node);
    }

    public void inAGteqRelop(AGteqRelop node)
    {
        defaultIn(node);
    }

    public void outAGteqRelop(AGteqRelop node)
    {
        defaultOut(node);
    }

    public void caseAGteqRelop(AGteqRelop node)
    {
        inAGteqRelop(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqRelop(node);
    }

    public void inASimpleUnaryExpression(ASimpleUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleUnaryExpression(ASimpleUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseASimpleUnaryExpression(ASimpleUnaryExpression node)
    {
        inASimpleUnaryExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleUnaryExpression(node);
    }

    public void inAReferenceUnaryExpression(AReferenceUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceUnaryExpression(AReferenceUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAReferenceUnaryExpression(AReferenceUnaryExpression node)
    {
        inAReferenceUnaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAReferenceUnaryExpression(node);
    }

    public void inAAddressUnaryExpression(AAddressUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAAddressUnaryExpression(AAddressUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddressUnaryExpression(AAddressUnaryExpression node)
    {
        inAAddressUnaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getAmpersand() != null)
        {
            node.getAmpersand().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAAddressUnaryExpression(node);
    }

    public void inACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseACallUnaryExpression(ACallUnaryExpression node)
    {
        inACallUnaryExpression(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outACallUnaryExpression(node);
    }

    public void inAUnopUnaryExpression(AUnopUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnopUnaryExpression(AUnopUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAUnopUnaryExpression(AUnopUnaryExpression node)
    {
        inAUnopUnaryExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        outAUnopUnaryExpression(node);
    }

    public void inAParUnopUnaryExpression(AParUnopUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParUnopUnaryExpression(AParUnopUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAParUnopUnaryExpression(AParUnopUnaryExpression node)
    {
        inAParUnopUnaryExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnop() != null)
        {
            node.getUnop().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParUnopUnaryExpression(node);
    }

    public void inACastUnaryExpression(ACastUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outACastUnaryExpression(ACastUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseACastUnaryExpression(ACastUnaryExpression node)
    {
        inACastUnaryExpression(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACastUnaryExpression(node);
    }

    public void inACastConstUnaryExpression(ACastConstUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outACastConstUnaryExpression(ACastConstUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseACastConstUnaryExpression(ACastConstUnaryExpression node)
    {
        inACastConstUnaryExpression(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACastConstUnaryExpression(node);
    }

    public void inAVarnameSimpleExpression(AVarnameSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAVarnameSimpleExpression(AVarnameSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAVarnameSimpleExpression(AVarnameSimpleExpression node)
    {
        inAVarnameSimpleExpression(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        outAVarnameSimpleExpression(node);
    }

    public void inAConstantSimpleExpression(AConstantSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantSimpleExpression(AConstantSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAConstantSimpleExpression(AConstantSimpleExpression node)
    {
        inAConstantSimpleExpression(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAConstantSimpleExpression(node);
    }

    public void inAArrayrefVarname(AArrayrefVarname node)
    {
        defaultIn(node);
    }

    public void outAArrayrefVarname(AArrayrefVarname node)
    {
        defaultOut(node);
    }

    public void caseAArrayrefVarname(AArrayrefVarname node)
    {
        inAArrayrefVarname(node);
        if(node.getArrayref() != null)
        {
            node.getArrayref().apply(this);
        }
        outAArrayrefVarname(node);
    }

    public void inAComprefVarname(AComprefVarname node)
    {
        defaultIn(node);
    }

    public void outAComprefVarname(AComprefVarname node)
    {
        defaultOut(node);
    }

    public void caseAComprefVarname(AComprefVarname node)
    {
        inAComprefVarname(node);
        if(node.getCompref() != null)
        {
            node.getCompref().apply(this);
        }
        outAComprefVarname(node);
    }

    public void inAIdentifierVarname(AIdentifierVarname node)
    {
        defaultIn(node);
    }

    public void outAIdentifierVarname(AIdentifierVarname node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierVarname(AIdentifierVarname node)
    {
        inAIdentifierVarname(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierVarname(node);
    }

    public void inAArrayref(AArrayref node)
    {
        defaultIn(node);
    }

    public void outAArrayref(AArrayref node)
    {
        defaultOut(node);
    }

    public void caseAArrayref(AArrayref node)
    {
        inAArrayref(node);
        {
            Object temp[] = node.getReflist().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PReflist) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayref(node);
    }

    public void inAReflist(AReflist node)
    {
        defaultIn(node);
    }

    public void outAReflist(AReflist node)
    {
        defaultOut(node);
    }

    public void caseAReflist(AReflist node)
    {
        inAReflist(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAReflist(node);
    }

    public void inAIndirectCompref(AIndirectCompref node)
    {
        defaultIn(node);
    }

    public void outAIndirectCompref(AIndirectCompref node)
    {
        defaultOut(node);
    }

    public void caseAIndirectCompref(AIndirectCompref node)
    {
        inAIndirectCompref(node);
        {
            Object temp[] = node.getIdlist().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PIdlist) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAIndirectCompref(node);
    }

    public void inADirectCompref(ADirectCompref node)
    {
        defaultIn(node);
    }

    public void outADirectCompref(ADirectCompref node)
    {
        defaultOut(node);
    }

    public void caseADirectCompref(ADirectCompref node)
    {
        inADirectCompref(node);
        {
            Object temp[] = node.getIdlist().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PIdlist) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADirectCompref(node);
    }

    public void inAIdlist(AIdlist node)
    {
        defaultIn(node);
    }

    public void outAIdlist(AIdlist node)
    {
        defaultOut(node);
    }

    public void caseAIdlist(AIdlist node)
    {
        inAIdlist(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAIdlist(node);
    }

    public void inACallExpression(ACallExpression node)
    {
        defaultIn(node);
    }

    public void outACallExpression(ACallExpression node)
    {
        defaultOut(node);
    }

    public void caseACallExpression(ACallExpression node)
    {
        inACallExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACallExpression(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        {
            Object temp[] = node.getArglistTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArglistTail) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArglist(node);
    }

    public void inAArglistTail(AArglistTail node)
    {
        defaultIn(node);
    }

    public void outAArglistTail(AArglistTail node)
    {
        defaultOut(node);
    }

    public void caseAArglistTail(AArglistTail node)
    {
        inAArglistTail(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArglistTail(node);
    }

    public void inAPlusUnop(APlusUnop node)
    {
        defaultIn(node);
    }

    public void outAPlusUnop(APlusUnop node)
    {
        defaultOut(node);
    }

    public void caseAPlusUnop(APlusUnop node)
    {
        inAPlusUnop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnop(node);
    }

    public void inAMinusUnop(AMinusUnop node)
    {
        defaultIn(node);
    }

    public void outAMinusUnop(AMinusUnop node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnop(AMinusUnop node)
    {
        inAMinusUnop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnop(node);
    }

    public void inATildeUnop(ATildeUnop node)
    {
        defaultIn(node);
    }

    public void outATildeUnop(ATildeUnop node)
    {
        defaultOut(node);
    }

    public void caseATildeUnop(ATildeUnop node)
    {
        inATildeUnop(node);
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        outATildeUnop(node);
    }

    public void inAExclMarkUnop(AExclMarkUnop node)
    {
        defaultIn(node);
    }

    public void outAExclMarkUnop(AExclMarkUnop node)
    {
        defaultOut(node);
    }

    public void caseAExclMarkUnop(AExclMarkUnop node)
    {
        inAExclMarkUnop(node);
        if(node.getExclMark() != null)
        {
            node.getExclMark().apply(this);
        }
        outAExclMarkUnop(node);
    }

    public void inATypeName(ATypeName node)
    {
        defaultIn(node);
    }

    public void outATypeName(ATypeName node)
    {
        defaultOut(node);
    }

    public void caseATypeName(ATypeName node)
    {
        inATypeName(node);
        if(node.getAbstractDeclarator() != null)
        {
            node.getAbstractDeclarator().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outATypeName(node);
    }

    public void inAIdentifierTypeName(AIdentifierTypeName node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTypeName(AIdentifierTypeName node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierTypeName(AIdentifierTypeName node)
    {
        inAIdentifierTypeName(node);
        if(node.getAbstractDeclarator() != null)
        {
            node.getAbstractDeclarator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierTypeName(node);
    }

    public void inADirectModifyExpression(ADirectModifyExpression node)
    {
        defaultIn(node);
    }

    public void outADirectModifyExpression(ADirectModifyExpression node)
    {
        defaultOut(node);
    }

    public void caseADirectModifyExpression(ADirectModifyExpression node)
    {
        inADirectModifyExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        outADirectModifyExpression(node);
    }

    public void inAIndirectModifyExpression(AIndirectModifyExpression node)
    {
        defaultIn(node);
    }

    public void outAIndirectModifyExpression(AIndirectModifyExpression node)
    {
        defaultOut(node);
    }

    public void caseAIndirectModifyExpression(AIndirectModifyExpression node)
    {
        inAIndirectModifyExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAIndirectModifyExpression(node);
    }

    public void inARelConditionalExpression(ARelConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outARelConditionalExpression(ARelConditionalExpression node)
    {
        defaultOut(node);
    }

    public void caseARelConditionalExpression(ARelConditionalExpression node)
    {
        inARelConditionalExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outARelConditionalExpression(node);
    }

    public void inAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueConditionalExpression(AValueConditionalExpression node)
    {
        inAValueConditionalExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueConditionalExpression(node);
    }

    public void inACaseStatements(ACaseStatements node)
    {
        defaultIn(node);
    }

    public void outACaseStatements(ACaseStatements node)
    {
        defaultOut(node);
    }

    public void caseACaseStatements(ACaseStatements node)
    {
        inACaseStatements(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getDefaultStatement() != null)
        {
            node.getDefaultStatement().apply(this);
        }
        {
            Object temp[] = node.getCaseStatement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCaseStatement) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outACaseStatements(node);
    }

    public void inABodyCaseStatement(ABodyCaseStatement node)
    {
        defaultIn(node);
    }

    public void outABodyCaseStatement(ABodyCaseStatement node)
    {
        defaultOut(node);
    }

    public void caseABodyCaseStatement(ABodyCaseStatement node)
    {
        inABodyCaseStatement(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outABodyCaseStatement(node);
    }

    public void inAEmptyCaseStatement(AEmptyCaseStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyCaseStatement(AEmptyCaseStatement node)
    {
        defaultOut(node);
    }

    public void caseAEmptyCaseStatement(AEmptyCaseStatement node)
    {
        inAEmptyCaseStatement(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAEmptyCaseStatement(node);
    }

    public void inABreakStopStatement(ABreakStopStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStopStatement(ABreakStopStatement node)
    {
        defaultOut(node);
    }

    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        inABreakStopStatement(node);
        {
            Object temp[] = node.getDeadCode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeadCode) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStopStatement(node);
    }

    public void inAContinueStopStatement(AContinueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStopStatement(AContinueStopStatement node)
    {
        defaultOut(node);
    }

    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        inAContinueStopStatement(node);
        {
            Object temp[] = node.getDeadCode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeadCode) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outAContinueStopStatement(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        {
            Object temp[] = node.getDeadCode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeadCode) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStopStatement(node);
    }

    public void inAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        inAReturnValueStopStatement(node);
        {
            Object temp[] = node.getDeadCode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeadCode) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnValueStopStatement(node);
    }

    public void inAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnParStopStatement(AReturnParStopStatement node)
    {
        inAReturnParStopStatement(node);
        {
            Object temp[] = node.getDeadCode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeadCode) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnParStopStatement(node);
    }

    public void inADead1DeadCode(ADead1DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead1DeadCode(ADead1DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead1DeadCode(ADead1DeadCode node)
    {
        inADead1DeadCode(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outADead1DeadCode(node);
    }

    public void inADead2DeadCode(ADead2DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead2DeadCode(ADead2DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead2DeadCode(ADead2DeadCode node)
    {
        inADead2DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outADead2DeadCode(node);
    }

    public void inADead3DeadCode(ADead3DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead3DeadCode(ADead3DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead3DeadCode(ADead3DeadCode node)
    {
        inADead3DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outADead3DeadCode(node);
    }

    public void inADead4DeadCode(ADead4DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead4DeadCode(ADead4DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead4DeadCode(ADead4DeadCode node)
    {
        inADead4DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead4DeadCode(node);
    }

    public void inADead5DeadCode(ADead5DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead5DeadCode(ADead5DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead5DeadCode(ADead5DeadCode node)
    {
        inADead5DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead5DeadCode(node);
    }

    public void inADead6DeadCode(ADead6DeadCode node)
    {
        defaultIn(node);
    }

    public void outADead6DeadCode(ADead6DeadCode node)
    {
        defaultOut(node);
    }

    public void caseADead6DeadCode(ADead6DeadCode node)
    {
        inADead6DeadCode(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outADead6DeadCode(node);
    }

    public void inABodyDefaultStatement(ABodyDefaultStatement node)
    {
        defaultIn(node);
    }

    public void outABodyDefaultStatement(ABodyDefaultStatement node)
    {
        defaultOut(node);
    }

    public void caseABodyDefaultStatement(ABodyDefaultStatement node)
    {
        inABodyDefaultStatement(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        outABodyDefaultStatement(node);
    }

    public void inAEmptyDefaultStatement(AEmptyDefaultStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyDefaultStatement(AEmptyDefaultStatement node)
    {
        defaultOut(node);
    }

    public void caseAEmptyDefaultStatement(AEmptyDefaultStatement node)
    {
        inAEmptyDefaultStatement(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        outAEmptyDefaultStatement(node);
    }
}
