/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.analysis;

import java.util.*;
import org.nitlanguage.gen.simplec.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseATranslationUnit(ATranslationUnit node)
    {
        defaultCase(node);
    }

    public void caseAStructDeclarationDeclarationOrDefinition(AStructDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAUnionDeclarationDeclarationOrDefinition(AUnionDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAEnumDeclarationDeclarationOrDefinition(AEnumDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseATypedefDeclarationDeclarationOrDefinition(ATypedefDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclarationDeclarationOrDefinition(AFunctionDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclarationDeclarationOrDefinition(AVariableDeclarationDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDefinitionDeclarationOrDefinition(AFunctionDefinitionDeclarationOrDefinition node)
    {
        defaultCase(node);
    }

    public void caseAStructDeclaration(AStructDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMemberDeclaration(AMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVoidTypeSpecifier(AVoidTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseACharTypeSpecifier(ACharTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedCharTypeSpecifier(ASignedCharTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedShortTypeSpecifier(ASignedShortTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedIntTypeSpecifier(ASignedIntTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedLongTypeSpecifier(ASignedLongTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedCharTypeSpecifier(AUnsignedCharTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedShortTypeSpecifier(AUnsignedShortTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedIntTypeSpecifier(AUnsignedIntTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedLongTypeSpecifier(AUnsignedLongTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseADoubleTypeSpecifier(ADoubleTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseALongDoubleTypeSpecifier(ALongDoubleTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAStructTypeSpecifier(AStructTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnionTypeSpecifier(AUnionTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAEnumTypeSpecifier(AEnumTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseATypedefTypeSpecifier(ATypedefTypeSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAVoidSpecifier(AVoidSpecifier node)
    {
        defaultCase(node);
    }

    public void caseACharSpecifier(ACharSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedCharSpecifier(ASignedCharSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAShortSignedShortSpecifier(AShortSignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedShortSignedShortSpecifier(ASignedShortSignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAShortIntSignedShortSpecifier(AShortIntSignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedShortIntSignedShortSpecifier(ASignedShortIntSignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAIntSignedIntSpecifier(AIntSignedIntSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedSignedIntSpecifier(ASignedSignedIntSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedIntSignedIntSpecifier(ASignedIntSignedIntSpecifier node)
    {
        defaultCase(node);
    }

    public void caseALongSignedLongSpecifier(ALongSignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedLongSignedLongSpecifier(ASignedLongSignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseALongIntSignedLongSpecifier(ALongIntSignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseASignedLongIntSignedLongSpecifier(ASignedLongIntSignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedCharSpecifier(AUnsignedCharSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedShortUnsignedShortSpecifier(AUnsignedShortUnsignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedShortIntUnsignedShortSpecifier(AUnsignedShortIntUnsignedShortSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedUnsignedIntSpecifier(AUnsignedUnsignedIntSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedIntUnsignedIntSpecifier(AUnsignedIntUnsignedIntSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedLongUnsignedLongSpecifier(AUnsignedLongUnsignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedLongIntUnsignedLongSpecifier(AUnsignedLongIntUnsignedLongSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAFloatSpecifier(AFloatSpecifier node)
    {
        defaultCase(node);
    }

    public void caseADoubleSpecifier(ADoubleSpecifier node)
    {
        defaultCase(node);
    }

    public void caseALongDoubleSpecifier(ALongDoubleSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAStructSpecifier(AStructSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAUnionSpecifier(AUnionSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAEnumSpecifier(AEnumSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAPointerDeclarator(APointerDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectDeclarator(ADirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectPointer(ADirectPointer node)
    {
        defaultCase(node);
    }

    public void caseAPointerPointer(APointerPointer node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDirectDeclarator(AIdentifierDirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAArrayDirectDeclarator(AArrayDirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDirectDeclarator(AFunctionDirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAPointerArrayDeclarator(APointerArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFunctionPointerDeclarator(AFunctionPointerDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAParameterList(AParameterList node)
    {
        defaultCase(node);
    }

    public void caseAParameterDeclaration(AParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAbstractParameterDeclaration(AAbstractParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierParameterDeclaration(AIdentifierParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAbstractIdentifierParameterDeclaration(AAbstractIdentifierParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAPointerAbstractDeclarator(APointerAbstractDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectAbstractDeclarator(ADirectAbstractDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectAbstractPointer(ADirectAbstractPointer node)
    {
        defaultCase(node);
    }

    public void caseAPointerAbstractPointer(APointerAbstractPointer node)
    {
        defaultCase(node);
    }

    public void caseAArrayAbstractDirectDeclarator(AArrayAbstractDirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFunctionAbstractDirectDeclarator(AFunctionAbstractDirectDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIntegerAbstractArrayDeclarator(AIntegerAbstractArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAPointerAbstractArrayDeclarator(APointerAbstractArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAArrayAbstractArrayDeclarator(AArrayAbstractArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAAbstractFunctionPointerDeclarator(AAbstractFunctionPointerDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAParameterListTail(AParameterListTail node)
    {
        defaultCase(node);
    }

    public void caseAUnionDeclaration(AUnionDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalEnumerator(AAdditionalEnumerator node)
    {
        defaultCase(node);
    }

    public void caseAAutomaticEnumerator(AAutomaticEnumerator node)
    {
        defaultCase(node);
    }

    public void caseASpecificEnumerator(ASpecificEnumerator node)
    {
        defaultCase(node);
    }

    public void caseATypedefDeclaration(ATypedefDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierTypedefDeclaration(AIdentifierTypedefDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseADirectPointerFunction(ADirectPointerFunction node)
    {
        defaultCase(node);
    }

    public void caseAPointerPointerFunction(APointerPointerFunction node)
    {
        defaultCase(node);
    }

    public void caseAArrayDirectFunctionDeclarator(AArrayDirectFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAPointerArrayFunctionDeclarator(APointerArrayFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAArrayArrayFunctionDeclarator(AArrayArrayFunctionDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierVariableDeclaration(AIdentifierVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalDeclarator(AAdditionalDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFunctionDefinition(AIdentifierFunctionDefinition node)
    {
        defaultCase(node);
    }

    public void caseAFunctionBody(AFunctionBody node)
    {
        defaultCase(node);
    }

    public void caseACompoundStatement(ACompoundStatement node)
    {
        defaultCase(node);
    }

    public void caseACompStmtStatement(ACompStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseABasicStmtStatement(ABasicStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseADoStatement(ADoStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseASwitchStatement(ASwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseACallExpressionBasicStatement(ACallExpressionBasicStatement node)
    {
        defaultCase(node);
    }

    public void caseAModifyExpressionBasicStatement(AModifyExpressionBasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead1BasicStatement(ADead1BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead2BasicStatement(ADead2BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead3BasicStatement(ADead3BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead4BasicStatement(ADead4BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead5BasicStatement(ADead5BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead6BasicStatement(ADead6BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseADead7BasicStatement(ADead7BasicStatement node)
    {
        defaultCase(node);
    }

    public void caseABinaryRhs(ABinaryRhs node)
    {
        defaultCase(node);
    }

    public void caseAUnaryRhs(AUnaryRhs node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierBinaryExpression(AIdentifierBinaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAConstantBinaryExpression(AConstantBinaryExpression node)
    {
        defaultCase(node);
    }

    public void caseABinaryExpression(ABinaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierValue(AIdentifierValue node)
    {
        defaultCase(node);
    }

    public void caseAConstantValue(AConstantValue node)
    {
        defaultCase(node);
    }

    public void caseAFloatingConstant(AFloatingConstant node)
    {
        defaultCase(node);
    }

    public void caseAStringConstant(AStringConstant node)
    {
        defaultCase(node);
    }

    public void caseAIntegerConstant(AIntegerConstant node)
    {
        defaultCase(node);
    }

    public void caseACharacterConstant(ACharacterConstant node)
    {
        defaultCase(node);
    }

    public void caseARelopBinop(ARelopBinop node)
    {
        defaultCase(node);
    }

    public void caseAStarBinop(AStarBinop node)
    {
        defaultCase(node);
    }

    public void caseADivBinop(ADivBinop node)
    {
        defaultCase(node);
    }

    public void caseAModBinop(AModBinop node)
    {
        defaultCase(node);
    }

    public void caseAAmpersandBinop(AAmpersandBinop node)
    {
        defaultCase(node);
    }

    public void caseAPlusBinop(APlusBinop node)
    {
        defaultCase(node);
    }

    public void caseAMinusBinop(AMinusBinop node)
    {
        defaultCase(node);
    }

    public void caseACaretBinop(ACaretBinop node)
    {
        defaultCase(node);
    }

    public void caseAExclMarkBinop(AExclMarkBinop node)
    {
        defaultCase(node);
    }

    public void caseABarBinop(ABarBinop node)
    {
        defaultCase(node);
    }

    public void caseAShlBinop(AShlBinop node)
    {
        defaultCase(node);
    }

    public void caseAShrBinop(AShrBinop node)
    {
        defaultCase(node);
    }

    public void caseAAmpersandAmpersandBinop(AAmpersandAmpersandBinop node)
    {
        defaultCase(node);
    }

    public void caseABarBarBinop(ABarBarBinop node)
    {
        defaultCase(node);
    }

    public void caseAEqRelop(AEqRelop node)
    {
        defaultCase(node);
    }

    public void caseANeqRelop(ANeqRelop node)
    {
        defaultCase(node);
    }

    public void caseALtRelop(ALtRelop node)
    {
        defaultCase(node);
    }

    public void caseALteqRelop(ALteqRelop node)
    {
        defaultCase(node);
    }

    public void caseAGtRelop(AGtRelop node)
    {
        defaultCase(node);
    }

    public void caseAGteqRelop(AGteqRelop node)
    {
        defaultCase(node);
    }

    public void caseASimpleUnaryExpression(ASimpleUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceUnaryExpression(AReferenceUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAAddressUnaryExpression(AAddressUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnopUnaryExpression(AUnopUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAParUnopUnaryExpression(AParUnopUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseACastUnaryExpression(ACastUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseACastConstUnaryExpression(ACastConstUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAVarnameSimpleExpression(AVarnameSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAConstantSimpleExpression(AConstantSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayrefVarname(AArrayrefVarname node)
    {
        defaultCase(node);
    }

    public void caseAComprefVarname(AComprefVarname node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierVarname(AIdentifierVarname node)
    {
        defaultCase(node);
    }

    public void caseAArrayref(AArrayref node)
    {
        defaultCase(node);
    }

    public void caseAReflist(AReflist node)
    {
        defaultCase(node);
    }

    public void caseAIndirectCompref(AIndirectCompref node)
    {
        defaultCase(node);
    }

    public void caseADirectCompref(ADirectCompref node)
    {
        defaultCase(node);
    }

    public void caseAIdlist(AIdlist node)
    {
        defaultCase(node);
    }

    public void caseACallExpression(ACallExpression node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseAArglistTail(AArglistTail node)
    {
        defaultCase(node);
    }

    public void caseAPlusUnop(APlusUnop node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnop(AMinusUnop node)
    {
        defaultCase(node);
    }

    public void caseATildeUnop(ATildeUnop node)
    {
        defaultCase(node);
    }

    public void caseAExclMarkUnop(AExclMarkUnop node)
    {
        defaultCase(node);
    }

    public void caseATypeName(ATypeName node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierTypeName(AIdentifierTypeName node)
    {
        defaultCase(node);
    }

    public void caseADirectModifyExpression(ADirectModifyExpression node)
    {
        defaultCase(node);
    }

    public void caseAIndirectModifyExpression(AIndirectModifyExpression node)
    {
        defaultCase(node);
    }

    public void caseARelConditionalExpression(ARelConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseACaseStatements(ACaseStatements node)
    {
        defaultCase(node);
    }

    public void caseABodyCaseStatement(ABodyCaseStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyCaseStatement(AEmptyCaseStatement node)
    {
        defaultCase(node);
    }

    public void caseABreakStopStatement(ABreakStopStatement node)
    {
        defaultCase(node);
    }

    public void caseAContinueStopStatement(AContinueStopStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultCase(node);
    }

    public void caseADead1DeadCode(ADead1DeadCode node)
    {
        defaultCase(node);
    }

    public void caseADead2DeadCode(ADead2DeadCode node)
    {
        defaultCase(node);
    }

    public void caseADead3DeadCode(ADead3DeadCode node)
    {
        defaultCase(node);
    }

    public void caseADead4DeadCode(ADead4DeadCode node)
    {
        defaultCase(node);
    }

    public void caseADead5DeadCode(ADead5DeadCode node)
    {
        defaultCase(node);
    }

    public void caseADead6DeadCode(ADead6DeadCode node)
    {
        defaultCase(node);
    }

    public void caseABodyDefaultStatement(ABodyDefaultStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyDefaultStatement(AEmptyDefaultStatement node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTAmpersand(TAmpersand node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    public void caseTExclMark(TExclMark node)
    {
        defaultCase(node);
    }

    public void caseTQuestMark(TQuestMark node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTEllipsis(TEllipsis node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTShl(TShl node)
    {
        defaultCase(node);
    }

    public void caseTShr(TShr node)
    {
        defaultCase(node);
    }

    public void caseTAmpersandAmpersand(TAmpersandAmpersand node)
    {
        defaultCase(node);
    }

    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    public void caseTStarEqual(TStarEqual node)
    {
        defaultCase(node);
    }

    public void caseTDivEqual(TDivEqual node)
    {
        defaultCase(node);
    }

    public void caseTModEqual(TModEqual node)
    {
        defaultCase(node);
    }

    public void caseTPlusEqual(TPlusEqual node)
    {
        defaultCase(node);
    }

    public void caseTMinusEqual(TMinusEqual node)
    {
        defaultCase(node);
    }

    public void caseTShlEqual(TShlEqual node)
    {
        defaultCase(node);
    }

    public void caseTShrEqual(TShrEqual node)
    {
        defaultCase(node);
    }

    public void caseTAmpersandEqual(TAmpersandEqual node)
    {
        defaultCase(node);
    }

    public void caseTCaretEqual(TCaretEqual node)
    {
        defaultCase(node);
    }

    public void caseTBarEqual(TBarEqual node)
    {
        defaultCase(node);
    }

    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTTypedef(TTypedef node)
    {
        defaultCase(node);
    }

    public void caseTExtern(TExtern node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTAuto(TAuto node)
    {
        defaultCase(node);
    }

    public void caseTRegister(TRegister node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    public void caseTSigned(TSigned node)
    {
        defaultCase(node);
    }

    public void caseTUnsigned(TUnsigned node)
    {
        defaultCase(node);
    }

    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    public void caseTUnion(TUnion node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    public void caseTVolatile(TVolatile node)
    {
        defaultCase(node);
    }

    public void caseTSizeof(TSizeof node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTFloatingConstant(TFloatingConstant node)
    {
        defaultCase(node);
    }

    public void caseTStringLitteral(TStringLitteral node)
    {
        defaultCase(node);
    }

    public void caseTIntegerConstant(TIntegerConstant node)
    {
        defaultCase(node);
    }

    public void caseTCharacterConstant(TCharacterConstant node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTPreprocessor(TPreprocessor node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
