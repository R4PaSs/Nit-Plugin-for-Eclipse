/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.analysis;

import org.nitlanguage.gen.simplec.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseATranslationUnit(ATranslationUnit node);
    void caseAStructDeclarationDeclarationOrDefinition(AStructDeclarationDeclarationOrDefinition node);
    void caseAUnionDeclarationDeclarationOrDefinition(AUnionDeclarationDeclarationOrDefinition node);
    void caseAEnumDeclarationDeclarationOrDefinition(AEnumDeclarationDeclarationOrDefinition node);
    void caseATypedefDeclarationDeclarationOrDefinition(ATypedefDeclarationDeclarationOrDefinition node);
    void caseAFunctionDeclarationDeclarationOrDefinition(AFunctionDeclarationDeclarationOrDefinition node);
    void caseAVariableDeclarationDeclarationOrDefinition(AVariableDeclarationDeclarationOrDefinition node);
    void caseAFunctionDefinitionDeclarationOrDefinition(AFunctionDefinitionDeclarationOrDefinition node);
    void caseAStructDeclaration(AStructDeclaration node);
    void caseAMemberDeclaration(AMemberDeclaration node);
    void caseAVoidTypeSpecifier(AVoidTypeSpecifier node);
    void caseACharTypeSpecifier(ACharTypeSpecifier node);
    void caseASignedCharTypeSpecifier(ASignedCharTypeSpecifier node);
    void caseASignedShortTypeSpecifier(ASignedShortTypeSpecifier node);
    void caseASignedIntTypeSpecifier(ASignedIntTypeSpecifier node);
    void caseASignedLongTypeSpecifier(ASignedLongTypeSpecifier node);
    void caseAUnsignedCharTypeSpecifier(AUnsignedCharTypeSpecifier node);
    void caseAUnsignedShortTypeSpecifier(AUnsignedShortTypeSpecifier node);
    void caseAUnsignedIntTypeSpecifier(AUnsignedIntTypeSpecifier node);
    void caseAUnsignedLongTypeSpecifier(AUnsignedLongTypeSpecifier node);
    void caseAFloatTypeSpecifier(AFloatTypeSpecifier node);
    void caseADoubleTypeSpecifier(ADoubleTypeSpecifier node);
    void caseALongDoubleTypeSpecifier(ALongDoubleTypeSpecifier node);
    void caseAStructTypeSpecifier(AStructTypeSpecifier node);
    void caseAUnionTypeSpecifier(AUnionTypeSpecifier node);
    void caseAEnumTypeSpecifier(AEnumTypeSpecifier node);
    void caseATypedefTypeSpecifier(ATypedefTypeSpecifier node);
    void caseAVoidSpecifier(AVoidSpecifier node);
    void caseACharSpecifier(ACharSpecifier node);
    void caseASignedCharSpecifier(ASignedCharSpecifier node);
    void caseAShortSignedShortSpecifier(AShortSignedShortSpecifier node);
    void caseASignedShortSignedShortSpecifier(ASignedShortSignedShortSpecifier node);
    void caseAShortIntSignedShortSpecifier(AShortIntSignedShortSpecifier node);
    void caseASignedShortIntSignedShortSpecifier(ASignedShortIntSignedShortSpecifier node);
    void caseAIntSignedIntSpecifier(AIntSignedIntSpecifier node);
    void caseASignedSignedIntSpecifier(ASignedSignedIntSpecifier node);
    void caseASignedIntSignedIntSpecifier(ASignedIntSignedIntSpecifier node);
    void caseALongSignedLongSpecifier(ALongSignedLongSpecifier node);
    void caseASignedLongSignedLongSpecifier(ASignedLongSignedLongSpecifier node);
    void caseALongIntSignedLongSpecifier(ALongIntSignedLongSpecifier node);
    void caseASignedLongIntSignedLongSpecifier(ASignedLongIntSignedLongSpecifier node);
    void caseAUnsignedCharSpecifier(AUnsignedCharSpecifier node);
    void caseAUnsignedShortUnsignedShortSpecifier(AUnsignedShortUnsignedShortSpecifier node);
    void caseAUnsignedShortIntUnsignedShortSpecifier(AUnsignedShortIntUnsignedShortSpecifier node);
    void caseAUnsignedUnsignedIntSpecifier(AUnsignedUnsignedIntSpecifier node);
    void caseAUnsignedIntUnsignedIntSpecifier(AUnsignedIntUnsignedIntSpecifier node);
    void caseAUnsignedLongUnsignedLongSpecifier(AUnsignedLongUnsignedLongSpecifier node);
    void caseAUnsignedLongIntUnsignedLongSpecifier(AUnsignedLongIntUnsignedLongSpecifier node);
    void caseAFloatSpecifier(AFloatSpecifier node);
    void caseADoubleSpecifier(ADoubleSpecifier node);
    void caseALongDoubleSpecifier(ALongDoubleSpecifier node);
    void caseAStructSpecifier(AStructSpecifier node);
    void caseAUnionSpecifier(AUnionSpecifier node);
    void caseAEnumSpecifier(AEnumSpecifier node);
    void caseAPointerDeclarator(APointerDeclarator node);
    void caseADirectDeclarator(ADirectDeclarator node);
    void caseADirectPointer(ADirectPointer node);
    void caseAPointerPointer(APointerPointer node);
    void caseAIdentifierDirectDeclarator(AIdentifierDirectDeclarator node);
    void caseAArrayDirectDeclarator(AArrayDirectDeclarator node);
    void caseAFunctionDirectDeclarator(AFunctionDirectDeclarator node);
    void caseAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node);
    void caseAPointerArrayDeclarator(APointerArrayDeclarator node);
    void caseAArrayArrayDeclarator(AArrayArrayDeclarator node);
    void caseAFunctionPointerDeclarator(AFunctionPointerDeclarator node);
    void caseAParameterList(AParameterList node);
    void caseAParameterDeclaration(AParameterDeclaration node);
    void caseAAbstractParameterDeclaration(AAbstractParameterDeclaration node);
    void caseAIdentifierParameterDeclaration(AIdentifierParameterDeclaration node);
    void caseAAbstractIdentifierParameterDeclaration(AAbstractIdentifierParameterDeclaration node);
    void caseAPointerAbstractDeclarator(APointerAbstractDeclarator node);
    void caseADirectAbstractDeclarator(ADirectAbstractDeclarator node);
    void caseADirectAbstractPointer(ADirectAbstractPointer node);
    void caseAPointerAbstractPointer(APointerAbstractPointer node);
    void caseAArrayAbstractDirectDeclarator(AArrayAbstractDirectDeclarator node);
    void caseAFunctionAbstractDirectDeclarator(AFunctionAbstractDirectDeclarator node);
    void caseAIntegerAbstractArrayDeclarator(AIntegerAbstractArrayDeclarator node);
    void caseAPointerAbstractArrayDeclarator(APointerAbstractArrayDeclarator node);
    void caseAArrayAbstractArrayDeclarator(AArrayAbstractArrayDeclarator node);
    void caseAAbstractFunctionPointerDeclarator(AAbstractFunctionPointerDeclarator node);
    void caseAParameterListTail(AParameterListTail node);
    void caseAUnionDeclaration(AUnionDeclaration node);
    void caseAEnumDeclaration(AEnumDeclaration node);
    void caseAAdditionalEnumerator(AAdditionalEnumerator node);
    void caseAAutomaticEnumerator(AAutomaticEnumerator node);
    void caseASpecificEnumerator(ASpecificEnumerator node);
    void caseATypedefDeclaration(ATypedefDeclaration node);
    void caseAIdentifierTypedefDeclaration(AIdentifierTypedefDeclaration node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node);
    void caseAPointerFunctionDeclarator(APointerFunctionDeclarator node);
    void caseADirectFunctionDeclarator(ADirectFunctionDeclarator node);
    void caseADirectPointerFunction(ADirectPointerFunction node);
    void caseAPointerPointerFunction(APointerPointerFunction node);
    void caseAArrayDirectFunctionDeclarator(AArrayDirectFunctionDeclarator node);
    void caseAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node);
    void caseAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node);
    void caseAPointerArrayFunctionDeclarator(APointerArrayFunctionDeclarator node);
    void caseAArrayArrayFunctionDeclarator(AArrayArrayFunctionDeclarator node);
    void caseAVariableDeclaration(AVariableDeclaration node);
    void caseAIdentifierVariableDeclaration(AIdentifierVariableDeclaration node);
    void caseAAdditionalDeclarator(AAdditionalDeclarator node);
    void caseAFunctionDefinition(AFunctionDefinition node);
    void caseAIdentifierFunctionDefinition(AIdentifierFunctionDefinition node);
    void caseAFunctionBody(AFunctionBody node);
    void caseACompoundStatement(ACompoundStatement node);
    void caseACompStmtStatement(ACompStmtStatement node);
    void caseABasicStmtStatement(ABasicStmtStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfThenElseStatement(AIfThenElseStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseADoStatement(ADoStatement node);
    void caseAForStatement(AForStatement node);
    void caseASwitchStatement(ASwitchStatement node);
    void caseACallExpressionBasicStatement(ACallExpressionBasicStatement node);
    void caseAModifyExpressionBasicStatement(AModifyExpressionBasicStatement node);
    void caseADead1BasicStatement(ADead1BasicStatement node);
    void caseADead2BasicStatement(ADead2BasicStatement node);
    void caseADead3BasicStatement(ADead3BasicStatement node);
    void caseADead4BasicStatement(ADead4BasicStatement node);
    void caseADead5BasicStatement(ADead5BasicStatement node);
    void caseADead6BasicStatement(ADead6BasicStatement node);
    void caseADead7BasicStatement(ADead7BasicStatement node);
    void caseABinaryRhs(ABinaryRhs node);
    void caseAUnaryRhs(AUnaryRhs node);
    void caseAIdentifierBinaryExpression(AIdentifierBinaryExpression node);
    void caseAConstantBinaryExpression(AConstantBinaryExpression node);
    void caseABinaryExpression(ABinaryExpression node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseAConstantValue(AConstantValue node);
    void caseAFloatingConstant(AFloatingConstant node);
    void caseAStringConstant(AStringConstant node);
    void caseAIntegerConstant(AIntegerConstant node);
    void caseACharacterConstant(ACharacterConstant node);
    void caseARelopBinop(ARelopBinop node);
    void caseAStarBinop(AStarBinop node);
    void caseADivBinop(ADivBinop node);
    void caseAModBinop(AModBinop node);
    void caseAAmpersandBinop(AAmpersandBinop node);
    void caseAPlusBinop(APlusBinop node);
    void caseAMinusBinop(AMinusBinop node);
    void caseACaretBinop(ACaretBinop node);
    void caseAExclMarkBinop(AExclMarkBinop node);
    void caseABarBinop(ABarBinop node);
    void caseAShlBinop(AShlBinop node);
    void caseAShrBinop(AShrBinop node);
    void caseAAmpersandAmpersandBinop(AAmpersandAmpersandBinop node);
    void caseABarBarBinop(ABarBarBinop node);
    void caseAEqRelop(AEqRelop node);
    void caseANeqRelop(ANeqRelop node);
    void caseALtRelop(ALtRelop node);
    void caseALteqRelop(ALteqRelop node);
    void caseAGtRelop(AGtRelop node);
    void caseAGteqRelop(AGteqRelop node);
    void caseASimpleUnaryExpression(ASimpleUnaryExpression node);
    void caseAReferenceUnaryExpression(AReferenceUnaryExpression node);
    void caseAAddressUnaryExpression(AAddressUnaryExpression node);
    void caseACallUnaryExpression(ACallUnaryExpression node);
    void caseAUnopUnaryExpression(AUnopUnaryExpression node);
    void caseAParUnopUnaryExpression(AParUnopUnaryExpression node);
    void caseACastUnaryExpression(ACastUnaryExpression node);
    void caseACastConstUnaryExpression(ACastConstUnaryExpression node);
    void caseAVarnameSimpleExpression(AVarnameSimpleExpression node);
    void caseAConstantSimpleExpression(AConstantSimpleExpression node);
    void caseAArrayrefVarname(AArrayrefVarname node);
    void caseAComprefVarname(AComprefVarname node);
    void caseAIdentifierVarname(AIdentifierVarname node);
    void caseAArrayref(AArrayref node);
    void caseAReflist(AReflist node);
    void caseAIndirectCompref(AIndirectCompref node);
    void caseADirectCompref(ADirectCompref node);
    void caseAIdlist(AIdlist node);
    void caseACallExpression(ACallExpression node);
    void caseAArglist(AArglist node);
    void caseAArglistTail(AArglistTail node);
    void caseAPlusUnop(APlusUnop node);
    void caseAMinusUnop(AMinusUnop node);
    void caseATildeUnop(ATildeUnop node);
    void caseAExclMarkUnop(AExclMarkUnop node);
    void caseATypeName(ATypeName node);
    void caseAIdentifierTypeName(AIdentifierTypeName node);
    void caseADirectModifyExpression(ADirectModifyExpression node);
    void caseAIndirectModifyExpression(AIndirectModifyExpression node);
    void caseARelConditionalExpression(ARelConditionalExpression node);
    void caseAValueConditionalExpression(AValueConditionalExpression node);
    void caseACaseStatements(ACaseStatements node);
    void caseABodyCaseStatement(ABodyCaseStatement node);
    void caseAEmptyCaseStatement(AEmptyCaseStatement node);
    void caseABreakStopStatement(ABreakStopStatement node);
    void caseAContinueStopStatement(AContinueStopStatement node);
    void caseAReturnStopStatement(AReturnStopStatement node);
    void caseAReturnValueStopStatement(AReturnValueStopStatement node);
    void caseAReturnParStopStatement(AReturnParStopStatement node);
    void caseADead1DeadCode(ADead1DeadCode node);
    void caseADead2DeadCode(ADead2DeadCode node);
    void caseADead3DeadCode(ADead3DeadCode node);
    void caseADead4DeadCode(ADead4DeadCode node);
    void caseADead5DeadCode(ADead5DeadCode node);
    void caseADead6DeadCode(ADead6DeadCode node);
    void caseABodyDefaultStatement(ABodyDefaultStatement node);
    void caseAEmptyDefaultStatement(AEmptyDefaultStatement node);

    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAmpersand(TAmpersand node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTCaret(TCaret node);
    void caseTTilde(TTilde node);
    void caseTExclMark(TExclMark node);
    void caseTQuestMark(TQuestMark node);
    void caseTBar(TBar node);
    void caseTEllipsis(TEllipsis node);
    void caseTEqual(TEqual node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTArrow(TArrow node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTShl(TShl node);
    void caseTShr(TShr node);
    void caseTAmpersandAmpersand(TAmpersandAmpersand node);
    void caseTBarBar(TBarBar node);
    void caseTStarEqual(TStarEqual node);
    void caseTDivEqual(TDivEqual node);
    void caseTModEqual(TModEqual node);
    void caseTPlusEqual(TPlusEqual node);
    void caseTMinusEqual(TMinusEqual node);
    void caseTShlEqual(TShlEqual node);
    void caseTShrEqual(TShrEqual node);
    void caseTAmpersandEqual(TAmpersandEqual node);
    void caseTCaretEqual(TCaretEqual node);
    void caseTBarEqual(TBarEqual node);
    void caseTCase(TCase node);
    void caseTDefault(TDefault node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTSwitch(TSwitch node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTFor(TFor node);
    void caseTGoto(TGoto node);
    void caseTContinue(TContinue node);
    void caseTBreak(TBreak node);
    void caseTReturn(TReturn node);
    void caseTTypedef(TTypedef node);
    void caseTExtern(TExtern node);
    void caseTStatic(TStatic node);
    void caseTAuto(TAuto node);
    void caseTRegister(TRegister node);
    void caseTVoid(TVoid node);
    void caseTChar(TChar node);
    void caseTInt(TInt node);
    void caseTShort(TShort node);
    void caseTLong(TLong node);
    void caseTFloat(TFloat node);
    void caseTDouble(TDouble node);
    void caseTSigned(TSigned node);
    void caseTUnsigned(TUnsigned node);
    void caseTStruct(TStruct node);
    void caseTUnion(TUnion node);
    void caseTEnum(TEnum node);
    void caseTConst(TConst node);
    void caseTVolatile(TVolatile node);
    void caseTSizeof(TSizeof node);
    void caseTIdentifier(TIdentifier node);
    void caseTFloatingConstant(TFloatingConstant node);
    void caseTStringLitteral(TStringLitteral node);
    void caseTIntegerConstant(TIntegerConstant node);
    void caseTCharacterConstant(TCharacterConstant node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTPreprocessor(TPreprocessor node);
    void caseEOF(EOF node);
}
