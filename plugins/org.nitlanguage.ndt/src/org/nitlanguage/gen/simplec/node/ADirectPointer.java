/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class ADirectPointer extends PPointer
{
    private TStar _star_;
    private PDirectDeclarator _directDeclarator_;

    public ADirectPointer()
    {
    }

    public ADirectPointer(
        TStar _star_,
        PDirectDeclarator _directDeclarator_)
    {
        setStar(_star_);

        setDirectDeclarator(_directDeclarator_);

    }
    public Object clone()
    {
        return new ADirectPointer(
            (TStar) cloneNode(_star_),
            (PDirectDeclarator) cloneNode(_directDeclarator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADirectPointer(this);
    }

    public TStar getStar()
    {
        return _star_;
    }

    public void setStar(TStar node)
    {
        if(_star_ != null)
        {
            _star_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _star_ = node;
    }

    public PDirectDeclarator getDirectDeclarator()
    {
        return _directDeclarator_;
    }

    public void setDirectDeclarator(PDirectDeclarator node)
    {
        if(_directDeclarator_ != null)
        {
            _directDeclarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _directDeclarator_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_star_)
            + toString(_directDeclarator_);
    }

    void removeChild(Node child)
    {
        if(_star_ == child)
        {
            _star_ = null;
            return;
        }

        if(_directDeclarator_ == child)
        {
            _directDeclarator_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_star_ == oldChild)
        {
            setStar((TStar) newChild);
            return;
        }

        if(_directDeclarator_ == oldChild)
        {
            setDirectDeclarator((PDirectDeclarator) newChild);
            return;
        }

    }
}
