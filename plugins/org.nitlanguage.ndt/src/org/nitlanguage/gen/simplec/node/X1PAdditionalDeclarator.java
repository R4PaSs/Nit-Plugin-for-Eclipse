/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import org.nitlanguage.gen.simplec.analysis.*;

public final class X1PAdditionalDeclarator extends XPAdditionalDeclarator
{
    private XPAdditionalDeclarator _xPAdditionalDeclarator_;
    private PAdditionalDeclarator _pAdditionalDeclarator_;

    public X1PAdditionalDeclarator()
    {
    }

    public X1PAdditionalDeclarator(
        XPAdditionalDeclarator _xPAdditionalDeclarator_,
        PAdditionalDeclarator _pAdditionalDeclarator_)
    {
        setXPAdditionalDeclarator(_xPAdditionalDeclarator_);
        setPAdditionalDeclarator(_pAdditionalDeclarator_);
    }

    public Object clone()
    {
        throw new RuntimeException("Unsupported Operation");
    }

    public void apply(Switch sw)
    {
        throw new RuntimeException("Switch not supported.");
    }

    public XPAdditionalDeclarator getXPAdditionalDeclarator()
    {
        return _xPAdditionalDeclarator_;
    }

    public void setXPAdditionalDeclarator(XPAdditionalDeclarator node)
    {
        if(_xPAdditionalDeclarator_ != null)
        {
            _xPAdditionalDeclarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _xPAdditionalDeclarator_ = node;
    }

    public PAdditionalDeclarator getPAdditionalDeclarator()
    {
        return _pAdditionalDeclarator_;
    }

    public void setPAdditionalDeclarator(PAdditionalDeclarator node)
    {
        if(_pAdditionalDeclarator_ != null)
        {
            _pAdditionalDeclarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pAdditionalDeclarator_ = node;
    }

    void removeChild(Node child)
    {
        if(_xPAdditionalDeclarator_ == child)
        {
            _xPAdditionalDeclarator_ = null;
        }

        if(_pAdditionalDeclarator_ == child)
        {
            _pAdditionalDeclarator_ = null;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
    }

    public String toString()
    {
        return "" +
            toString(_xPAdditionalDeclarator_) +
            toString(_pAdditionalDeclarator_);
    }
}
