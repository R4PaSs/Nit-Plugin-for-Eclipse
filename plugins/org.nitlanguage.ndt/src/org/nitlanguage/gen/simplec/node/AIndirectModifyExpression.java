/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AIndirectModifyExpression extends PModifyExpression
{
    private TLPar _lPar_;
    private TStar _star_;
    private TIdentifier _identifier_;
    private TRPar _rPar_;
    private TEqual _equal_;
    private PRhs _rhs_;

    public AIndirectModifyExpression()
    {
    }

    public AIndirectModifyExpression(
        TLPar _lPar_,
        TStar _star_,
        TIdentifier _identifier_,
        TRPar _rPar_,
        TEqual _equal_,
        PRhs _rhs_)
    {
        setLPar(_lPar_);

        setStar(_star_);

        setIdentifier(_identifier_);

        setRPar(_rPar_);

        setEqual(_equal_);

        setRhs(_rhs_);

    }
    public Object clone()
    {
        return new AIndirectModifyExpression(
            (TLPar) cloneNode(_lPar_),
            (TStar) cloneNode(_star_),
            (TIdentifier) cloneNode(_identifier_),
            (TRPar) cloneNode(_rPar_),
            (TEqual) cloneNode(_equal_),
            (PRhs) cloneNode(_rhs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndirectModifyExpression(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public TStar getStar()
    {
        return _star_;
    }

    public void setStar(TStar node)
    {
        if(_star_ != null)
        {
            _star_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _star_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PRhs getRhs()
    {
        return _rhs_;
    }

    public void setRhs(PRhs node)
    {
        if(_rhs_ != null)
        {
            _rhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rhs_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_star_)
            + toString(_identifier_)
            + toString(_rPar_)
            + toString(_equal_)
            + toString(_rhs_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_star_ == child)
        {
            _star_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_rhs_ == child)
        {
            _rhs_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_star_ == oldChild)
        {
            setStar((TStar) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_rhs_ == oldChild)
        {
            setRhs((PRhs) newChild);
            return;
        }

    }
}
