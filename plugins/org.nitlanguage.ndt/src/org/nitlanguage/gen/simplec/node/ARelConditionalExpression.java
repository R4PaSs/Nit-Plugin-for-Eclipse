/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class ARelConditionalExpression extends PConditionalExpression
{
    private TLPar _lPar_;
    private PValue _left_;
    private PRelop _relop_;
    private PValue _right_;
    private TRPar _rPar_;

    public ARelConditionalExpression()
    {
    }

    public ARelConditionalExpression(
        TLPar _lPar_,
        PValue _left_,
        PRelop _relop_,
        PValue _right_,
        TRPar _rPar_)
    {
        setLPar(_lPar_);

        setLeft(_left_);

        setRelop(_relop_);

        setRight(_right_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new ARelConditionalExpression(
            (TLPar) cloneNode(_lPar_),
            (PValue) cloneNode(_left_),
            (PRelop) cloneNode(_relop_),
            (PValue) cloneNode(_right_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelConditionalExpression(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PValue getLeft()
    {
        return _left_;
    }

    public void setLeft(PValue node)
    {
        if(_left_ != null)
        {
            _left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _left_ = node;
    }

    public PRelop getRelop()
    {
        return _relop_;
    }

    public void setRelop(PRelop node)
    {
        if(_relop_ != null)
        {
            _relop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _relop_ = node;
    }

    public PValue getRight()
    {
        return _right_;
    }

    public void setRight(PValue node)
    {
        if(_right_ != null)
        {
            _right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _right_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_left_)
            + toString(_relop_)
            + toString(_right_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_left_ == child)
        {
            _left_ = null;
            return;
        }

        if(_relop_ == child)
        {
            _relop_ = null;
            return;
        }

        if(_right_ == child)
        {
            _right_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_left_ == oldChild)
        {
            setLeft((PValue) newChild);
            return;
        }

        if(_relop_ == oldChild)
        {
            setRelop((PRelop) newChild);
            return;
        }

        if(_right_ == oldChild)
        {
            setRight((PValue) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}
