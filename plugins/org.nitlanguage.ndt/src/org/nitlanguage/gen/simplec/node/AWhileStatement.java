/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AWhileStatement extends PStatement
{
    private TWhile _while_;
    private TLPar _lPar_;
    private PConditionalExpression _conditionalExpression_;
    private TRPar _rPar_;
    private PCompoundStatement _compoundStatement_;

    public AWhileStatement()
    {
    }

    public AWhileStatement(
        TWhile _while_,
        TLPar _lPar_,
        PConditionalExpression _conditionalExpression_,
        TRPar _rPar_,
        PCompoundStatement _compoundStatement_)
    {
        setWhile(_while_);

        setLPar(_lPar_);

        setConditionalExpression(_conditionalExpression_);

        setRPar(_rPar_);

        setCompoundStatement(_compoundStatement_);

    }
    public Object clone()
    {
        return new AWhileStatement(
            (TWhile) cloneNode(_while_),
            (TLPar) cloneNode(_lPar_),
            (PConditionalExpression) cloneNode(_conditionalExpression_),
            (TRPar) cloneNode(_rPar_),
            (PCompoundStatement) cloneNode(_compoundStatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStatement(this);
    }

    public TWhile getWhile()
    {
        return _while_;
    }

    public void setWhile(TWhile node)
    {
        if(_while_ != null)
        {
            _while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _while_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PConditionalExpression getConditionalExpression()
    {
        return _conditionalExpression_;
    }

    public void setConditionalExpression(PConditionalExpression node)
    {
        if(_conditionalExpression_ != null)
        {
            _conditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conditionalExpression_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public PCompoundStatement getCompoundStatement()
    {
        return _compoundStatement_;
    }

    public void setCompoundStatement(PCompoundStatement node)
    {
        if(_compoundStatement_ != null)
        {
            _compoundStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compoundStatement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_while_)
            + toString(_lPar_)
            + toString(_conditionalExpression_)
            + toString(_rPar_)
            + toString(_compoundStatement_);
    }

    void removeChild(Node child)
    {
        if(_while_ == child)
        {
            _while_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_conditionalExpression_ == child)
        {
            _conditionalExpression_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_compoundStatement_ == child)
        {
            _compoundStatement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_conditionalExpression_ == oldChild)
        {
            setConditionalExpression((PConditionalExpression) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_compoundStatement_ == oldChild)
        {
            setCompoundStatement((PCompoundStatement) newChild);
            return;
        }

    }
}
