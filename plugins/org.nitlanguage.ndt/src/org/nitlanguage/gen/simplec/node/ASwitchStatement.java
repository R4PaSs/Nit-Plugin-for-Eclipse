/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class ASwitchStatement extends PStatement
{
    private TSwitch _switch_;
    private TLPar _lPar_;
    private PValue _value_;
    private TRPar _rPar_;
    private PCaseStatements _caseStatements_;

    public ASwitchStatement()
    {
    }

    public ASwitchStatement(
        TSwitch _switch_,
        TLPar _lPar_,
        PValue _value_,
        TRPar _rPar_,
        PCaseStatements _caseStatements_)
    {
        setSwitch(_switch_);

        setLPar(_lPar_);

        setValue(_value_);

        setRPar(_rPar_);

        setCaseStatements(_caseStatements_);

    }
    public Object clone()
    {
        return new ASwitchStatement(
            (TSwitch) cloneNode(_switch_),
            (TLPar) cloneNode(_lPar_),
            (PValue) cloneNode(_value_),
            (TRPar) cloneNode(_rPar_),
            (PCaseStatements) cloneNode(_caseStatements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchStatement(this);
    }

    public TSwitch getSwitch()
    {
        return _switch_;
    }

    public void setSwitch(TSwitch node)
    {
        if(_switch_ != null)
        {
            _switch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _switch_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public PCaseStatements getCaseStatements()
    {
        return _caseStatements_;
    }

    public void setCaseStatements(PCaseStatements node)
    {
        if(_caseStatements_ != null)
        {
            _caseStatements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _caseStatements_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_switch_)
            + toString(_lPar_)
            + toString(_value_)
            + toString(_rPar_)
            + toString(_caseStatements_);
    }

    void removeChild(Node child)
    {
        if(_switch_ == child)
        {
            _switch_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_caseStatements_ == child)
        {
            _caseStatements_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_switch_ == oldChild)
        {
            setSwitch((TSwitch) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_caseStatements_ == oldChild)
        {
            setCaseStatements((PCaseStatements) newChild);
            return;
        }

    }
}
