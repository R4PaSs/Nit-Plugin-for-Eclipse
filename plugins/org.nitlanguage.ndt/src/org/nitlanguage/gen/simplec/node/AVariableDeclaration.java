/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AVariableDeclaration extends PVariableDeclaration
{
    private PTypeSpecifier _typeSpecifier_;
    private PDeclarator _declarator_;
    private final LinkedList _additionalDeclarator_ = new TypedLinkedList(new AdditionalDeclarator_Cast());
    private TSemicolon _semicolon_;

    public AVariableDeclaration()
    {
    }

    public AVariableDeclaration(
        PTypeSpecifier _typeSpecifier_,
        PDeclarator _declarator_,
        List _additionalDeclarator_,
        TSemicolon _semicolon_)
    {
        setTypeSpecifier(_typeSpecifier_);

        setDeclarator(_declarator_);

        {
            this._additionalDeclarator_.clear();
            this._additionalDeclarator_.addAll(_additionalDeclarator_);
        }

        setSemicolon(_semicolon_);

    }

    public AVariableDeclaration(
        PTypeSpecifier _typeSpecifier_,
        PDeclarator _declarator_,
        XPAdditionalDeclarator _additionalDeclarator_,
        TSemicolon _semicolon_)
    {
        setTypeSpecifier(_typeSpecifier_);

        setDeclarator(_declarator_);

        if(_additionalDeclarator_ != null)
        {
            while(_additionalDeclarator_ instanceof X1PAdditionalDeclarator)
            {
                this._additionalDeclarator_.addFirst(((X1PAdditionalDeclarator) _additionalDeclarator_).getPAdditionalDeclarator());
                _additionalDeclarator_ = ((X1PAdditionalDeclarator) _additionalDeclarator_).getXPAdditionalDeclarator();
            }
            this._additionalDeclarator_.addFirst(((X2PAdditionalDeclarator) _additionalDeclarator_).getPAdditionalDeclarator());
        }

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AVariableDeclaration(
            (PTypeSpecifier) cloneNode(_typeSpecifier_),
            (PDeclarator) cloneNode(_declarator_),
            cloneList(_additionalDeclarator_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclaration(this);
    }

    public PTypeSpecifier getTypeSpecifier()
    {
        return _typeSpecifier_;
    }

    public void setTypeSpecifier(PTypeSpecifier node)
    {
        if(_typeSpecifier_ != null)
        {
            _typeSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _typeSpecifier_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return _declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(_declarator_ != null)
        {
            _declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declarator_ = node;
    }

    public LinkedList getAdditionalDeclarator()
    {
        return _additionalDeclarator_;
    }

    public void setAdditionalDeclarator(List list)
    {
        _additionalDeclarator_.clear();
        _additionalDeclarator_.addAll(list);
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_typeSpecifier_)
            + toString(_declarator_)
            + toString(_additionalDeclarator_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_typeSpecifier_ == child)
        {
            _typeSpecifier_ = null;
            return;
        }

        if(_declarator_ == child)
        {
            _declarator_ = null;
            return;
        }

        if(_additionalDeclarator_.remove(child))
        {
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_typeSpecifier_ == oldChild)
        {
            setTypeSpecifier((PTypeSpecifier) newChild);
            return;
        }

        if(_declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        for(ListIterator i = _additionalDeclarator_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }

    private class AdditionalDeclarator_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAdditionalDeclarator node = (PAdditionalDeclarator) o;

            if((node.parent() != null) &&
                (node.parent() != AVariableDeclaration.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AVariableDeclaration.this))
            {
                node.parent(AVariableDeclaration.this);
            }

            return node;
        }
    }
}
