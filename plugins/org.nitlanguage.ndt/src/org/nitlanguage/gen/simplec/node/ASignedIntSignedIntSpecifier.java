/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class ASignedIntSignedIntSpecifier extends PSignedIntSpecifier
{
    private TSigned _signed_;
    private TInt _int_;

    public ASignedIntSignedIntSpecifier()
    {
    }

    public ASignedIntSignedIntSpecifier(
        TSigned _signed_,
        TInt _int_)
    {
        setSigned(_signed_);

        setInt(_int_);

    }
    public Object clone()
    {
        return new ASignedIntSignedIntSpecifier(
            (TSigned) cloneNode(_signed_),
            (TInt) cloneNode(_int_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASignedIntSignedIntSpecifier(this);
    }

    public TSigned getSigned()
    {
        return _signed_;
    }

    public void setSigned(TSigned node)
    {
        if(_signed_ != null)
        {
            _signed_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _signed_ = node;
    }

    public TInt getInt()
    {
        return _int_;
    }

    public void setInt(TInt node)
    {
        if(_int_ != null)
        {
            _int_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _int_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_signed_)
            + toString(_int_);
    }

    void removeChild(Node child)
    {
        if(_signed_ == child)
        {
            _signed_ = null;
            return;
        }

        if(_int_ == child)
        {
            _int_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_signed_ == oldChild)
        {
            setSigned((TSigned) newChild);
            return;
        }

        if(_int_ == oldChild)
        {
            setInt((TInt) newChild);
            return;
        }

    }
}
