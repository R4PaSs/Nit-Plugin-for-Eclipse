/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AEnumDeclaration extends PEnumDeclaration
{
    private TEnum _enum_;
    private TIdentifier _identifier_;
    private TLBrace _lBrace_;
    private PEnumerator _enumerator_;
    private final LinkedList _additionalEnumerator_ = new TypedLinkedList(new AdditionalEnumerator_Cast());
    private TRBrace _rBrace_;
    private TSemicolon _semicolon_;

    public AEnumDeclaration()
    {
    }

    public AEnumDeclaration(
        TEnum _enum_,
        TIdentifier _identifier_,
        TLBrace _lBrace_,
        PEnumerator _enumerator_,
        List _additionalEnumerator_,
        TRBrace _rBrace_,
        TSemicolon _semicolon_)
    {
        setEnum(_enum_);

        setIdentifier(_identifier_);

        setLBrace(_lBrace_);

        setEnumerator(_enumerator_);

        {
            this._additionalEnumerator_.clear();
            this._additionalEnumerator_.addAll(_additionalEnumerator_);
        }

        setRBrace(_rBrace_);

        setSemicolon(_semicolon_);

    }

    public AEnumDeclaration(
        TEnum _enum_,
        TIdentifier _identifier_,
        TLBrace _lBrace_,
        PEnumerator _enumerator_,
        XPAdditionalEnumerator _additionalEnumerator_,
        TRBrace _rBrace_,
        TSemicolon _semicolon_)
    {
        setEnum(_enum_);

        setIdentifier(_identifier_);

        setLBrace(_lBrace_);

        setEnumerator(_enumerator_);

        if(_additionalEnumerator_ != null)
        {
            while(_additionalEnumerator_ instanceof X1PAdditionalEnumerator)
            {
                this._additionalEnumerator_.addFirst(((X1PAdditionalEnumerator) _additionalEnumerator_).getPAdditionalEnumerator());
                _additionalEnumerator_ = ((X1PAdditionalEnumerator) _additionalEnumerator_).getXPAdditionalEnumerator();
            }
            this._additionalEnumerator_.addFirst(((X2PAdditionalEnumerator) _additionalEnumerator_).getPAdditionalEnumerator());
        }

        setRBrace(_rBrace_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AEnumDeclaration(
            (TEnum) cloneNode(_enum_),
            (TIdentifier) cloneNode(_identifier_),
            (TLBrace) cloneNode(_lBrace_),
            (PEnumerator) cloneNode(_enumerator_),
            cloneList(_additionalEnumerator_),
            (TRBrace) cloneNode(_rBrace_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumDeclaration(this);
    }

    public TEnum getEnum()
    {
        return _enum_;
    }

    public void setEnum(TEnum node)
    {
        if(_enum_ != null)
        {
            _enum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _enum_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public PEnumerator getEnumerator()
    {
        return _enumerator_;
    }

    public void setEnumerator(PEnumerator node)
    {
        if(_enumerator_ != null)
        {
            _enumerator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _enumerator_ = node;
    }

    public LinkedList getAdditionalEnumerator()
    {
        return _additionalEnumerator_;
    }

    public void setAdditionalEnumerator(List list)
    {
        _additionalEnumerator_.clear();
        _additionalEnumerator_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_enum_)
            + toString(_identifier_)
            + toString(_lBrace_)
            + toString(_enumerator_)
            + toString(_additionalEnumerator_)
            + toString(_rBrace_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_enum_ == child)
        {
            _enum_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_enumerator_ == child)
        {
            _enumerator_ = null;
            return;
        }

        if(_additionalEnumerator_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_enum_ == oldChild)
        {
            setEnum((TEnum) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(_enumerator_ == oldChild)
        {
            setEnumerator((PEnumerator) newChild);
            return;
        }

        for(ListIterator i = _additionalEnumerator_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }

    private class AdditionalEnumerator_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAdditionalEnumerator node = (PAdditionalEnumerator) o;

            if((node.parent() != null) &&
                (node.parent() != AEnumDeclaration.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AEnumDeclaration.this))
            {
                node.parent(AEnumDeclaration.this);
            }

            return node;
        }
    }
}
