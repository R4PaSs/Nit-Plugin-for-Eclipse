/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AIfThenElseStatement extends PStatement
{
    private TIf _if_;
    private TLPar _lPar_;
    private PConditionalExpression _conditionalExpression_;
    private TRPar _rPar_;
    private PCompoundStatement _thenCompStmt_;
    private TElse _else_;
    private PCompoundStatement _elseCompStmt_;

    public AIfThenElseStatement()
    {
    }

    public AIfThenElseStatement(
        TIf _if_,
        TLPar _lPar_,
        PConditionalExpression _conditionalExpression_,
        TRPar _rPar_,
        PCompoundStatement _thenCompStmt_,
        TElse _else_,
        PCompoundStatement _elseCompStmt_)
    {
        setIf(_if_);

        setLPar(_lPar_);

        setConditionalExpression(_conditionalExpression_);

        setRPar(_rPar_);

        setThenCompStmt(_thenCompStmt_);

        setElse(_else_);

        setElseCompStmt(_elseCompStmt_);

    }
    public Object clone()
    {
        return new AIfThenElseStatement(
            (TIf) cloneNode(_if_),
            (TLPar) cloneNode(_lPar_),
            (PConditionalExpression) cloneNode(_conditionalExpression_),
            (TRPar) cloneNode(_rPar_),
            (PCompoundStatement) cloneNode(_thenCompStmt_),
            (TElse) cloneNode(_else_),
            (PCompoundStatement) cloneNode(_elseCompStmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfThenElseStatement(this);
    }

    public TIf getIf()
    {
        return _if_;
    }

    public void setIf(TIf node)
    {
        if(_if_ != null)
        {
            _if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _if_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PConditionalExpression getConditionalExpression()
    {
        return _conditionalExpression_;
    }

    public void setConditionalExpression(PConditionalExpression node)
    {
        if(_conditionalExpression_ != null)
        {
            _conditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conditionalExpression_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public PCompoundStatement getThenCompStmt()
    {
        return _thenCompStmt_;
    }

    public void setThenCompStmt(PCompoundStatement node)
    {
        if(_thenCompStmt_ != null)
        {
            _thenCompStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _thenCompStmt_ = node;
    }

    public TElse getElse()
    {
        return _else_;
    }

    public void setElse(TElse node)
    {
        if(_else_ != null)
        {
            _else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _else_ = node;
    }

    public PCompoundStatement getElseCompStmt()
    {
        return _elseCompStmt_;
    }

    public void setElseCompStmt(PCompoundStatement node)
    {
        if(_elseCompStmt_ != null)
        {
            _elseCompStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _elseCompStmt_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_if_)
            + toString(_lPar_)
            + toString(_conditionalExpression_)
            + toString(_rPar_)
            + toString(_thenCompStmt_)
            + toString(_else_)
            + toString(_elseCompStmt_);
    }

    void removeChild(Node child)
    {
        if(_if_ == child)
        {
            _if_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_conditionalExpression_ == child)
        {
            _conditionalExpression_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_thenCompStmt_ == child)
        {
            _thenCompStmt_ = null;
            return;
        }

        if(_else_ == child)
        {
            _else_ = null;
            return;
        }

        if(_elseCompStmt_ == child)
        {
            _elseCompStmt_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_conditionalExpression_ == oldChild)
        {
            setConditionalExpression((PConditionalExpression) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_thenCompStmt_ == oldChild)
        {
            setThenCompStmt((PCompoundStatement) newChild);
            return;
        }

        if(_else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(_elseCompStmt_ == oldChild)
        {
            setElseCompStmt((PCompoundStatement) newChild);
            return;
        }

    }
}
