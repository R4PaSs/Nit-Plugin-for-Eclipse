/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AParameterListTail extends PParameterListTail
{
    private TComma _comma_;
    private PParameterDeclaration _parameterDeclaration_;

    public AParameterListTail()
    {
    }

    public AParameterListTail(
        TComma _comma_,
        PParameterDeclaration _parameterDeclaration_)
    {
        setComma(_comma_);

        setParameterDeclaration(_parameterDeclaration_);

    }
    public Object clone()
    {
        return new AParameterListTail(
            (TComma) cloneNode(_comma_),
            (PParameterDeclaration) cloneNode(_parameterDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParameterListTail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PParameterDeclaration getParameterDeclaration()
    {
        return _parameterDeclaration_;
    }

    public void setParameterDeclaration(PParameterDeclaration node)
    {
        if(_parameterDeclaration_ != null)
        {
            _parameterDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _parameterDeclaration_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_parameterDeclaration_);
    }

    void removeChild(Node child)
    {
        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_parameterDeclaration_ == child)
        {
            _parameterDeclaration_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_parameterDeclaration_ == oldChild)
        {
            setParameterDeclaration((PParameterDeclaration) newChild);
            return;
        }

    }
}
