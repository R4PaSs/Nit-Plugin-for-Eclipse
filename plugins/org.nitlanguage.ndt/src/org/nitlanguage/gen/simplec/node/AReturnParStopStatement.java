/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AReturnParStopStatement extends PStopStatement
{
    private TReturn _return_;
    private TLPar _lPar_;
    private PValue _value_;
    private TRPar _rPar_;
    private TSemicolon _semicolon_;
    private final LinkedList _deadCode_ = new TypedLinkedList(new DeadCode_Cast());

    public AReturnParStopStatement()
    {
    }

    public AReturnParStopStatement(
        TReturn _return_,
        TLPar _lPar_,
        PValue _value_,
        TRPar _rPar_,
        TSemicolon _semicolon_,
        List _deadCode_)
    {
        setReturn(_return_);

        setLPar(_lPar_);

        setValue(_value_);

        setRPar(_rPar_);

        setSemicolon(_semicolon_);

        {
            this._deadCode_.clear();
            this._deadCode_.addAll(_deadCode_);
        }

    }

    public AReturnParStopStatement(
        TReturn _return_,
        TLPar _lPar_,
        PValue _value_,
        TRPar _rPar_,
        TSemicolon _semicolon_,
        XPDeadCode _deadCode_)
    {
        setReturn(_return_);

        setLPar(_lPar_);

        setValue(_value_);

        setRPar(_rPar_);

        setSemicolon(_semicolon_);

        if(_deadCode_ != null)
        {
            while(_deadCode_ instanceof X1PDeadCode)
            {
                this._deadCode_.addFirst(((X1PDeadCode) _deadCode_).getPDeadCode());
                _deadCode_ = ((X1PDeadCode) _deadCode_).getXPDeadCode();
            }
            this._deadCode_.addFirst(((X2PDeadCode) _deadCode_).getPDeadCode());
        }

    }
    public Object clone()
    {
        return new AReturnParStopStatement(
            (TReturn) cloneNode(_return_),
            (TLPar) cloneNode(_lPar_),
            (PValue) cloneNode(_value_),
            (TRPar) cloneNode(_rPar_),
            (TSemicolon) cloneNode(_semicolon_),
            cloneList(_deadCode_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReturnParStopStatement(this);
    }

    public TReturn getReturn()
    {
        return _return_;
    }

    public void setReturn(TReturn node)
    {
        if(_return_ != null)
        {
            _return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _return_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public LinkedList getDeadCode()
    {
        return _deadCode_;
    }

    public void setDeadCode(List list)
    {
        _deadCode_.clear();
        _deadCode_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_return_)
            + toString(_lPar_)
            + toString(_value_)
            + toString(_rPar_)
            + toString(_semicolon_)
            + toString(_deadCode_);
    }

    void removeChild(Node child)
    {
        if(_return_ == child)
        {
            _return_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_deadCode_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator i = _deadCode_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class DeadCode_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PDeadCode node = (PDeadCode) o;

            if((node.parent() != null) &&
                (node.parent() != AReturnParStopStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AReturnParStopStatement.this))
            {
                node.parent(AReturnParStopStatement.this);
            }

            return node;
        }
    }
}
