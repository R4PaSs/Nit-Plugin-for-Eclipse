/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class ASignedShortSignedShortSpecifier extends PSignedShortSpecifier
{
    private TSigned _signed_;
    private TShort _short_;

    public ASignedShortSignedShortSpecifier()
    {
    }

    public ASignedShortSignedShortSpecifier(
        TSigned _signed_,
        TShort _short_)
    {
        setSigned(_signed_);

        setShort(_short_);

    }
    public Object clone()
    {
        return new ASignedShortSignedShortSpecifier(
            (TSigned) cloneNode(_signed_),
            (TShort) cloneNode(_short_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASignedShortSignedShortSpecifier(this);
    }

    public TSigned getSigned()
    {
        return _signed_;
    }

    public void setSigned(TSigned node)
    {
        if(_signed_ != null)
        {
            _signed_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _signed_ = node;
    }

    public TShort getShort()
    {
        return _short_;
    }

    public void setShort(TShort node)
    {
        if(_short_ != null)
        {
            _short_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _short_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_signed_)
            + toString(_short_);
    }

    void removeChild(Node child)
    {
        if(_signed_ == child)
        {
            _signed_ = null;
            return;
        }

        if(_short_ == child)
        {
            _short_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_signed_ == oldChild)
        {
            setSigned((TSigned) newChild);
            return;
        }

        if(_short_ == oldChild)
        {
            setShort((TShort) newChild);
            return;
        }

    }
}
