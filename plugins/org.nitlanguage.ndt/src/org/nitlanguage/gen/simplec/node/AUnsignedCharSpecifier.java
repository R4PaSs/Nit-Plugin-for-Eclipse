/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AUnsignedCharSpecifier extends PUnsignedCharSpecifier
{
    private TUnsigned _unsigned_;
    private TChar _char_;

    public AUnsignedCharSpecifier()
    {
    }

    public AUnsignedCharSpecifier(
        TUnsigned _unsigned_,
        TChar _char_)
    {
        setUnsigned(_unsigned_);

        setChar(_char_);

    }
    public Object clone()
    {
        return new AUnsignedCharSpecifier(
            (TUnsigned) cloneNode(_unsigned_),
            (TChar) cloneNode(_char_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnsignedCharSpecifier(this);
    }

    public TUnsigned getUnsigned()
    {
        return _unsigned_;
    }

    public void setUnsigned(TUnsigned node)
    {
        if(_unsigned_ != null)
        {
            _unsigned_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unsigned_ = node;
    }

    public TChar getChar()
    {
        return _char_;
    }

    public void setChar(TChar node)
    {
        if(_char_ != null)
        {
            _char_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _char_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_unsigned_)
            + toString(_char_);
    }

    void removeChild(Node child)
    {
        if(_unsigned_ == child)
        {
            _unsigned_ = null;
            return;
        }

        if(_char_ == child)
        {
            _char_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_unsigned_ == oldChild)
        {
            setUnsigned((TUnsigned) newChild);
            return;
        }

        if(_char_ == oldChild)
        {
            setChar((TChar) newChild);
            return;
        }

    }
}
