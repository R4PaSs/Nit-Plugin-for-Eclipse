/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AIndirectCompref extends PCompref
{
    private TLPar _lPar_;
    private TStar _star_;
    private TIdentifier _identifier_;
    private TRPar _rPar_;
    private final LinkedList _idlist_ = new TypedLinkedList(new Idlist_Cast());

    public AIndirectCompref()
    {
    }

    public AIndirectCompref(
        TLPar _lPar_,
        TStar _star_,
        TIdentifier _identifier_,
        TRPar _rPar_,
        List _idlist_)
    {
        setLPar(_lPar_);

        setStar(_star_);

        setIdentifier(_identifier_);

        setRPar(_rPar_);

        {
            this._idlist_.clear();
            this._idlist_.addAll(_idlist_);
        }

    }

    public AIndirectCompref(
        TLPar _lPar_,
        TStar _star_,
        TIdentifier _identifier_,
        TRPar _rPar_,
        XPIdlist _idlist_)
    {
        setLPar(_lPar_);

        setStar(_star_);

        setIdentifier(_identifier_);

        setRPar(_rPar_);

        if(_idlist_ != null)
        {
            while(_idlist_ instanceof X1PIdlist)
            {
                this._idlist_.addFirst(((X1PIdlist) _idlist_).getPIdlist());
                _idlist_ = ((X1PIdlist) _idlist_).getXPIdlist();
            }
            this._idlist_.addFirst(((X2PIdlist) _idlist_).getPIdlist());
        }

    }
    public Object clone()
    {
        return new AIndirectCompref(
            (TLPar) cloneNode(_lPar_),
            (TStar) cloneNode(_star_),
            (TIdentifier) cloneNode(_identifier_),
            (TRPar) cloneNode(_rPar_),
            cloneList(_idlist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndirectCompref(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public TStar getStar()
    {
        return _star_;
    }

    public void setStar(TStar node)
    {
        if(_star_ != null)
        {
            _star_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _star_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public LinkedList getIdlist()
    {
        return _idlist_;
    }

    public void setIdlist(List list)
    {
        _idlist_.clear();
        _idlist_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_star_)
            + toString(_identifier_)
            + toString(_rPar_)
            + toString(_idlist_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_star_ == child)
        {
            _star_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_idlist_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_star_ == oldChild)
        {
            setStar((TStar) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        for(ListIterator i = _idlist_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Idlist_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PIdlist node = (PIdlist) o;

            if((node.parent() != null) &&
                (node.parent() != AIndirectCompref.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AIndirectCompref.this))
            {
                node.parent(AIndirectCompref.this);
            }

            return node;
        }
    }
}
