/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.nitlanguage.gen.simplec.node;

import java.util.*;
import org.nitlanguage.gen.simplec.analysis.*;

public final class AForStatement extends PStatement
{
    private TFor _for_;
    private TLPar _lPar_;
    private PBasicStatement _start_;
    private TSemicolon _scOne_;
    private PConditionalExpression _conditionalExpression_;
    private TSemicolon _scTwo_;
    private PBasicStatement _iter_;
    private TRPar _rPar_;
    private PCompoundStatement _compoundStatement_;

    public AForStatement()
    {
    }

    public AForStatement(
        TFor _for_,
        TLPar _lPar_,
        PBasicStatement _start_,
        TSemicolon _scOne_,
        PConditionalExpression _conditionalExpression_,
        TSemicolon _scTwo_,
        PBasicStatement _iter_,
        TRPar _rPar_,
        PCompoundStatement _compoundStatement_)
    {
        setFor(_for_);

        setLPar(_lPar_);

        setStart(_start_);

        setScOne(_scOne_);

        setConditionalExpression(_conditionalExpression_);

        setScTwo(_scTwo_);

        setIter(_iter_);

        setRPar(_rPar_);

        setCompoundStatement(_compoundStatement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (TFor) cloneNode(_for_),
            (TLPar) cloneNode(_lPar_),
            (PBasicStatement) cloneNode(_start_),
            (TSemicolon) cloneNode(_scOne_),
            (PConditionalExpression) cloneNode(_conditionalExpression_),
            (TSemicolon) cloneNode(_scTwo_),
            (PBasicStatement) cloneNode(_iter_),
            (TRPar) cloneNode(_rPar_),
            (PCompoundStatement) cloneNode(_compoundStatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TFor getFor()
    {
        return _for_;
    }

    public void setFor(TFor node)
    {
        if(_for_ != null)
        {
            _for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _for_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PBasicStatement getStart()
    {
        return _start_;
    }

    public void setStart(PBasicStatement node)
    {
        if(_start_ != null)
        {
            _start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _start_ = node;
    }

    public TSemicolon getScOne()
    {
        return _scOne_;
    }

    public void setScOne(TSemicolon node)
    {
        if(_scOne_ != null)
        {
            _scOne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _scOne_ = node;
    }

    public PConditionalExpression getConditionalExpression()
    {
        return _conditionalExpression_;
    }

    public void setConditionalExpression(PConditionalExpression node)
    {
        if(_conditionalExpression_ != null)
        {
            _conditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conditionalExpression_ = node;
    }

    public TSemicolon getScTwo()
    {
        return _scTwo_;
    }

    public void setScTwo(TSemicolon node)
    {
        if(_scTwo_ != null)
        {
            _scTwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _scTwo_ = node;
    }

    public PBasicStatement getIter()
    {
        return _iter_;
    }

    public void setIter(PBasicStatement node)
    {
        if(_iter_ != null)
        {
            _iter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _iter_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public PCompoundStatement getCompoundStatement()
    {
        return _compoundStatement_;
    }

    public void setCompoundStatement(PCompoundStatement node)
    {
        if(_compoundStatement_ != null)
        {
            _compoundStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compoundStatement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_for_)
            + toString(_lPar_)
            + toString(_start_)
            + toString(_scOne_)
            + toString(_conditionalExpression_)
            + toString(_scTwo_)
            + toString(_iter_)
            + toString(_rPar_)
            + toString(_compoundStatement_);
    }

    void removeChild(Node child)
    {
        if(_for_ == child)
        {
            _for_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_start_ == child)
        {
            _start_ = null;
            return;
        }

        if(_scOne_ == child)
        {
            _scOne_ = null;
            return;
        }

        if(_conditionalExpression_ == child)
        {
            _conditionalExpression_ = null;
            return;
        }

        if(_scTwo_ == child)
        {
            _scTwo_ = null;
            return;
        }

        if(_iter_ == child)
        {
            _iter_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_compoundStatement_ == child)
        {
            _compoundStatement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_start_ == oldChild)
        {
            setStart((PBasicStatement) newChild);
            return;
        }

        if(_scOne_ == oldChild)
        {
            setScOne((TSemicolon) newChild);
            return;
        }

        if(_conditionalExpression_ == oldChild)
        {
            setConditionalExpression((PConditionalExpression) newChild);
            return;
        }

        if(_scTwo_ == oldChild)
        {
            setScTwo((TSemicolon) newChild);
            return;
        }

        if(_iter_ == oldChild)
        {
            setIter((PBasicStatement) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_compoundStatement_ == oldChild)
        {
            setCompoundStatement((PCompoundStatement) newChild);
            return;
        }

    }
}
