package org.nitlanguage.ndt.ui.editor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.eclipse.jface.text.TextAttribute;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;
import org.nitlanguage.gen.node.*;

/**
 * Reposit of all the color classes associated to the Tokens generated by the parser
 * @author lucas.bajolet
 */
public class NitColorReposit {

	/**
	 * HashMap containing the associated TextAttribute object for the Tokens
	 * generated by the Nit Lexer
	 */
	private Map<Class<?>, TextAttribute> keywords;

	/** The Reposit is a Singleton */
	private static NitColorReposit instance;

	// Cached keywords list
	private String[] keywordsCache = null;

	/**
	 * TextAttribute objects representing all the colors of the different tokens
	 */
	private static TextAttribute commentColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 128, 0)), null, 
				SWT.NORMAL);
	private static TextAttribute classColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(44, 145, 175)), null, 
				SWT.NORMAL);
	private static TextAttribute numberColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(217, 92, 0)), null, 
				SWT.NORMAL);
	private static TextAttribute stringColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(163, 21, 21)), null, 
				SWT.NORMAL);
	private static TextAttribute operatorColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 66, 37)), null, 
				SWT.BOLD);
	private static TextAttribute keywordColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 0, 255)), null, 
				SWT.BOLD);
	private static TextAttribute booleanOperatorColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(150, 0, 24)), null,
				SWT.BOLD);
	private static TextAttribute abortColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(178, 34, 34)), 
				new Color(Display.getCurrent(), new RGB(216, 191, 216)), 
				SWT.BOLD);
	private static TextAttribute errorColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(255, 0, 0)), null,
				SWT.UNDERLINE_ERROR);
	private static TextAttribute externColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 0, 0)), 
				new Color(Display.getCurrent(), new RGB(237, 235, 236)),
				SWT.ITALIC);

	/** The default attribute of a token */
	private static TextAttribute defaultAttribute = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 0, 0)), null, 
				SWT.NORMAL);

	/**
	 * The Color Reposit, used to set and get the colors of the different tokens
	 * identified by the lexer
	 */
	private NitColorReposit() {
		keywords = new HashMap<Class<?>, TextAttribute>();

		// Populating keywords HashMap with colors
		keywords.put(TComment.class, commentColor);
		keywords.put(TKwmodule.class, keywordColor);
		keywords.put(TKwimport.class, keywordColor);
		keywords.put(TKwclass.class, keywordColor);
		keywords.put(TKwabstract.class, keywordColor);
		keywords.put(TKwinterface.class, keywordColor);
		keywords.put(TKwenum.class, keywordColor);
		//keywords.put(TKwspecial.class, keywordColor);
		keywords.put(TKwend.class, keywordColor);
		keywords.put(TKwmeth.class, keywordColor);
		keywords.put(TKwtype.class, keywordColor);
		keywords.put(TKwinit.class, keywordColor);
		keywords.put(TKwredef.class, keywordColor);
		keywords.put(TKwis.class, keywordColor);
		keywords.put(TKwdo.class, keywordColor);
		keywords.put(TKwreadable.class, keywordColor);
		keywords.put(TKwwritable.class, keywordColor);
		keywords.put(TKwvar.class, keywordColor);
		keywords.put(TKwintern.class, keywordColor);
		keywords.put(TKwextern.class, keywordColor);
		keywords.put(TKwprotected.class, keywordColor);
		keywords.put(TKwprivate.class, keywordColor);
		keywords.put(TKwintrude.class, keywordColor);
		keywords.put(TKwif.class, keywordColor);
		keywords.put(TKwthen.class, keywordColor);
		keywords.put(TKwelse.class, keywordColor);
		keywords.put(TKwwhile.class, keywordColor);
		keywords.put(TKwloop.class, keywordColor);
		keywords.put(TKwfor.class, keywordColor);
		keywords.put(TKwin.class, keywordColor);
		keywords.put(TKwand.class, booleanOperatorColor);
		keywords.put(TKwor.class, booleanOperatorColor);
		keywords.put(TKwnot.class, booleanOperatorColor);
		keywords.put(TKwreturn.class, keywordColor);
		keywords.put(TKwcontinue.class, keywordColor);
		keywords.put(TKwbreak.class, keywordColor);
		keywords.put(TKwabort.class, abortColor);
		keywords.put(TKwassert.class, keywordColor);
		keywords.put(TKwnew.class, keywordColor);
		keywords.put(TKwisa.class, keywordColor);
		keywords.put(TKwonce.class, keywordColor);
		keywords.put(TKwsuper.class, keywordColor);
		keywords.put(TKwself.class, keywordColor);
		keywords.put(TKwtrue.class, keywordColor);
		keywords.put(TKwfalse.class, keywordColor);
		keywords.put(TKwnull.class, keywordColor);
		keywords.put(TKwas.class, keywordColor);
		keywords.put(TKwnullable.class, keywordColor);
		keywords.put(TKwisset.class, keywordColor);
		keywords.put(TKwlabel.class, keywordColor);
		keywords.put(TOpar.class, defaultAttribute);
		keywords.put(TCpar.class, defaultAttribute);
		keywords.put(TObra.class, defaultAttribute);
		keywords.put(TCbra.class, defaultAttribute);
		keywords.put(TComma.class, defaultAttribute);
		keywords.put(TColumn.class, operatorColor);
		keywords.put(TQuad.class, operatorColor);
		keywords.put(TAssign.class, operatorColor);
		keywords.put(TPluseq.class, operatorColor);
		keywords.put(TMinuseq.class, operatorColor);
		keywords.put(TDotdotdot.class, operatorColor);
		keywords.put(TDotdot.class, operatorColor);
		keywords.put(TDot.class, operatorColor);
		keywords.put(TPlus.class, operatorColor);
		keywords.put(TMinus.class, operatorColor);
		keywords.put(TStar.class, operatorColor);
		keywords.put(TSlash.class, operatorColor);
		keywords.put(TPercent.class, operatorColor);
		keywords.put(TEq.class, booleanOperatorColor);
		keywords.put(TNe.class, booleanOperatorColor);
		keywords.put(TLt.class, booleanOperatorColor);
		keywords.put(TLe.class, booleanOperatorColor);
		keywords.put(TLl.class, booleanOperatorColor);
		keywords.put(TGt.class, booleanOperatorColor);
		keywords.put(TGe.class, booleanOperatorColor);
		keywords.put(TGg.class, booleanOperatorColor);
		keywords.put(TStarship.class, booleanOperatorColor);
		keywords.put(TBang.class, booleanOperatorColor);
		keywords.put(TClassid.class, classColor);
		keywords.put(TId.class, defaultAttribute);
		keywords.put(TAttrid.class, defaultAttribute);
		keywords.put(TNumber.class, numberColor);
		keywords.put(TFloat.class, numberColor);
		keywords.put(TChar.class, numberColor);
		keywords.put(TString.class, stringColor);
		keywords.put(TStartString.class, stringColor);
		keywords.put(TMidString.class, stringColor);
		keywords.put(TEndString.class, stringColor);
		keywords.put(TBadChar.class, errorColor);
		keywords.put(TBadString.class, errorColor);
		keywords.put(TExternCodeSegment.class, externColor);

		keywordsCache = this.getKeywords();
	}

	/**
	 * Singleton method to get back the only instance of the Color Reposit
	 * 
	 * @return The current instance of NitColorReposit
	 */
	public static NitColorReposit getInstance() {
		if (NitColorReposit.instance == null) {
			instance = new NitColorReposit();
		}
		return instance;
	}

	/**
	 * Method to get the TextAttribute corresponding to the Token sent by the
	 * Lexer
	 * @param word The token class as sent by the Lexer
	 * @return The TextAttribute corresponding to the token @param word
	 */
	public TextAttribute getStyleForKeyWord(Class<?> token) {
		TextAttribute tt = keywords.get(token);
		if (tt != null) {
			return tt;
		} else {
			return defaultAttribute;
		}
	}

	/**
	 * Get the kewords for the Nit Language as set in the reposit
	 * 
	 * @return An array of Nit Keywords
	 */
	public String[] getKeywords() {
		if (this.keywordsCache == null) {
			Set<Class<?>> keyClasses = this.keywords.keySet();
			ArrayList<String> results = new ArrayList<String>();

			for (Class<?> cl : keyClasses) {
				String clName = cl.getName();
				if (clName.substring(0, 3).toLowerCase().startsWith("tkw")) {
					results.add(clName.substring(3, clName.length()));
				}
			}

			//this.keywordsCache = results.toArray(new String[results.size()]);
		}

		return this.keywordsCache;
	}
}
