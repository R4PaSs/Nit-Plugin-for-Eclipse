package org.nitlanguage.ndt.ui.editor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.jface.text.TextAttribute;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;
import org.nitlanguage.gen.simplec.node.*;
import org.nitlanguage.ndt.core.model.ctools.CLNitExtern;
import org.nitlanguage.ndt.core.model.ctools.CRNitExtern;

/**
 * Reposit of all the color classes associated to the Tokens generated by the c parser
 * @author nathan.heu
 */
public class CColorReposit {

	/**
	 * HashMap containing the associated TextAttribute object for the Tokens
	 * generated by the Nit Lexer
	 */
	private Map<Class<?>, TextAttribute> keywords;

	/** The Reposit is a Singleton */
	private static CColorReposit instance;

	// Cached keywords list
	private String[] keywordsCache = null;

	public static Color lineBackground = new Color(Display.getCurrent(), new RGB(255, 255, 204));
	
	private static int commonStyle = SWT.ITALIC;
	
	/**
	 * TextAttribute objects representing all the colors of the different tokens
	 */
	private static TextAttribute preprocColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(127, 0, 85)), 
				null, commonStyle);
	private static TextAttribute nitExternColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 00, 255)), 
				null, 
				SWT.BOLD);
	private static TextAttribute commentColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 128, 0)),				
				null, commonStyle);
	private static TextAttribute identifierColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(56, 56, 0)),				
				null, commonStyle);
	private static TextAttribute primitiveColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(127, 0, 85)),				
				null, SWT.BOLD|SWT.ITALIC);
	private static TextAttribute keywordColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(127, 0, 85)),				
				null, SWT.BOLD|SWT.ITALIC);
	private static TextAttribute definedDataColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(127, 0, 85)),				
				null, SWT.BOLD|SWT.ITALIC);
	private static TextAttribute braceColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 0, 0)),				
				null, commonStyle);
	private static TextAttribute parColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 56, 80)),				
				null, commonStyle);
	private static TextAttribute stringColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(163, 21, 21)),				
				null, commonStyle);
	private static TextAttribute numberColor = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(217, 92, 0)),				
				null, commonStyle);
		
	/** The default attribute of a token */
	private static TextAttribute defaultAttribute = new TextAttribute(
				new Color(Display.getCurrent(), new RGB(0, 0, 0)),
				null, commonStyle);

	/**
	 * The Color Reposit, used to set and get the colors of the different tokens
	 * identified by the lexer
	 */
	private CColorReposit() {
		keywords = new HashMap<Class<?>, TextAttribute>();

		keywords.put(TPreprocessor.class, preprocColor);
		keywords.put(CLNitExtern.class, nitExternColor);
		keywords.put(CRNitExtern.class, nitExternColor);
		
		keywords.put(TComment.class, commentColor);
		keywords.put(TIdentifier.class, identifierColor);
		keywords.put(TIntegerConstant.class, numberColor);
		keywords.put(TFloatingConstant.class, numberColor);
		
		keywords.put(TLBrace.class, braceColor);
		keywords.put(TRBrace.class, braceColor);
		keywords.put(TLPar.class, parColor);
		keywords.put(TRPar.class, parColor);
		keywords.put(TStringLitteral.class, stringColor);
		
		//primitive tokens color
		keywords.put(TVoid.class, primitiveColor);
		keywords.put(TChar.class, primitiveColor);
		keywords.put(TInt.class, primitiveColor);
		keywords.put(TShort.class, primitiveColor);
		keywords.put(TLong.class, primitiveColor);
		keywords.put(TFloat.class, primitiveColor);
		keywords.put(TDouble.class, primitiveColor);
		keywords.put(TSigned.class, primitiveColor);
		keywords.put(TUnsigned.class, primitiveColor);	
		
		//keywords
		keywords.put(TCase.class, keywordColor);
		keywords.put(TDefault.class, keywordColor);
		keywords.put(TIf.class, keywordColor);
		keywords.put(TElse.class, keywordColor);
		keywords.put(TSwitch.class, keywordColor);
		keywords.put(TWhile.class, keywordColor);
		keywords.put(TDo.class, keywordColor);
		keywords.put(TFor.class, keywordColor);
		keywords.put(TContinue.class, keywordColor);
		keywords.put(TBreak.class, keywordColor);
		keywords.put(TReturn.class, keywordColor);
		keywords.put(TTypedef.class, keywordColor);
		keywords.put(TExtern.class, keywordColor);
		keywords.put(TStatic.class, keywordColor);
		keywords.put(TSizeof.class, keywordColor);
		
		//programmer defined data types
		keywords.put(TStruct.class, definedDataColor);
		keywords.put(TUnion.class, definedDataColor);
		keywords.put(TEnum.class, definedDataColor);
		
		keywords.put(TTypedef.class, definedDataColor);
				
		keywordsCache = this.getKeywords();
	}

	/**
	 * Singleton method to get back the only instance of the Color Reposit
	 * 
	 * @return The current instance of NitColorReposit
	 */
	public static CColorReposit getInstance() {
		if (CColorReposit.instance == null) {
			instance = new CColorReposit();
		}
		return instance;
	}

	/**
	 * Method to get the TextAttribute corresponding to the Token sent by the
	 * Lexer
	 * @param word The token class as sent by the Lexer
	 * @return The TextAttribute corresponding to the token @param word
	 */
	public TextAttribute getStyleForKeyWord(Class<?> token) {
		TextAttribute tt = keywords.get(token);
		if (tt != null) {
			return tt;
		} else {
			//if(token != TBlank.class) System.out.println("Aucun style trouv√© pour le token " + token.getName());
			return defaultAttribute;
		}
	}

	/**
	 * Get the kewords for the Nit Language as set in the reposit
	 * 
	 * @return An array of Nit Keywords
	 */
	public String[] getKeywords() {
		if (this.keywordsCache == null) {
			Set<Class<?>> keyClasses = this.keywords.keySet();
			ArrayList<String> results = new ArrayList<String>();

			for (Class<?> cl : keyClasses) {
				String clName = cl.getName();
				if (clName.substring(0, 3).toLowerCase().startsWith("tkw")) {
					results.add(clName.substring(3, clName.length()));
				}
			}

			//this.keywordsCache = results.toArray(new String[results.size()]);
		}

		return this.keywordsCache;
	}
}
